# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/atexit/index.rst:3
msgid "atexit --- Program Shutdown Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:8
msgid "Register function(s) to be called when a program is closing down."
msgstr ""

#: ../../source/atexit/index.rst:10
msgid "The ``atexit`` module provides an interface to register functions to be called when a program closes down normally."
msgstr ""

#: ../../source/atexit/index.rst:14
msgid "Registering Exit Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:19
msgid "This is an example of registering a function explicitly by calling ``register()``."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_simple.py"
msgstr ""

#: ../../source/atexit/index.rst:26
msgid "Because the program does not do anything else, ``all_done()`` is called right away."
msgstr ""

#: ../../source/atexit/index.rst:43
msgid "It is also possible to register more than one function and to pass arguments to the registered functions.  That can be useful to cleanly disconnect from databases, remove temporary files, etc.  Instead of keeping a list of resources that need to be freed, a separate clean-up function can be registered for each resource."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_multiple.py"
msgstr ""

#: ../../source/atexit/index.rst:53
msgid "The exit functions are called in the reverse of the order in which they are registered. This method allows modules to be cleaned up in the reverse order from which they are imported (and therefore register their ``atexit`` functions), which should reduce dependency conflicts."
msgstr ""

#: ../../source/atexit/index.rst:75
msgid "Decorator Syntax"
msgstr ""

#: ../../source/atexit/index.rst:80
msgid "Functions that require no arguments can be registered by using ``register()`` as a decorator.  This alternative syntax is convenient for cleanup functions that operate on module-level global data."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_decorator.py"
msgstr ""

#: ../../source/atexit/index.rst:89
msgid "Because the function is registered as it is defined, it is also important to ensure that it works properly even if no other work is performed by the module. If the resources it is supposed to clean up were never initialized, calling the exit callback should not produce an error."
msgstr ""

#: ../../source/atexit/index.rst:110
msgid "Canceling Callbacks"
msgstr ""

#: ../../source/atexit/index.rst:112
msgid "To cancel an exit callback, remove it from the registry using ``unregister()``."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_unregister.py"
msgstr ""

#: ../../source/atexit/index.rst:119
msgid "All calls to the same callback are canceled, regardless of how many times it has been registered."
msgstr ""

#: ../../source/atexit/index.rst:133
msgid "Removing a callback that was not previously registered is not considered an error."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_unregister_not_registered.py"
msgstr ""

#: ../../source/atexit/index.rst:140
msgid "Because it silently ignores unknown callbacks, ``unregister()`` can be used even when the sequence of registrations might not be known."
msgstr ""

#: ../../source/atexit/index.rst:156
msgid "When Are atexit Callbacks Not Called?"
msgstr ""

#: ../../source/atexit/index.rst:158
msgid "The callbacks registered with ``atexit`` are not invoked if any of these conditions is met:"
msgstr ""

#: ../../source/atexit/index.rst:161
msgid "The program dies because of a signal."
msgstr ""

#: ../../source/atexit/index.rst:163
msgid "``os._exit()`` is invoked directly."
msgstr ""

#: ../../source/atexit/index.rst:165
msgid "A fatal error is detected in the interpreter."
msgstr ""

#: ../../source/atexit/index.rst:167
msgid "An example from the :mod:`subprocess` section can be updated to show what happens when a program is killed by a signal. Two files are involved, the parent and the child programs. The parent starts the child, pauses, then kills it."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_signal_parent.py"
msgstr ""

#: ../../source/atexit/index.rst:176
msgid "The child sets up an ``atexit`` callback, and then sleeps until the signal arrives."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_signal_child.py"
msgstr ""

#: ../../source/atexit/index.rst:183
msgid "When run, this is the output."
msgstr ""

#: ../../source/atexit/index.rst:200
msgid "The child does not print the message embedded in ``not_called()``."
msgstr ""

#: ../../source/atexit/index.rst:202
msgid "If a program uses ``os._exit()``, it can avoid having the ``atexit`` callbacks invoked."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_os_exit.py"
msgstr ""

#: ../../source/atexit/index.rst:209
msgid "Because this example bypasses the normal exit path, the callback is not run. The print output is also not flushed, so the example is run with the ``-u`` option to enable unbuffered I/O."
msgstr ""

#: ../../source/atexit/index.rst:227
msgid "To ensure that the callbacks are run, allow the program to terminate by running out of statements to execute or by calling ``sys.exit()``."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_sys_exit.py"
msgstr ""

#: ../../source/atexit/index.rst:235
msgid "This example calls ``sys.exit()``, so the registered callbacks are invoked."
msgstr ""

#: ../../source/atexit/index.rst:255
msgid "Handling Exceptions"
msgstr ""

#: ../../source/atexit/index.rst:257
msgid "Tracebacks for exceptions raised in ``atexit`` callbacks are printed to the console and the last exception raised is re-raised to be the final error message of the program."
msgstr ""

#: ../../source/atexit/index.rst:0
msgid "atexit_exception.py"
msgstr ""

#: ../../source/atexit/index.rst:265
msgid "The registration order controls the execution order. If an error in one callback introduces an error in another (registered earlier, but called later), the final error message might not be the most useful error message to show the user."
msgstr ""

#: ../../source/atexit/index.rst:292
msgid "It is usually best to handle and quietly log all exceptions in cleanup functions, since it is messy to have a program dump errors on exit."
msgstr ""

#: ../../source/atexit/index.rst:297
msgid ":pydoc:`atexit`"
msgstr ""

#: ../../source/atexit/index.rst:299
msgid ":ref:`sys-exceptions` -- Global handling for uncaught exceptions."
msgstr ""

#: ../../source/atexit/index.rst:302
msgid ":ref:`Python 2 to 3 porting notes for atexit <porting-atexit>`"
msgstr ""

