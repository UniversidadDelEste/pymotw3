# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/fileinput/index.rst:3
msgid "fileinput --- Command-Line Filter Framework"
msgstr ""

#: ../../source/fileinput/index.rst:8
msgid "Create command-line filter programs to process lines from input streams."
msgstr ""

#: ../../source/fileinput/index.rst:10
msgid "The ``fileinput`` module is a framework for creating command-line programs for processing text files as a filter."
msgstr ""

#: ../../source/fileinput/index.rst:14
msgid "Converting M3U files to RSS"
msgstr ""

#: ../../source/fileinput/index.rst:16
msgid "An example of a filter is m3utorss_, a program to convert a set of MP3 files into an RSS feed that can be shared as a podcast.  The inputs to the program are one or more m3u files listing the MP3 files to be distributed. The output is an RSS feed printed to the console. To process the input, the program needs to iterate over the list of filenames and"
msgstr ""

#: ../../source/fileinput/index.rst:23
msgid "Open each file."
msgstr ""

#: ../../source/fileinput/index.rst:24
msgid "Read each line of the file."
msgstr ""

#: ../../source/fileinput/index.rst:25
msgid "Figure out if the line refers to an mp3 file."
msgstr ""

#: ../../source/fileinput/index.rst:26
msgid "If it does, add a new item to the RSS feed."
msgstr ""

#: ../../source/fileinput/index.rst:27
msgid "Print the output."
msgstr ""

#: ../../source/fileinput/index.rst:29
msgid "All of this file handling could have been coded by hand. It is not that complicated and, with some testing, even the error handling would be right. But ``fileinput`` handles all of the details, so the program is simplified."
msgstr ""

#: ../../source/fileinput/index.rst:37
msgid "The ``input()`` function takes as argument a list of filenames to examine. If the list is empty, the module reads data from standard input. The function returns an iterator that produces individual lines from the text files being processed.  The caller just needs to loop over each line, skipping blanks and comments, to find the references to MP3 files."
msgstr ""

#: ../../source/fileinput/index.rst:44
msgid "Here is the complete program."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "fileinput_example.py"
msgstr ""

#: ../../source/fileinput/index.rst:50
msgid "This sample input file contains the names of several MP3 files."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "sample_data.m3u"
msgstr ""

#: ../../source/fileinput/index.rst:55
msgid "Running ``fileinput_example.py`` with the sample input produces XML data using the RSS format."
msgstr ""

#: ../../source/fileinput/index.rst:88
msgid "Progress Metadata"
msgstr ""

#: ../../source/fileinput/index.rst:90
msgid "In the previous example, the filename and line number being processed were not important. Other tools, such as grep-like searching, might need that information. ``fileinput`` includes functions for accessing all of the metadata about the current line (``filename()``, ``filelineno()``, and ``lineno()``)."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "fileinput_grep.py"
msgstr ""

#: ../../source/fileinput/index.rst:100
msgid "A basic pattern matching loop can be used to find the occurrences of the string ``\"fileinput\"`` in the source for these examples."
msgstr ""

#: ../../source/fileinput/index.rst:135
msgid "Text can also be read from standard input."
msgstr ""

#: ../../source/fileinput/index.rst:165
msgid "In-place Filtering"
msgstr ""

#: ../../source/fileinput/index.rst:167
msgid "Another common file-processing operation is to modify the contents of a file where it is, rather than making a new file.  For example, a Unix hosts file might need to be updated if a subnet range changes."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "etc_hosts.txt before modifications"
msgstr ""

#: ../../source/fileinput/index.rst:174
msgid "The safe way to make the change automatically is to create a new file based on the input and then replace the original with the edited copy. ``fileinput`` supports this automatically using the ``inplace`` option."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "fileinput_change_subnet.py"
msgstr ""

#: ../../source/fileinput/index.rst:183
msgid "Although the script uses ``print()``, no output is produced because ``fileinput`` redirects standard output to the file being overwritten."
msgstr ""

#: ../../source/fileinput/index.rst:199
msgid "The updated file has the changed IP addresses of all of the servers on the ``10.16.0.0/16`` network."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "etc_hosts.txt after modifications"
msgstr ""

#: ../../source/fileinput/index.rst:205
msgid "Before processing begins, a backup file is created using the original name plus ``.bak``."
msgstr ""

#: ../../source/fileinput/index.rst:0
msgid "fileinput_change_subnet_noisy.py"
msgstr ""

#: ../../source/fileinput/index.rst:212
msgid "The backup file is removed when the input is closed."
msgstr ""

#: ../../source/fileinput/index.rst:234
msgid ":pydoc:`fileinput`"
msgstr ""

#: ../../source/fileinput/index.rst:236
msgid "m3utorss_ -- Script to convert m3u files listing MP3s to an RSS file suitable for use as a podcast feed."
msgstr ""

#: ../../source/fileinput/index.rst:239
msgid ":mod:`xml.etree` -- More details of using ElementTree to produce XML."
msgstr ""

