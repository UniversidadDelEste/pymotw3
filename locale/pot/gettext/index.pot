# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/gettext/index.rst:3
msgid "gettext --- Message Catalogs"
msgstr ""

#: ../../source/gettext/index.rst:8
msgid "Message catalog API for internationalization."
msgstr ""

#: ../../source/gettext/index.rst:10
msgid "The ``gettext`` module provides a pure-Python implementation compatible with the GNU **gettext** library for message translation and catalog management.  The tools available with the Python source distribution enable you to extract messages from a set of source files, build a message catalog containing translations, and use that message catalog to display an appropriate message for the user at runtime."
msgstr ""

#: ../../source/gettext/index.rst:18
msgid "Message catalogs can be used to provide internationalized interfaces for a program, showing messages in a language appropriate to the user. They can also be used for other message customizations, including \"skinning\" an interface for different wrappers or partners."
msgstr ""

#: ../../source/gettext/index.rst:25
msgid "Although the standard library documentation says all of the necessary tools are included with Python, ``pygettext.py`` failed to extract messages wrapped in the ``ngettext`` call, even with the appropriate command line options. These examples use ``xgettext`` from the GNU **gettext** tool set, instead."
msgstr ""

#: ../../source/gettext/index.rst:32
msgid "Translation Workflow Overview"
msgstr ""

#: ../../source/gettext/index.rst:34
msgid "The process for setting up and using translations includes five steps."
msgstr ""

#: ../../source/gettext/index.rst:36
msgid "*Identify and mark up literal strings in the source code that contain messages to translate.*"
msgstr ""

#: ../../source/gettext/index.rst:39
msgid "Start by identifying the messages within the program source that need to be translated, and marking the literal strings so the extraction program can find them."
msgstr ""

#: ../../source/gettext/index.rst:43
msgid "*Extract the messages.*"
msgstr ""

#: ../../source/gettext/index.rst:45
msgid "After the translatable strings in the source are identified, use ``xgettext`` to extract them and create a ``.pot`` file, or *translation template*. The template is a text file with copies of all of the strings identified and placeholders for their translations."
msgstr ""

#: ../../source/gettext/index.rst:51
msgid "*Translate the messages.*"
msgstr ""

#: ../../source/gettext/index.rst:53
msgid "Give a copy of the ``.pot`` file to the translator, changing the extension to ``.po``. The ``.po`` file is an editable source file used as input for the compilation step. The translator should update the header text in the file and provide translations for all of the strings."
msgstr ""

#: ../../source/gettext/index.rst:59
msgid "*\"Compile\" the message catalog from the translation.*"
msgstr ""

#: ../../source/gettext/index.rst:61
msgid "When the translator sends back the completed ``.po`` file, compile the text file to the binary catalog format using ``msgfmt``. The binary format is used by the runtime catalog lookup code."
msgstr ""

#: ../../source/gettext/index.rst:65
msgid "*Load and activate the appropriate message catalog at runtime.*"
msgstr ""

#: ../../source/gettext/index.rst:67
msgid "The final step is to add a few lines to the application to configure and load the message catalog and install the translation function. There are a couple of ways to do that, with associated trade-offs."
msgstr ""

#: ../../source/gettext/index.rst:72
msgid "The rest of this section will examine those steps in a little more detail, starting with the code modifications needed."
msgstr ""

#: ../../source/gettext/index.rst:76
msgid "Creating Message Catalogs from Source Code"
msgstr ""

#: ../../source/gettext/index.rst:78
msgid "``gettext`` works by looking up literal strings in a database of translations, and pulling out the appropriate translated string.  The usual pattern is to bind the appropriate lookup function to the name \"``_``\" (a single underscore character) so that the code is not cluttered with a lot of calls to functions with longer names."
msgstr ""

#: ../../source/gettext/index.rst:84
msgid "The message extraction program, ``xgettext``, looks for messages embedded in calls to the catalog lookup functions.  It understands different source languages and uses an appropriate parser for each. If the lookup functions are aliased, or extra functions are added, give ``xgettext`` the names of additional symbols to consider when extracting messages."
msgstr ""

#: ../../source/gettext/index.rst:91
msgid "This script has a single message ready to be translated."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_example.py"
msgstr ""

#: ../../source/gettext/index.rst:97
msgid "The text ``\"This message is in the script.\"`` is the message to be substituted from the catalog.  Fallback mode is enabled, so if the script is run without a message catalog, the in-lined message is printed."
msgstr ""

#: ../../source/gettext/index.rst:115
msgid "The next step is to extract the message and create the ``.pot`` file, using ``pygettext.py`` or ``xgettext``."
msgstr ""

#: ../../source/gettext/index.rst:129
msgid "The output file produced contains the following content."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "example.pot"
msgstr ""

#: ../../source/gettext/index.rst:134
msgid "Message catalogs are installed into directories organized by *domain* and *language*.  The domain is provided by the application or library, and is usually a unique value like the application name.  In this case, the domain in ``gettext_example.py`` is ``example_domain``.  The language value is provided by the user's environment at runtime, through one of the environment variables ``LANGUAGE``, ``LC_ALL``, ``LC_MESSAGES``, or ``LANG``, depending on their configuration and platform.  These examples were all run with the language set to ``en_US``."
msgstr ""

#: ../../source/gettext/index.rst:144
msgid "Now that the template is ready, the next step is to create the required directory structure and copy the template in to the right spot.  The ``locale`` directory inside the PyMOTW source tree will serve as the root of the message catalog directory for these examples, but it is typically better to use a directory accessible system-wide so that all users have access to the message catalogs.  The full path to the catalog input source is ``$localedir/$language/LC_MESSAGES/$domain.po``, and the actual catalog has the filename extension ``.mo``."
msgstr ""

#: ../../source/gettext/index.rst:154
msgid "The catalog is created by copying ``example.pot`` to ``locale/en_US/LC_MESSAGES/example.po`` and editing it to change the values in the header and set the alternate messages.  The result is shown next."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "locale/en_US/LC_MESSAGES/example.po"
msgstr ""

#: ../../source/gettext/index.rst:162
msgid "The catalog is built from the ``.po`` file using ``msgformat``."
msgstr ""

#: ../../source/gettext/index.rst:176
msgid "The domain in ``gettext_example.py`` is ``example_domain``, but the file is called ``example.pot``. To have ``gettext`` find the right translation file, the names need to match."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_example_corrected.py"
msgstr ""

#: ../../source/gettext/index.rst:184
msgid "Now when the script is run, the message from the catalog is printed instead of the in-line string."
msgstr ""

#: ../../source/gettext/index.rst:201
msgid "Finding Message Catalogs at Runtime"
msgstr ""

#: ../../source/gettext/index.rst:203
msgid "As described earlier, the *locale directory* containing the message catalogs is organized based on the language with catalogs named for the *domain* of the program.  Different operating systems define their own default value, but ``gettext`` does not know all of these defaults.  It uses a default locale directory of ``sys.prefix + '/share/locale'``, but most of the time it is safer to always explicitly give a ``localedir`` value than to depend on this default being valid.  The ``find()`` function is responsible for locating an appropriate message catalog at runtime."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_find.py"
msgstr ""

#: ../../source/gettext/index.rst:217
msgid "The language portion of the path is taken from one of several environment variables that can be used to configure localization features (``LANGUAGE``, ``LC_ALL``, ``LC_MESSAGES``, and ``LANG``). The first variable found to be set is used.  Multiple languages can be selected by separating the values with a colon (``:``).  To see how that works, use a second message catalog to run a few experiments."
msgstr ""

#: ../../source/gettext/index.rst:264
msgid "Although ``find()`` shows the complete list of catalogs, only the first one in the sequence is actually loaded for message lookups."
msgstr ""

#: ../../source/gettext/index.rst:299
msgid "Plural Values"
msgstr ""

#: ../../source/gettext/index.rst:301
msgid "While simple message substitution will handle most translation needs, ``gettext`` treats pluralization as a special case.  Depending on the language, the difference between the singular and plural forms of a message may vary only by the ending of a single word, or the entire sentence structure may be different.  There may also be different forms depending on the level of plurality.  To make managing plurals easier (and, in some cases, possible), there is a separate set of functions for asking for the plural form of a message."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_plural.py"
msgstr ""

#: ../../source/gettext/index.rst:314
msgid "Use ``ngettext()`` to access the plural substitution for a message. The arguments are the messages to be translated and the item count."
msgstr ""

#: ../../source/gettext/index.rst:328
msgid "Since there are alternate forms to be translated, the replacements are listed in an array.  Using an array allows translations for languages with multiple plural forms (for example, Polish has different forms indicating the relative quantity)."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "plural.pot"
msgstr ""

#: ../../source/gettext/index.rst:336
msgid "In addition to filling in the translation strings, the library needs to be told about the way plurals are formed so it knows how to index into the array for any given count value.  The line ``\"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\n\"`` includes two values to replace manually.  ``nplurals`` is an integer indicating the size of the array (the number of translations used) and ``plural`` is a C language expression for converting the incoming quantity to an index in the array when looking up the translation.  The literal string ``n`` is replaced with the quantity passed to ``ungettext()``."
msgstr ""

#: ../../source/gettext/index.rst:346
msgid "For example, English includes two plural forms.  A quantity of ``0`` is treated as plural (\"0 bananas\").  The ``Plural-Forms`` entry is::"
msgstr ""

#: ../../source/gettext/index.rst:351
msgid "The singular translation would then go in position 0, and the plural translation in position 1."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "locale/en_US/LC_MESSAGES/plural.po"
msgstr ""

#: ../../source/gettext/index.rst:357
msgid "Running the test script a few times after the catalog is compiled will demonstrate how different values of N are converted to indexes for the translation strings."
msgstr ""

#: ../../source/gettext/index.rst:390
msgid "Application vs. Module Localization"
msgstr ""

#: ../../source/gettext/index.rst:392
msgid "The scope of a translation effort defines how ``gettext`` is installed and used with a body of code."
msgstr ""

#: ../../source/gettext/index.rst:396
msgid "Application Localization"
msgstr ""

#: ../../source/gettext/index.rst:398
msgid "For application-wide translations, it is acceptable for the author to install a function like ``ngettext()`` globally using the ``__builtins__`` namespace, because they have control over the top-level of the application's code."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_app_builtin.py"
msgstr ""

#: ../../source/gettext/index.rst:407
msgid "The ``install()`` function binds ``gettext()`` to the name ``_()`` in the ``__builtins__`` namespace.  It also adds ``ngettext()`` and other functions listed in ``names``."
msgstr ""

#: ../../source/gettext/index.rst:412
msgid "Module Localization"
msgstr ""

#: ../../source/gettext/index.rst:414
msgid "For a library or individual module, modifying ``__builtins__`` is not a good idea because it may introduce conflicts with an application global value.  Instead, import or re-bind the names of translation functions by hand at the top of the module."
msgstr ""

#: ../../source/gettext/index.rst:0
msgid "gettext_module_global.py"
msgstr ""

#: ../../source/gettext/index.rst:424
msgid "Switching Translations"
msgstr ""

#: ../../source/gettext/index.rst:426
msgid "The earlier examples all use a single translation for the duration of the program.  Some situations, especially web applications, need to use different message catalogs at different times, without exiting and resetting the environment.  For those cases, the class-based API provided in ``gettext`` will be more convenient.  The API calls are essentially the same as the global calls described in this section, but the message catalog object is exposed and can be manipulated directly, so that multiple catalogs can be used."
msgstr ""

#: ../../source/gettext/index.rst:437
msgid ":pydoc:`gettext`"
msgstr ""

#: ../../source/gettext/index.rst:439
msgid ":mod:`locale` -- Other localization tools."
msgstr ""

#: ../../source/gettext/index.rst:441
msgid "`GNU gettext`_ -- The message catalog formats, API, etc. for this module are all based on the original gettext package from GNU. The catalog file formats are compatible, and the command line scripts have similar options (if not identical).  The `GNU gettext manual <http://www.gnu.org/software/gettext/manual/gettext.html>`_ has a detailed description of the file formats and describes GNU versions of the tools for working with them."
msgstr ""

#: ../../source/gettext/index.rst:450
msgid "`Plural forms <http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`__ -- Handling of plural forms of words and sentences in different languages."
msgstr ""

#: ../../source/gettext/index.rst:455
msgid "`Internationalizing Python <http://legacy.python.org/workshops/1997-10/proceedings/loewis.html>`_ -- A paper by Martin von Löwis about techniques for internationalization of Python applications."
msgstr ""

#: ../../source/gettext/index.rst:460
msgid "`Django Internationalization <https://docs.djangoproject.com/en/dev/topics/i18n/>`_ -- Another good source of information on using gettext, including real-life examples."
msgstr ""

