# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/array/index.rst:3
msgid "array --- Sequence of Fixed-type Data"
msgstr ""

#: ../../source/array/index.rst:8
msgid "Manage sequences of fixed-type numerical data efficiently."
msgstr ""

#: ../../source/array/index.rst:10
msgid "The ``array`` module defines a sequence data structure that looks very much like a ``list``, except that all of the members have to be of the same primitive type. The types supported are all numeric or other fixed-size primitive types such as bytes."
msgstr ""

#: ../../source/array/index.rst:15
msgid "Refer to :table:`Type Codes for array Members` for some of the supported types. The standard library documentation for ``array`` includes a complete list of type codes."
msgstr ""

#: ../../source/array/index.rst:0
msgid "Type Codes for array Members"
msgstr ""

#: ../../source/array/index.rst:23
msgid "Code"
msgstr ""

#: ../../source/array/index.rst:24
msgid "Type"
msgstr ""

#: ../../source/array/index.rst:25
msgid "Minimum size (bytes)"
msgstr ""

#: ../../source/array/index.rst:26
msgid "``b``"
msgstr ""

#: ../../source/array/index.rst:27
#: ../../source/array/index.rst:30
msgid "int"
msgstr ""

#: ../../source/array/index.rst:28
#: ../../source/array/index.rst:31
msgid "1"
msgstr ""

#: ../../source/array/index.rst:29
msgid "``B``"
msgstr ""

#: ../../source/array/index.rst:32
msgid "``h``"
msgstr ""

#: ../../source/array/index.rst:33
msgid "signed short"
msgstr ""

#: ../../source/array/index.rst:34
#: ../../source/array/index.rst:37
#: ../../source/array/index.rst:40
#: ../../source/array/index.rst:43
msgid "2"
msgstr ""

#: ../../source/array/index.rst:35
msgid "``H``"
msgstr ""

#: ../../source/array/index.rst:36
msgid "unsigned short"
msgstr ""

#: ../../source/array/index.rst:38
msgid "``i``"
msgstr ""

#: ../../source/array/index.rst:39
msgid "signed int"
msgstr ""

#: ../../source/array/index.rst:41
msgid "``I``"
msgstr ""

#: ../../source/array/index.rst:42
msgid "unsigned int"
msgstr ""

#: ../../source/array/index.rst:44
msgid "``l``"
msgstr ""

#: ../../source/array/index.rst:45
msgid "signed long"
msgstr ""

#: ../../source/array/index.rst:46
#: ../../source/array/index.rst:49
#: ../../source/array/index.rst:58
msgid "4"
msgstr ""

#: ../../source/array/index.rst:47
msgid "``L``"
msgstr ""

#: ../../source/array/index.rst:48
msgid "unsigned long"
msgstr ""

#: ../../source/array/index.rst:50
msgid "``q``"
msgstr ""

#: ../../source/array/index.rst:51
msgid "signed long long"
msgstr ""

#: ../../source/array/index.rst:52
#: ../../source/array/index.rst:55
#: ../../source/array/index.rst:61
msgid "8"
msgstr ""

#: ../../source/array/index.rst:53
msgid "``Q``"
msgstr ""

#: ../../source/array/index.rst:54
msgid "unsigned long long"
msgstr ""

#: ../../source/array/index.rst:56
msgid "``f``"
msgstr ""

#: ../../source/array/index.rst:57
msgid "float"
msgstr ""

#: ../../source/array/index.rst:59
msgid "``d``"
msgstr ""

#: ../../source/array/index.rst:60
msgid "double float"
msgstr ""

#: ../../source/array/index.rst:64
msgid "Initialization"
msgstr ""

#: ../../source/array/index.rst:66
msgid "An ``array`` is instantiated with an argument describing the type of data to be allowed, and possibly an initial sequence of data to store in the array."
msgstr ""

#: ../../source/array/index.rst:0
msgid "array_string.py"
msgstr ""

#: ../../source/array/index.rst:74
msgid "In this example, the array is configured to hold a sequence of bytes and is initialized with a simple byte string."
msgstr ""

#: ../../source/array/index.rst:94
msgid "Manipulating Arrays"
msgstr ""

#: ../../source/array/index.rst:96
msgid "An ``array`` can be extended and otherwise manipulated in the same ways as other Python sequences."
msgstr ""

#: ../../source/array/index.rst:0
msgid "array_sequence.py"
msgstr ""

#: ../../source/array/index.rst:103
msgid "The supported operations include slicing, iterating, and adding elements to the end."
msgstr ""

#: ../../source/array/index.rst:124
msgid "Arrays and Files"
msgstr ""

#: ../../source/array/index.rst:126
msgid "The contents of an array can be written to and read from files using built-in methods coded efficiently for that purpose."
msgstr ""

#: ../../source/array/index.rst:0
msgid "array_file.py"
msgstr ""

#: ../../source/array/index.rst:133
msgid "This example illustrates reading the data \"raw,\" meaning directly from the binary file, versus reading it into a new array and converting the bytes to the appropriate types."
msgstr ""

#: ../../source/array/index.rst:151
msgid "``tofile()`` uses ``tobytes()`` to format the data, and ``fromfile()`` uses ``frombytes()`` to convert it back to an array instance."
msgstr ""

#: ../../source/array/index.rst:0
msgid "array_tobytes.py"
msgstr ""

#: ../../source/array/index.rst:158
msgid "Both ``tobytes()`` and ``frombytes()`` work on byte strings, not Unicode strings."
msgstr ""

#: ../../source/array/index.rst:176
msgid "Alternative Byte Ordering"
msgstr ""

#: ../../source/array/index.rst:178
msgid "If the data in the array is not in the native byte order, or if the data needs to be swapped before being sent to a system with a different byte order (or over the network), it is possible to convert the entire array without iterating over the elements from Python."
msgstr ""

#: ../../source/array/index.rst:0
msgid "array_byteswap.py"
msgstr ""

#: ../../source/array/index.rst:187
msgid "The ``byteswap()`` method switches the byte order of the items in the array from within C, so it is much more efficient than looping over the data in Python."
msgstr ""

#: ../../source/array/index.rst:212
msgid ":pydoc:`array`"
msgstr ""

#: ../../source/array/index.rst:214
msgid ":mod:`struct` -- The ``struct`` module."
msgstr ""

#: ../../source/array/index.rst:216
msgid "`Numerical Python <http://www.scipy.org>`_ -- NumPy is a Python library for working with large data sets efficiently."
msgstr ""

#: ../../source/array/index.rst:219
msgid ":ref:`Python 2 to 3 porting notes for array <porting-array>`"
msgstr ""

