# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/uuid/index.rst:3
msgid "uuid --- Universally Unique Identifiers"
msgstr ""

#: ../../source/uuid/index.rst:8
msgid "The ``uuid`` module implements Universally Unique Identifiers as described in RFC 4122."
msgstr ""

#: ../../source/uuid/index.rst:10
msgid ":rfc:`4122` defines a system for creating universally unique identifiers for resources in a way that does not require a central registrar. UUID values are 128 bits long and, as the reference guide says, \"can guarantee uniqueness across space and time.\" They are useful for generating identifiers for documents, hosts, application clients, and other situations where a unique value is necessary. The RFC is specifically focused on creating a Uniform Resource Name namespace and covers three main algorithms:"
msgstr ""

#: ../../source/uuid/index.rst:19
msgid "Using IEEE 802 MAC addresses as a source of uniqueness"
msgstr ""

#: ../../source/uuid/index.rst:20
msgid "Using pseudo-random numbers"
msgstr ""

#: ../../source/uuid/index.rst:21
msgid "Using well-known strings combined with cryptographic hashing"
msgstr ""

#: ../../source/uuid/index.rst:23
msgid "In all cases, the seed value is combined with the system clock and a clock sequence value used to maintain uniqueness in case the clock is set backwards."
msgstr ""

#: ../../source/uuid/index.rst:28
msgid "UUID 1 - IEEE 802 MAC Address"
msgstr ""

#: ../../source/uuid/index.rst:30
msgid "UUID version 1 values are computed using the MAC address of the host. The ``uuid`` module uses ``getnode()`` to retrieve the MAC value of the current system."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_getnode.py"
msgstr ""

#: ../../source/uuid/index.rst:38
msgid "If a system has more than one network card, and so more than one MAC, any one of the values may be returned."
msgstr ""

#: ../../source/uuid/index.rst:53
msgid "To generate a UUID for a host, identified by its MAC address, use the ``uuid1()`` function. The node identifier argument is optional; leave the field blank to use the value returned by ``getnode()``."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid1.py"
msgstr ""

#: ../../source/uuid/index.rst:61
msgid "The components of the UUID object returned can be accessed through read-only instance attributes. Some attributes, such as ``hex``, ``int``, and ``urn``, are different representations of the UUID value."
msgstr ""

#: ../../source/uuid/index.rst:93
msgid "Because of the time component, each call to ``uuid1()`` returns a new value."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid1_repeat.py"
msgstr ""

#: ../../source/uuid/index.rst:100
msgid "In this output, only the time component (at the beginning of the string) changes."
msgstr ""

#: ../../source/uuid/index.rst:117
msgid "Because each computer has a different MAC address, running the sample program on different systems will produce entirely different values. This example passes explicit node IDs to simulate running on different hosts."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid1_othermac.py"
msgstr ""

#: ../../source/uuid/index.rst:126
msgid "In addition to a different time value the node identifier at the end of the UUID also changes."
msgstr ""

#: ../../source/uuid/index.rst:144
msgid "UUID 3 and 5 - Name-Based Values"
msgstr ""

#: ../../source/uuid/index.rst:146
msgid "It is also useful in some contexts to create UUID values from names instead of random or time-based values. Versions 3 and 5 of the UUID specification use cryptographic hash values (MD5 or SHA-1, respectively) to combine namespace-specific seed values with names. There are several well-known namespaces, identified by pre-defined UUID values, for working with DNS, URLs, ISO OIDs, and X.500 Distinguished Names. New application-specific namespaces can be defined by generating and saving UUID values."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid3_uuid5.py"
msgstr ""

#: ../../source/uuid/index.rst:159
msgid "To create a UUID from a DNS name, pass ``uuid.NAMESPACE_DNS`` as the namespace argument to ``uuid3()`` or ``uuid5()``:"
msgstr ""

#: ../../source/uuid/index.rst:181
msgid "The UUID value for a given name in a namespace is always the same, no matter when or where it is calculated."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid3_repeat.py"
msgstr ""

#: ../../source/uuid/index.rst:188
msgid "Values for the same name in the namespaces are different."
msgstr ""

#: ../../source/uuid/index.rst:219
msgid "UUID 4 - Random Values"
msgstr ""

#: ../../source/uuid/index.rst:221
msgid "Sometimes host-based and namespace-based UUID values are not \"different enough.\" For example, in cases where UUID is intended to be used as a hash key, a more random sequence of values with more differentiation is desirable to avoid collisions in the hash table. Having values with fewer common digits also makes it easier to find them in log files. To add greater differentiation in UUIDs, use ``uuid4()`` to generate them using random input values."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid4.py"
msgstr ""

#: ../../source/uuid/index.rst:233
msgid "The source of randomness depends on which C libraries are available when ``uuid`` is imported.  If ``libuuid`` (or ``uuid.dll``) can be loaded and it contains a function for generating random values, it is used.  Otherwise ``os.urandom()`` or the :mod:`random` module are used."
msgstr ""

#: ../../source/uuid/index.rst:255
msgid "Working with UUID Objects"
msgstr ""

#: ../../source/uuid/index.rst:257
msgid "In addition to generating new UUID values, it is possible to parse strings in standard formats to create UUID objects, making it easier to handle comparisons and sorting operations."
msgstr ""

#: ../../source/uuid/index.rst:0
msgid "uuid_uuid_objects.py"
msgstr ""

#: ../../source/uuid/index.rst:265
msgid "Surrounding curly braces are removed from the input, as are dashes (``-``).  If the string has a prefix containing ``urn:`` and/or ``uuid:``, it is also removed.  The remaining text must be a string of 16 hexadecimal digits, which are then interpreted as a UUID value."
msgstr ""

#: ../../source/uuid/index.rst:298
msgid ":pydoc:`uuid`"
msgstr ""

#: ../../source/uuid/index.rst:300
msgid ":ref:`Python 2 to 3 porting notes for uuid <porting-uuid>`"
msgstr ""

#: ../../source/uuid/index.rst:302
msgid ":rfc:`4122` -- A Universally Unique Identifier (UUID) URN Namespace"
msgstr ""

