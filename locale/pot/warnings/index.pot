# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/warnings/index.rst:3
msgid "warnings --- Non-fatal Alerts"
msgstr ""

#: ../../source/warnings/index.rst:8
msgid "Deliver non-fatal alerts to the user about issues encountered when running a program."
msgstr ""

#: ../../source/warnings/index.rst:10
msgid "The ``warnings`` module was introduced by :pep:`230` as a way to warn programmers about changes in language or library features in anticipation of backwards incompatible changes coming with Python 3.0. It can also be used to report recoverable configuration errors or feature degradation from missing libraries.  It is better to deliver user-facing messages via the :mod:`logging` module, though, because warnings sent to the console may be lost."
msgstr ""

#: ../../source/warnings/index.rst:18
msgid "Since warnings are not fatal, a program may encounter the same warn-able situation many times in the course of running. The ``warnings`` module suppresses repeated messages from the same source to cut down on the annoyance of seeing the same warning over and over.  The output can be controlled on a case-by-case basis, using the command line options to the interpreter or by calling functions found in ``warnings``."
msgstr ""

#: ../../source/warnings/index.rst:27
msgid "Categories and Filtering"
msgstr ""

#: ../../source/warnings/index.rst:29
msgid "Warnings are categorized using subclasses of the built-in exception class ``Warning``. Several standard values are described in the online documentation for the :mod:`exceptions` module, and custom warnings can be added by subclassing from ``Warning``."
msgstr ""

#: ../../source/warnings/index.rst:34
msgid "Warnings are processed based on *filter* settings.  A filter consists of five parts: the ``action``, ``message``, ``category``, ``module``, and ``line number``.  The ``message`` portion of the filter is a regular expression that is used to match the warning text.  The ``category`` is a name of an exception class.  The ``module`` contains a regular expression to be matched against the module name generating the warning.  And the ``line number`` can be used to change the handling on specific occurrences of a warning."
msgstr ""

#: ../../source/warnings/index.rst:43
msgid "When a warning is generated, it is compared against all of the registered filters. The first filter that matches controls the action taken for the warning. If no filter matches, the default action is taken.  The actions understood by the filtering mechanism are listed in :table:`Warning Filter Actions`."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "Warning Filter Actions"
msgstr ""

#: ../../source/warnings/index.rst:52
msgid "Action"
msgstr ""

#: ../../source/warnings/index.rst:52
msgid "Meaning"
msgstr ""

#: ../../source/warnings/index.rst:54
msgid "error"
msgstr ""

#: ../../source/warnings/index.rst:54
msgid "Turn the warning into an exception."
msgstr ""

#: ../../source/warnings/index.rst:55
msgid "ignore"
msgstr ""

#: ../../source/warnings/index.rst:55
msgid "Discard the warning."
msgstr ""

#: ../../source/warnings/index.rst:56
msgid "always"
msgstr ""

#: ../../source/warnings/index.rst:56
msgid "Always emit a warning."
msgstr ""

#: ../../source/warnings/index.rst:57
msgid "default"
msgstr ""

#: ../../source/warnings/index.rst:57
msgid "Print the warning the first time it is generated from each location."
msgstr ""

#: ../../source/warnings/index.rst:58
msgid "module"
msgstr ""

#: ../../source/warnings/index.rst:58
msgid "Print the warning the first time it is generated from each module."
msgstr ""

#: ../../source/warnings/index.rst:59
msgid "once"
msgstr ""

#: ../../source/warnings/index.rst:59
msgid "Print the warning the first time it is generated."
msgstr ""

#: ../../source/warnings/index.rst:63
msgid "Generating Warnings"
msgstr ""

#: ../../source/warnings/index.rst:65
msgid "The simplest way to emit a warning is to call ``warn()`` with the message as an argument."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_warn.py"
msgstr ""

#: ../../source/warnings/index.rst:72
msgid "Then, when the program runs, the message is printed."
msgstr ""

#: ../../source/warnings/index.rst:89
msgid "Even though the warning is printed, the default behavior is to continue past that point and run the rest of the program. That behavior can be changed with a filter."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_warn_raise.py"
msgstr ""

#: ../../source/warnings/index.rst:97
msgid "In this example, the ``simplefilter()`` function adds an entry to the internal filter list to tell the ``warnings`` module to raise an exception when a ``UserWarning`` warning is issued."
msgstr ""

#: ../../source/warnings/index.rst:118
msgid "The filter behavior can also be controlled from the command line by using the ``-W`` option to the interpreter.  Specify the filter properties as a string with the five parts (action, message, category, module, and line number) separated by colons (``:``). For example, if ``warnings_warn.py`` is run with a filter set to raise an error on ``UserWarning``, an exception is produced."
msgstr ""

#: ../../source/warnings/index.rst:141
msgid "Since the fields for ``message`` and ``module`` were left blank, they were interpreted as matching anything."
msgstr ""

#: ../../source/warnings/index.rst:145
msgid "Filtering with Patterns"
msgstr ""

#: ../../source/warnings/index.rst:147
msgid "To filter on more complex rules programmatically, use ``filterwarnings()``. For example, to filter based on the content of the message text, give a regular expression pattern as the ``message`` argument."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_filterwarnings_message.py"
msgstr ""

#: ../../source/warnings/index.rst:156
msgid "The pattern contains \"``do not``\", but the actual message uses \"``Do not``\". The pattern matches because the regular expression is always compiled to look for case insensitive matches."
msgstr ""

#: ../../source/warnings/index.rst:174
msgid "The example program below generates two warnings."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_filter.py"
msgstr ""

#: ../../source/warnings/index.rst:180
msgid "One of the warnings can be ignored using the filter argument on the command line."
msgstr ""

#: ../../source/warnings/index.rst:196
msgid "The same pattern matching rules apply to the name of the source module containing the call generating the warning. Suppress all messages from the ``warnings_filter`` module by passing the module name as the pattern to the ``module`` argument."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_filterwarnings_module.py"
msgstr ""

#: ../../source/warnings/index.rst:205
msgid "Since the filter is in place, no warnings are emitted when ``warnings_filter`` is imported."
msgstr ""

#: ../../source/warnings/index.rst:219
msgid "To suppress only the message on line 13 of ``warnings_filter``, include the line number as the last argument to ``filterwarnings()``.  Use the actual line number from the source file to limit the filter, or ``0`` to have the filter apply to all occurrences of the message."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_filterwarnings_lineno.py"
msgstr ""

#: ../../source/warnings/index.rst:229
msgid "The pattern matches any message, so the important arguments are the module name and line number."
msgstr ""

#: ../../source/warnings/index.rst:247
msgid "Repeated Warnings"
msgstr ""

#: ../../source/warnings/index.rst:249
msgid "By default, most types of warnings are only printed the first time they occur in a given location, with \"location\" defined by the combination of module and line number where the warning is generated."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_repeated.py"
msgstr ""

#: ../../source/warnings/index.rst:257
msgid "This example calls the same function several times, but produces a single warning."
msgstr ""

#: ../../source/warnings/index.rst:273
msgid "The ``\"once\"`` action can be used to suppress instances of the same message from different locations."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_once.py"
msgstr ""

#: ../../source/warnings/index.rst:280
msgid "The message text for all warnings is saved and only unique messages are printed."
msgstr ""

#: ../../source/warnings/index.rst:296
msgid "Similarly, ``\"module\"`` will suppress repeated messages from the same module, no matter what line number."
msgstr ""

#: ../../source/warnings/index.rst:300
msgid "Alternate Message Delivery Functions"
msgstr ""

#: ../../source/warnings/index.rst:302
msgid "Normally warnings are printed to ``sys.stderr``.  Change that behavior by replacing the ``showwarning()`` function inside the ``warnings`` module. For example, to send warnings to a log file instead of standard error, replace ``showwarning()`` with a function that logs the warning."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_showwarning.py"
msgstr ""

#: ../../source/warnings/index.rst:312
msgid "The warnings are emitted with the rest of the log messages when ``warn()`` is called."
msgstr ""

#: ../../source/warnings/index.rst:328
msgid "Formatting"
msgstr ""

#: ../../source/warnings/index.rst:330
msgid "If warnings should go to standard error, but they need to be reformatted, replace ``formatwarning()``."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_formatwarning.py"
msgstr ""

#: ../../source/warnings/index.rst:337
msgid "The format function must return a single string containing the representation of the warning to be displayed to the user."
msgstr ""

#: ../../source/warnings/index.rst:357
msgid "Stack Level in Warnings"
msgstr ""

#: ../../source/warnings/index.rst:359
msgid "By default, the warning message includes the source line that generated it, when available. It is not always useful to see the line of code with the actual warning message, though. Instead, ``warn()`` can be told how far up the stack it has to go to find the line that called the function containing the warning.  That way, users of a deprecated function can see where the function is called, instead of the implementation of the function."
msgstr ""

#: ../../source/warnings/index.rst:0
msgid "warnings_warn_stacklevel.py"
msgstr ""

#: ../../source/warnings/index.rst:373
msgid "In this example ``warn()`` needs to go up the stack two levels, one for itself and one for ``old_function()``."
msgstr ""

#: ../../source/warnings/index.rst:392
msgid ":pydoc:`warnings`"
msgstr ""

#: ../../source/warnings/index.rst:394
msgid ":pep:`230` -- Warning Framework"
msgstr ""

#: ../../source/warnings/index.rst:396
msgid ":mod:`exceptions` -- Base classes for exceptions and warnings."
msgstr ""

#: ../../source/warnings/index.rst:398
msgid ":mod:`logging` -- An alternative mechanism for delivering warnings is to write to the log."
msgstr ""

