# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/selectors/index.rst:3
msgid "selectors --- I/O Multiplexing Abstractions"
msgstr ""

#: ../../source/selectors/index.rst:8
msgid "Provide platform-independent abstractions for I/O multiplexing based on the ``select`` module."
msgstr ""

#: ../../source/selectors/index.rst:11
msgid "The ``selectors`` module provides a platform-independent abstraction layer on top of the platform-specific I/O monitoring functions in :mod:`select`."
msgstr ""

#: ../../source/selectors/index.rst:16
msgid "Operating Model"
msgstr ""

#: ../../source/selectors/index.rst:18
msgid "The APIs in ``selectors`` are event-based, similar to ``poll()`` from ``select``. There are several implementations and the module automatically sets the alias ``DefaultSelector`` to refer to the most efficient one for the current system configuration."
msgstr ""

#: ../../source/selectors/index.rst:23
msgid "A selector object provides methods for specifying what events to look for on a socket, and then lets the caller wait for events in a platform-independent way.  Registering interest in an event creates a ``SelectorKey``, which holds the socket, information about the events of interest, and optional application data.  The owner of the selector calls its ``select()`` method to learn about events. The return value is a sequence of key objects and a bitmask indicating what events have occurred. A program using a selector should repeatedly call ``select()``, then handle the events appropriately."
msgstr ""

#: ../../source/selectors/index.rst:34
msgid "Echo Server"
msgstr ""

#: ../../source/selectors/index.rst:36
msgid "The echo server example below uses the application data in the ``SelectorKey`` to register a callback function to be invoked on the new event. The main loop gets the callback from the key and passes the socket and event mask to it. As the server starts, it registers the ``accept()`` function to be called for read events on the main server socket. Accepting the connection produces a new socket, which is then registered with the ``read()`` function as a callback for read events."
msgstr ""

#: ../../source/selectors/index.rst:0
msgid "selectors_echo_server.py"
msgstr ""

#: ../../source/selectors/index.rst:49
msgid "When ``read()`` receives no data from the socket, it interprets the read event as the other side of the connection being closed instead of sending data. It removes the socket from the selector and closes it. In order to avoid an infinite loop, this server also shuts itself down after it has finished communicating with a single client."
msgstr ""

#: ../../source/selectors/index.rst:56
msgid "Echo Client"
msgstr ""

#: ../../source/selectors/index.rst:58
msgid "The echo client example below processes all of the I/O events in the main loop, instead of using callbacks. It sets up the selector to report read events on the socket, and to report when the socket is ready to send data. Because it is looking at two types of events, the client must check which occurred by examining the mask value.  After all of its outgoing data has been sent, it changes the selector configuration to only report when there is data to read."
msgstr ""

#: ../../source/selectors/index.rst:0
msgid "selectors_echo_client.py"
msgstr ""

#: ../../source/selectors/index.rst:70
msgid "The client tracks the amount of data it has sent, and the amount it has received. When those values match and are non-zero, the client exits the processing loop and cleanly shuts down by removing the socket from the selector and closing both the socket and the selector."
msgstr ""

#: ../../source/selectors/index.rst:76
msgid "Server and Client Together"
msgstr ""

#: ../../source/selectors/index.rst:78
msgid "The client and server should be run in separate terminal windows, so they can communicate with each other.  The server output shows the incoming connection and data, as well as the response sent back to the client."
msgstr ""

#: ../../source/selectors/index.rst:100
msgid "The client output shows the outgoing message and the response from the server."
msgstr ""

#: ../../source/selectors/index.rst:129
msgid ":pydoc:`selectors`"
msgstr ""

#: ../../source/selectors/index.rst:131
msgid ":mod:`select` -- Lower-level APIs for handling I/O efficiently."
msgstr ""

