# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/site/index.rst:3
msgid "site --- Site-wide Configuration"
msgstr ""

#: ../../source/site/index.rst:8
msgid "The ``site`` module handles site-specific configuration, especially the import path."
msgstr ""

#: ../../source/site/index.rst:12
msgid "Import Path"
msgstr ""

#: ../../source/site/index.rst:14
msgid "``site`` is automatically imported each time the interpreter starts up.  On import, it extends ``sys.path`` with site-specific names constructed by combining the prefix values ``sys.prefix`` and ``sys.exec_prefix`` with several suffixes.  The prefix values used are saved in the module-level variable ``PREFIXES`` for reference later.  Under Windows, the suffixes are an empty string and ``lib/site-packages``.  For Unix-like platforms, the values are ``lib/python$version/site-packages`` (where ``$version`` is replaced by the major and minor version number of the interpreter, such as ``3.5``) and ``lib/site-python``."
msgstr ""

#: ../../source/site/index.rst:0
msgid "site_import_path.py"
msgstr ""

#: ../../source/site/index.rst:29
msgid "Each of the paths resulting from the combinations is tested, and those that exist are added to ``sys.path``.  This output shows the framework version of Python installed on a Mac OS X system."
msgstr ""

#: ../../source/site/index.rst:54
msgid "User Directories"
msgstr ""

#: ../../source/site/index.rst:56
msgid "In addition to the global site-packages paths, ``site`` is responsible for adding the user-specific locations to the import path. The user-specific paths are all based on the ``USER_BASE`` directory, which usually located in a part of the file system owned (and writable) by the current user. Inside the ``USER_BASE`` directory is a ``site-packages`` directory, with the path accessible as ``USER_SITE``."
msgstr ""

#: ../../source/site/index.rst:0
msgid "site_user_base.py"
msgstr ""

#: ../../source/site/index.rst:68
msgid "The ``USER_SITE`` path name is created using the same platform-specific suffix values described earlier."
msgstr ""

#: ../../source/site/index.rst:84
msgid "The user base directory can be set through the ``PYTHONUSERBASE`` environment variable, and has platform-specific defaults (``~/Python$version/site-packages`` for Windows and ``~/.local`` for non-Windows)."
msgstr ""

#: ../../source/site/index.rst:102
msgid "The user directory is disabled under some circumstances that would pose security issues (for example, if the process is running with a different effective user or group id than the actual user that started it).  An application can check the setting by examining ``ENABLE_USER_SITE``."
msgstr ""

#: ../../source/site/index.rst:0
msgid "site_enable_user_site.py"
msgstr ""

#: ../../source/site/index.rst:112
msgid "The user directory can also be explicitly disabled on the command line with ``-s``."
msgstr ""

#: ../../source/site/index.rst:131
msgid "Path Configuration Files"
msgstr ""

#: ../../source/site/index.rst:133
msgid "As paths are added to the import path, they are also scanned for *path configuration files*.  A path configuration file is a plain text file with the extension ``.pth``.  Each line in the file can take one of four forms."
msgstr ""

#: ../../source/site/index.rst:138
msgid "A full or relative path to another location that should be added to the import path."
msgstr ""

#: ../../source/site/index.rst:140
msgid "A Python statement to be executed.  All such lines must begin with an ``import`` statement."
msgstr ""

#: ../../source/site/index.rst:142
msgid "Blank lines are ignored."
msgstr ""

#: ../../source/site/index.rst:143
msgid "A line starting with ``#`` is treated as a comment and ignored."
msgstr ""

#: ../../source/site/index.rst:145
msgid "Path configuration files can be used to extend the import path to look in locations that would not have been added automatically.  For example, the ``setuptools`` package adds a path to ``easy-install.pth`` when it installs a package in development mode using ``python setup.py develop``."
msgstr ""

#: ../../source/site/index.rst:151
msgid "The function for extending ``sys.path`` is public, and it can be used in example programs to show how the path configuration files work. Given a directory named ``with_modules`` containing the file ``mymodule.py`` with this ``print`` statement showing how the module was imported:"
msgstr ""

#: ../../source/site/index.rst:0
msgid "with_modules/mymodule.py"
msgstr ""

#: ../../source/site/index.rst:160
msgid "This script shows how ``addsitedir()`` extends the import path so the interpreter can find the desired module."
msgstr ""

#: ../../source/site/index.rst:0
msgid "site_addsitedir.py"
msgstr ""

#: ../../source/site/index.rst:167
msgid "After the directory containing the module is added to ``sys.path``, the script can import ``mymodule`` without issue."
msgstr ""

#: ../../source/site/index.rst:188
msgid "The path changes by ``addsitedir()`` go beyond simply appending the argument to ``sys.path``.  If the directory given to ``addsitedir()`` includes any files matching the pattern ``*.pth``, they are loaded as path configuration files. Given a directory structure like the following"
msgstr ""

#: ../../source/site/index.rst:202
msgid "If ``with_pth/pymotw.pth`` contains"
msgstr ""

#: ../../source/site/index.rst:206
msgid "then ``with_pth/subdir/mymodule.py`` can be imported by adding ``with_pth`` as a site directory, even though the module is not in that directory because both ``with_pth`` and ``with_pth/subdir`` are added to the import path."
msgstr ""

#: ../../source/site/index.rst:229
msgid "If a site directory contains multiple ``.pth`` files, they are processed in alphabetical order."
msgstr ""

#: ../../source/site/index.rst:257
msgid "In this case, the module is found in ``multiple_pth/from_a`` because ``a.pth`` is read before ``b.pth``."
msgstr ""

#: ../../source/site/index.rst:284
msgid "Customizing Site Configuration"
msgstr ""

#: ../../source/site/index.rst:286
msgid "The ``site`` module is also responsible for loading site-wide customization defined by the local site owner in a ``sitecustomize`` module.  Uses for ``sitecustomize`` include extending the import path and enabling coverage, profiling, or other development tools."
msgstr ""

#: ../../source/site/index.rst:292
msgid "For example, this ``sitecustomize.py`` script extends the import path with a directory based on the current platform.  The platform-specific path in ``/opt/python`` is added to the import path, so any packages installed there can be imported.  A system like this is useful for sharing packages containing compiled extension modules between hosts on a network via a shared file system.  Only the ``sitecustomize.py`` script needs to be installed on each host, and the other packages can be accessed from the file server."
msgstr ""

#: ../../source/site/index.rst:0
msgid "with_sitecustomize/sitecustomize.py"
msgstr ""

#: ../../source/site/index.rst:305
msgid "A simple script can be used to show that ``sitecustomize.py`` is imported before Python starts running your own code."
msgstr ""

#: ../../source/site/index.rst:0
msgid "with_sitecustomize/site_sitecustomize.py"
msgstr ""

#: ../../source/site/index.rst:312
msgid "Since ``sitecustomize`` is meant for system-wide configuration, it should be installed somewhere in the default path (usually in the ``site-packages`` directory).  This example sets ``PYTHONPATH`` explicitly to ensure the module is picked up."
msgstr ""

#: ../../source/site/index.rst:338
msgid "Customizing User Configuration"
msgstr ""

#: ../../source/site/index.rst:340
msgid "Similar to ``sitecustomize``, the ``usercustomize`` module can be used to set up user-specific settings each time the interpreter starts up.  ``usercustomize`` is loaded after ``sitecustomize``, so site-wide customizations can be overridden."
msgstr ""

#: ../../source/site/index.rst:345
msgid "In environments where a user's home directory is shared on several servers running different operating systems or versions, the standard user directory mechanism may not work for user-specific installations of packages.  In these cases, a platform-specific directory tree can be used instead."
msgstr ""

#: ../../source/site/index.rst:0
msgid "with_usercustomize/usercustomize.py"
msgstr ""

#: ../../source/site/index.rst:355
msgid "Another simple script, similar to the one used for ``sitecustomize``, can be used to show that ``usercustomize.py`` is imported before Python starts running other code."
msgstr ""

#: ../../source/site/index.rst:0
msgid "with_usercustomize/site_usercustomize.py"
msgstr ""

#: ../../source/site/index.rst:363
msgid "Since ``usercustomize`` is meant for user-specific configuration for a user, it should be installed somewhere in the user's default path, but not on the site-wide path. The default ``USER_BASE`` directory is a good location.  This example sets ``PYTHONPATH`` explicitly to ensure the module is picked up."
msgstr ""

#: ../../source/site/index.rst:385
msgid "When the user site directory feature is disabled, ``usercustomize`` is not imported, whether it is located in the user site directory or elsewhere."
msgstr ""

#: ../../source/site/index.rst:404
msgid "Disabling the site Module"
msgstr ""

#: ../../source/site/index.rst:406
msgid "To maintain backwards-compatibility with versions of Python from before the automatic import was added, the interpreter accepts an ``-S`` option."
msgstr ""

#: ../../source/site/index.rst:436
msgid ":pydoc:`site`"
msgstr ""

#: ../../source/site/index.rst:438
msgid ":ref:`sys-imports` -- Description of how the import path defined in ``sys`` works."
msgstr ""

#: ../../source/site/index.rst:441
msgid "`setuptools <https://setuptools.readthedocs.io/en/latest/index.html>`__ -- Packaging library and installation tool ``easy_install``."
msgstr ""

#: ../../source/site/index.rst:445
msgid "`Running code at Python startup <http://nedbatchelder.com/blog/201001/running_code_at_python_startup.html>`__ -- Post from Ned Batchelder discussing ways to cause the Python interpreter to run custom initialization code before starting the main program execution."
msgstr ""

