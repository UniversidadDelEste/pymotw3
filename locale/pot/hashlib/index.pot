# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/hashlib/index.rst:3
msgid "hashlib --- Cryptographic Hashing"
msgstr ""

#: ../../source/hashlib/index.rst:8
msgid "Cryptographic hashes and message digests"
msgstr ""

#: ../../source/hashlib/index.rst:10
msgid "The ``hashlib`` module defines an API for accessing different cryptographic hashing algorithms. To work with a specific hash algorithm, use the appropriate constructor function or ``new()`` to create a hash object. From there, the objects use the same API, no matter what algorithm is being used."
msgstr ""

#: ../../source/hashlib/index.rst:17
msgid "Hash Algorithms"
msgstr ""

#: ../../source/hashlib/index.rst:19
msgid "Since ``hashlib`` is \"backed\" by OpenSSL, all of the algorithms provided by that library are available, including:"
msgstr ""

#: ../../source/hashlib/index.rst:22
msgid "md5"
msgstr ""

#: ../../source/hashlib/index.rst:23
msgid "sha1"
msgstr ""

#: ../../source/hashlib/index.rst:24
msgid "sha224"
msgstr ""

#: ../../source/hashlib/index.rst:25
msgid "sha256"
msgstr ""

#: ../../source/hashlib/index.rst:26
msgid "sha384"
msgstr ""

#: ../../source/hashlib/index.rst:27
msgid "sha512"
msgstr ""

#: ../../source/hashlib/index.rst:29
msgid "Some algorithms are available on all platforms, and some depend on the underlying libraries. For lists of each, look at ``algorithms_guaranteed`` and ``algorithms_available`` respectively."
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_algorithms.py"
msgstr ""

#: ../../source/hashlib/index.rst:60
msgid "Sample Data"
msgstr ""

#: ../../source/hashlib/index.rst:62
msgid "All of the examples in this section use the same sample data:"
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_data.py"
msgstr ""

#: ../../source/hashlib/index.rst:70
msgid "MD5 Example"
msgstr ""

#: ../../source/hashlib/index.rst:72
msgid "To calculate the MD5 hash, or *digest*, for a block of data (here a unicode string converted to a byte string), first create the hash object, then add the data and call ``digest()`` or ``hexdigest()``."
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_md5.py"
msgstr ""

#: ../../source/hashlib/index.rst:81
msgid "This example uses the ``hexdigest()`` method instead of ``digest()`` because the output is formatted so it can be printed clearly. If a binary digest value is acceptable, use ``digest()``."
msgstr ""

#: ../../source/hashlib/index.rst:98
msgid "SHA1 Example"
msgstr ""

#: ../../source/hashlib/index.rst:100
msgid "A SHA1 digest is calculated in the same way."
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_sha1.py"
msgstr ""

#: ../../source/hashlib/index.rst:106
msgid "The digest value is different in this example because the algorithm changed from MD5 to SHA1."
msgstr ""

#: ../../source/hashlib/index.rst:123
msgid "Creating a Hash by Name"
msgstr ""

#: ../../source/hashlib/index.rst:125
msgid "Sometimes it is more convenient to refer to the algorithm by name in a string rather than by using the constructor function directly. It is useful, for example, to be able to store the hash type in a configuration file. In those cases, use ``new()`` to create a hash calculator."
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_new.py"
msgstr ""

#: ../../source/hashlib/index.rst:135
msgid "When run with a variety of arguments:"
msgstr ""

#: ../../source/hashlib/index.rst:167
msgid "Incremental Updates"
msgstr ""

#: ../../source/hashlib/index.rst:169
msgid "The ``update()`` method of the hash calculators can be called repeatedly. Each time, the digest is updated based on the additional text fed in. Updating incrementally is more efficient than reading an entire file into memory, and produces the same results."
msgstr ""

#: ../../source/hashlib/index.rst:0
msgid "hashlib_update.py"
msgstr ""

#: ../../source/hashlib/index.rst:178
msgid "This example demonstrates how to update a digest incrementally as data is read or otherwise produced."
msgstr ""

#: ../../source/hashlib/index.rst:197
msgid ":pydoc:`hashlib`"
msgstr ""

#: ../../source/hashlib/index.rst:199
msgid ":mod:`hmac` -- The ``hmac`` module."
msgstr ""

#: ../../source/hashlib/index.rst:201
msgid "OpenSSL_ -- An open source encryption toolkit."
msgstr ""

#: ../../source/hashlib/index.rst:203
msgid "Cryptography_ module -- A Python package that provides cryptographic recipes and primitives."
msgstr ""

#: ../../source/hashlib/index.rst:206
msgid "`Voidspace: IronPython and hashlib <http://www.voidspace.org.uk/python/weblog/arch_d7_2006_10_07.shtml#e497>`_ -- A wrapper for ``hashlib`` that works with IronPython."
msgstr ""

