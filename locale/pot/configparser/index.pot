# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/configparser/index.rst:3
msgid "configparser --- Work with Configuration Files"
msgstr ""

#: ../../source/configparser/index.rst:8
msgid "Read/write configuration files similar to Windows INI files"
msgstr ""

#: ../../source/configparser/index.rst:10
msgid "Use the ``configparser`` module to manage user-editable configuration files for an application. The contents of the configuration files can be organized into groups and several option value types are supported, including integers, floating point values, and Booleans.  Option values can be combined using Python formatting strings, to build longer values such as URLs from shorter values like host names and port numbers."
msgstr ""

#: ../../source/configparser/index.rst:19
msgid "Configuration File Format"
msgstr ""

#: ../../source/configparser/index.rst:21
msgid "The file format used by ``configparser`` is similar to the format used by older versions of Microsoft Windows.  It consists of one or more named *sections*, each of which can contain individual *options* with names and values."
msgstr ""

#: ../../source/configparser/index.rst:26
msgid "Config file sections are identified by looking for lines starting with ``[`` and ending with ``]``.  The value between the square brackets is the section name, and can contain any characters except square brackets."
msgstr ""

#: ../../source/configparser/index.rst:31
msgid "Options are listed one per line within a section.  The line starts with the name of the option, which is separated from the value by a colon (``:``) or equal sign (``=``).  Whitespace around the separator is ignored when the file is parsed."
msgstr ""

#: ../../source/configparser/index.rst:36
msgid "Lines starting with semi-colon (``;``) or octothorpe (``#``) are treated as comments and not visible when accessing the contents of the configuration file programmatically."
msgstr ""

#: ../../source/configparser/index.rst:40
msgid "This sample configuration file has a section named ``bug_tracker`` with three options, ``url``, ``username``, and ``password``."
msgstr ""

#: ../../source/configparser/index.rst:46
msgid "Reading Configuration Files"
msgstr ""

#: ../../source/configparser/index.rst:48
msgid "The most common use for a configuration file is to have a user or system administrator edit the file with a regular text editor to set application behavior defaults and then have the application read the file, parse it, and act based on its contents.  Use the ``read()`` method of :mod:`ConfigParser` to read the configuration file."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_read.py"
msgstr ""

#: ../../source/configparser/index.rst:58
msgid "This program reads the ``simple.ini`` file from the previous section and prints the value of the ``url`` option from the ``bug_tracker`` section."
msgstr ""

#: ../../source/configparser/index.rst:74
msgid "The ``read()`` method also accepts a list of filenames.  Each name in turn is scanned, and if the file exists it is opened and read."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_read_many.py"
msgstr ""

#: ../../source/configparser/index.rst:81
msgid "``read()`` returns a list containing the names of the files successfully loaded, so the program can discover which configuration files are missing and decide whether to ignore them or treat the condition as an error."
msgstr ""

#: ../../source/configparser/index.rst:101
msgid "Unicode Configuration Data"
msgstr ""

#: ../../source/configparser/index.rst:103
msgid "Configuration files containing Unicode data should be read using the proper encoding value.  The following example file changes the password value of the original input to contain Unicode characters and is encoded using UTF-8."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "unicode.ini"
msgstr ""

#: ../../source/configparser/index.rst:112
msgid "The file is opened with the appropriate decoder, converting the UTF-8 data to native Unicode strings."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_unicode.py"
msgstr ""

#: ../../source/configparser/index.rst:119
msgid "The value returned by ``get()`` is a Unicode string, so in order to print it safely it must be re-encoded as UTF-8."
msgstr ""

#: ../../source/configparser/index.rst:138
msgid "Accessing Configuration Settings"
msgstr ""

#: ../../source/configparser/index.rst:140
msgid "``ConfigParser`` includes methods for examining the structure of the parsed configuration, including listing the sections and options, and getting their values.  This configuration file includes two sections for separate web services."
msgstr ""

#: ../../source/configparser/index.rst:147
msgid "And this sample program exercises some of the methods for looking at the configuration data, including ``sections()``, ``options()``, and ``items()``."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_structure.py"
msgstr ""

#: ../../source/configparser/index.rst:155
msgid "Both ``sections()`` and ``options()`` return lists of strings, while ``items()`` returns a list of tuples containing the name-value pairs."
msgstr ""

#: ../../source/configparser/index.rst:182
msgid "A ``ConfigParser`` also supports the same mapping API as `dict`, with the ``ConfigParser`` acting as one dictionary containing separate dictionaries for each section."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_structure_dict.py"
msgstr ""

#: ../../source/configparser/index.rst:190
msgid "Using the mapping API to access the same configuration file produces the same output."
msgstr ""

#: ../../source/configparser/index.rst:220
msgid "Testing Whether Values Are Present"
msgstr ""

#: ../../source/configparser/index.rst:222
msgid "To test if a section exists, use ``has_section()``, passing the section name."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_has_section.py"
msgstr ""

#: ../../source/configparser/index.rst:229
msgid "Testing if a section exists before calling ``get()`` avoids exceptions for missing data."
msgstr ""

#: ../../source/configparser/index.rst:246
msgid "Use ``has_option()`` to test if an option exists within a section."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_has_option.py"
msgstr ""

#: ../../source/configparser/index.rst:252
msgid "If the section does not exist, ``has_option()`` returns ``False``."
msgstr ""

#: ../../source/configparser/index.rst:278
msgid "Value Types"
msgstr ""

#: ../../source/configparser/index.rst:280
msgid "All section and option names are treated as strings, but option values can be strings, integers, floating point numbers, or Booleans.  There are a range of possible Boolean values that are converted true or false.  The following example file includes one of each."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "types.ini"
msgstr ""

#: ../../source/configparser/index.rst:288
msgid "``ConfigParser`` does not make any attempt to understand the option type.  The application is expected to use the correct method to fetch the value as the desired type.  ``get()`` always returns a string.  Use ``getint()`` for integers, ``getfloat()`` for floating point numbers, and ``getboolean()`` for boolean values."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_value_types.py"
msgstr ""

#: ../../source/configparser/index.rst:298
msgid "Running this program with the example input produces the following output."
msgstr ""

#: ../../source/configparser/index.rst:329
msgid "Custom type converters can be added by passing conversion functions in the ``converters`` argument to ``ConfigParser``. Each converter receives a single input value, and should transform that value into the appropriate return type."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_custom_types.py"
msgstr ""

#: ../../source/configparser/index.rst:338
msgid "Adding a converter causes ``ConfigParser`` to automatically create a retrieval method for that type, using the name of the type as specified in ``converters``. In this example, the ``'datetime'`` converter causes a new ``getdatetime()`` method to be added."
msgstr ""

#: ../../source/configparser/index.rst:357
msgid "It is also possible to add converter methods directly to a subclass of ``ConfigParser``."
msgstr ""

#: ../../source/configparser/index.rst:362
msgid "Options as Flags"
msgstr ""

#: ../../source/configparser/index.rst:364
msgid "Usually, the parser requires an explicit value for each option, but with the ``ConfigParser`` parameter ``allow_no_value`` set to ``True`` an option can appear by itself on a line in the input file, and be used as a flag."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_allow_no_value.py"
msgstr ""

#: ../../source/configparser/index.rst:373
msgid "When an option has no explicit value, ``has_option()`` reports that the option exists and ``get()`` returns ``None``."
msgstr ""

#: ../../source/configparser/index.rst:400
msgid "Multi-line Strings"
msgstr ""

#: ../../source/configparser/index.rst:402
msgid "String values can span multiple lines, if subsequent lines are indented."
msgstr ""

#: ../../source/configparser/index.rst:407
msgid "Within the indented multi-line values, blank lines are treated as part of the value and preserved."
msgstr ""

#: ../../source/configparser/index.rst:428
msgid "Modifying Settings"
msgstr ""

#: ../../source/configparser/index.rst:430
msgid "While ``ConfigParser`` is primarily intended to be configured by reading settings from files, settings can also be populated by calling ``add_section()`` to create a new section, and ``set()`` to add or change an option."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_populate.py"
msgstr ""

#: ../../source/configparser/index.rst:439
msgid "All options must be set as strings, even if they will be retrieved as integer, float, or Boolean values."
msgstr ""

#: ../../source/configparser/index.rst:457
msgid "Sections and options can be removed from a ``ConfigParser`` with ``remove_section()`` and ``remove_option()``."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_remove.py"
msgstr ""

#: ../../source/configparser/index.rst:464
msgid "Removing a section deletes any options it contains."
msgstr ""

#: ../../source/configparser/index.rst:495
msgid "Saving Configuration Files"
msgstr ""

#: ../../source/configparser/index.rst:497
msgid "Once a ``ConfigParser`` is populated with desired data, it can be saved to a file by calling the ``write()`` method.  This makes it possible to provide a user interface for editing the configuration settings, without having to write any code to manage the file."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_write.py"
msgstr ""

#: ../../source/configparser/index.rst:507
msgid "The ``write()`` method takes a file-like object as argument.  It writes the data out in the INI format so it can be parsed again by ``ConfigParser``."
msgstr ""

#: ../../source/configparser/index.rst:529
msgid "Comments in the original configuration file are not preserved when reading, modifying, and re-writing a configuration file."
msgstr ""

#: ../../source/configparser/index.rst:535
msgid "Option Search Path"
msgstr ""

#: ../../source/configparser/index.rst:537
msgid "``ConfigParser`` uses a multi-step search process when looking for an option."
msgstr ""

#: ../../source/configparser/index.rst:540
msgid "Before starting the option search, the section name is tested.  If the section does not exist, and the name is not the special value ``DEFAULT``, then ``NoSectionError`` is raised."
msgstr ""

#: ../../source/configparser/index.rst:544
msgid "If the option name appears in the ``vars`` dictionary passed to ``get()``, the value from ``vars`` is returned."
msgstr ""

#: ../../source/configparser/index.rst:546
msgid "If the option name appears in the specified section, the value from that section is returned."
msgstr ""

#: ../../source/configparser/index.rst:548
msgid "If the option name appears in the ``DEFAULT`` section, that value is returned."
msgstr ""

#: ../../source/configparser/index.rst:550
msgid "If the option name appears in the ``defaults`` dictionary passed to the constructor, that value is returned."
msgstr ""

#: ../../source/configparser/index.rst:553
msgid "If the name is not found in any of those locations, ``NoOptionError`` is raised."
msgstr ""

#: ../../source/configparser/index.rst:556
msgid "The search path behavior can be demonstrated using this configuration file."
msgstr ""

#: ../../source/configparser/index.rst:561
msgid "This test program includes default settings for options not specified in the configuration file, and overrides some values that are defined in the file."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_defaults.py"
msgstr ""

#: ../../source/configparser/index.rst:569
msgid "The output shows the origin for the value of each option and illustrates the way defaults from different sources override existing values."
msgstr ""

#: ../../source/configparser/index.rst:613
msgid "Combining Values with Interpolation"
msgstr ""

#: ../../source/configparser/index.rst:615
msgid "``ConfigParser`` provides a feature called *interpolation* that can be used to combine values together.  Values containing standard Python format strings trigger the interpolation feature when they are retrieved.  Options named within the value being fetched are replaced with their values in turn, until no more substitution is necessary."
msgstr ""

#: ../../source/configparser/index.rst:622
msgid "The URL examples from earlier in this section can be rewritten to use interpolation to make it easier to change only part of the value.  For example, this configuration file separates the protocol, hostname, and port from the URL as separate options."
msgstr ""

#: ../../source/configparser/index.rst:629
msgid "Interpolation is performed by default each time ``get()`` is called. Pass a true value in the ``raw`` argument to retrieve the original value, without interpolation."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_interpolation.py"
msgstr ""

#: ../../source/configparser/index.rst:637
msgid "Because the value is computed by ``get()``, changing one of the settings being used by the ``url`` value changes the return value."
msgstr ""

#: ../../source/configparser/index.rst:655
msgid "Using Defaults"
msgstr ""

#: ../../source/configparser/index.rst:657
msgid "Values for interpolation do not need to appear in the same section as the original option.  Defaults can be mixed with override values."
msgstr ""

#: ../../source/configparser/index.rst:662
msgid "With this configuration, the value for ``url`` comes from the ``DEFAULT`` section, and the substitution starts by looking in ``bug_tracker`` and falling back to ``DEFAULT`` for pieces not found."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_interpolation_defaults.py"
msgstr ""

#: ../../source/configparser/index.rst:670
msgid "The ``hostname`` and ``port`` values come from the ``bug_tracker`` section, but the ``protocol`` comes from ``DEFAULT``."
msgstr ""

#: ../../source/configparser/index.rst:686
msgid "Substitution Errors"
msgstr ""

#: ../../source/configparser/index.rst:688
msgid "Substitution stops after :attr:`MAX_INTERPOLATION_DEPTH` steps to avoid problems due to recursive references."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_interpolation_recursion.py"
msgstr ""

#: ../../source/configparser/index.rst:695
msgid "An ``InterpolationDepthError`` exception is raised if there are too many substitution steps."
msgstr ""

#: ../../source/configparser/index.rst:712
msgid "Missing values result in an ``InterpolationMissingOptionError`` exception."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_interpolation_error.py"
msgstr ""

#: ../../source/configparser/index.rst:719
msgid "Since no ``server`` value is defined, the ``url`` cannot be constructed."
msgstr ""

#: ../../source/configparser/index.rst:738
msgid "Escaping Special Characters"
msgstr ""

#: ../../source/configparser/index.rst:740
msgid "Since ``%`` starts the interpolation instructions, a literal ``%`` in a value must be escaped as ``%%``."
msgstr ""

#: ../../source/configparser/index.rst:745
msgid "Reading the value does not require any special consideration."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_escape.py"
msgstr ""

#: ../../source/configparser/index.rst:751
msgid "When the value is read, the ``%%`` is converted to ``%`` automatically."
msgstr ""

#: ../../source/configparser/index.rst:767
msgid "Extended Interpolation"
msgstr ""

#: ../../source/configparser/index.rst:769
msgid "``ConfigParser`` supports alternate interpolation implementations Passing an object that supports the API defined by ``Interpolation`` to the ``interpolation`` parameter.  For example, using ``ExtendedInterpolation`` instead of the default ``BasicInterpolation`` enables a different syntax using ``${}`` to indicate variables."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_extendedinterpolation.py"
msgstr ""

#: ../../source/configparser/index.rst:780
msgid "Extended interpolation supports accessing values from other sections of the configuration file by prefixing the variable name with the section name and a colon (``:``)."
msgstr ""

#: ../../source/configparser/index.rst:787
msgid "Referring to values in other sections of the file makes it possible to share a hierarchy of values, without placing all defaults in the ``DEFAULTS`` section."
msgstr ""

#: ../../source/configparser/index.rst:807
msgid "Disabling Interpolation"
msgstr ""

#: ../../source/configparser/index.rst:809
msgid "To disable interpolation, pass ``None`` instead of an ``Interpolation`` object."
msgstr ""

#: ../../source/configparser/index.rst:0
msgid "configparser_nointerpolation.py"
msgstr ""

#: ../../source/configparser/index.rst:816
msgid "This enables any syntax that might have been processed by the interpolation object to be safely ignored."
msgstr ""

#: ../../source/configparser/index.rst:835
msgid ":pydoc:`configparser`"
msgstr ""

#: ../../source/configparser/index.rst:837
msgid "`ConfigObj <http://configobj.readthedocs.org/en/latest/configobj.html>`__ -- An advanced configuration file parser with support for features like content validation."
msgstr ""

#: ../../source/configparser/index.rst:842
msgid ":ref:`Python 2 to 3 porting notes for configparser <porting-configparser>`"
msgstr ""

