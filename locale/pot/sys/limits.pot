# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sys/limits.rst:5
msgid "Memory Management and Limits"
msgstr ""

#: ../../source/sys/limits.rst:7
msgid "``sys`` includes several functions for understanding and controlling memory usage."
msgstr ""

#: ../../source/sys/limits.rst:11
msgid "Reference Counts"
msgstr ""

#: ../../source/sys/limits.rst:13
msgid "The primary implementation of Python (CPython) uses *reference counting* and *garbage collection* for automatic memory management. An object is automatically marked to be collected when its reference count drops to zero.  To examine the reference count of an existing object, use ``getrefcount()``."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_getrefcount.py"
msgstr ""

#: ../../source/sys/limits.rst:23
msgid "The value reported is actually one higher than expected because there is a temporary reference to the object held by ``getrefcount()`` itself."
msgstr ""

#: ../../source/sys/limits.rst:43
msgid ":mod:`gc` -- Control the garbage collector via the functions exposed in ``gc``."
msgstr ""

#: ../../source/sys/limits.rst:47
msgid "Object Size"
msgstr ""

#: ../../source/sys/limits.rst:49
msgid "Knowing how many references an object has may help find cycles or a memory leak, but it is not enough to determine what objects are consuming the *most* memory.  That requires knowledge about how big objects are."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_getsizeof.py"
msgstr ""

#: ../../source/sys/limits.rst:58
msgid "``getsizeof()`` reports the size of an object in bytes."
msgstr ""

#: ../../source/sys/limits.rst:81
msgid "The reported size for a custom class does not include the size of the attribute values."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_getsizeof_object.py"
msgstr ""

#: ../../source/sys/limits.rst:88
msgid "This can give a false impression of the amount of memory being consumed."
msgstr ""

#: ../../source/sys/limits.rst:104
msgid "For a more complete estimate of the space used by a class, provide a ``__sizeof__()`` method to compute the value by aggregating the sizes of attributes of an object."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_getsizeof_custom.py"
msgstr ""

#: ../../source/sys/limits.rst:112
msgid "This version adds the base size of the object to the sizes of all of the attributes stored in the internal ``__dict__``."
msgstr ""

#: ../../source/sys/limits.rst:128
msgid "Recursion"
msgstr ""

#: ../../source/sys/limits.rst:130
msgid "Allowing infinite recursion in a Python application may introduce a stack overflow in the interpreter itself, leading to a crash. To eliminate this situation, the interpreter provides a way to control the maximum recursion depth using ``setrecursionlimit()`` and ``getrecursionlimit()``."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_recursionlimit.py"
msgstr ""

#: ../../source/sys/limits.rst:140
msgid "Once the stack size reaches the recursion limit, the interpreter raises a ``RuntimeError`` exception so the program has an opportunity to handle the situation."
msgstr ""

#: ../../source/sys/limits.rst:170
msgid "Maximum Values"
msgstr ""

#: ../../source/sys/limits.rst:172
msgid "Along with the runtime configurable values, ``sys`` includes variables defining the maximum values for types that vary from system to system."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_maximums.py"
msgstr ""

#: ../../source/sys/limits.rst:180
msgid "``maxsize`` is the maximum size of a list, dictionary, string, or other data structure dictated by the C interpreter's size type. ``maxunicode`` is the largest integer Unicode point supported by the interpreter as currently configured."
msgstr ""

#: ../../source/sys/limits.rst:199
msgid "Floating Point Values"
msgstr ""

#: ../../source/sys/limits.rst:201
msgid "The structure ``float_info`` contains information about the floating-point type representation used by the interpreter, based on the underlying system's :c:type:`float` implementation."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_float_info.py"
msgstr ""

#: ../../source/sys/limits.rst:209
msgid "These values depend on the compiler and underlying system.  These examples were produced on OS X 10.9.5 on an Intel Core i7."
msgstr ""

#: ../../source/sys/limits.rst:242
msgid "The ``float.h`` C header file for the local compiler contains more details about these settings."
msgstr ""

#: ../../source/sys/limits.rst:246
msgid "Integer Values"
msgstr ""

#: ../../source/sys/limits.rst:248
msgid "The structure ``int_info`` holds information about the internal representation of integers used by the interpreter."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_int_info.py"
msgstr ""

#: ../../source/sys/limits.rst:255
msgid "These examples were produced on OS X 10.9.5 on an Intel Core i7."
msgstr ""

#: ../../source/sys/limits.rst:270
msgid "The C type used to store integers internally is determined when the interpreter is built. 64-bit architectures automatically use 30-bit integers by default, and they can be enabled for 32-bit architectures with the configuration flag ``--enable-big-digits``."
msgstr ""

#: ../../source/sys/limits.rst:277
msgid "`Build and C API Changes <https://docs.python.org/3.1/whatsnew/3.1.html#build-and-c-api-changes>`__ from *What's New in Python 3.1*"
msgstr ""

#: ../../source/sys/limits.rst:283
msgid "Byte Ordering"
msgstr ""

#: ../../source/sys/limits.rst:285
msgid "``byteorder`` is set to the native byte order."
msgstr ""

#: ../../source/sys/limits.rst:0
msgid "sys_byteorder.py"
msgstr ""

#: ../../source/sys/limits.rst:291
msgid "The value is either ``big`` for big-endian or ``little`` for little-endian."
msgstr ""

#: ../../source/sys/limits.rst:308
msgid "`Wikipedia: Endianness <https://en.wikipedia.org/wiki/Byte_order>`__ -- Description of big and little endian memory systems."
msgstr ""

#: ../../source/sys/limits.rst:312
msgid ":mod:`array` and :mod:`struct` -- Other modules that depend on the byte order of data."
msgstr ""

#: ../../source/sys/limits.rst:315
msgid "``float.h`` -- The C header file for the local compiler contains"
msgstr ""

#: ../../source/sys/limits.rst:316
msgid "more details about these settings."
msgstr ""

