# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sys/runtime.rst:5
msgid "Runtime Environment"
msgstr ""

#: ../../source/sys/runtime.rst:7
msgid "``sys`` provides low-level APIs for interacting with the system outside of an application, by accepting command line arguments, accessing user input, and passing messages and status values to the user."
msgstr ""

#: ../../source/sys/runtime.rst:15
msgid "Command Line Arguments"
msgstr ""

#: ../../source/sys/runtime.rst:17
msgid "The arguments captured by the interpreter are processed there and not passed to the program being run.  Any remaining options and arguments, including the name of the script itself, are saved to ``sys.argv`` in case the program does need to use them."
msgstr ""

#: ../../source/sys/runtime.rst:0
msgid "sys_argv.py"
msgstr ""

#: ../../source/sys/runtime.rst:26
msgid "In the third example, the ``-u`` option is understood by the interpreter, and is not passed to the program being run."
msgstr ""

#: ../../source/sys/runtime.rst:53
msgid ":mod:`argparse` -- Module for parsing command line arguments."
msgstr ""

#: ../../source/sys/runtime.rst:58
msgid "Input and Output Streams"
msgstr ""

#: ../../source/sys/runtime.rst:60
msgid "Following the Unix paradigm, Python programs can access three file descriptors by default."
msgstr ""

#: ../../source/sys/runtime.rst:0
msgid "sys_stdio.py"
msgstr ""

#: ../../source/sys/runtime.rst:67
msgid "``stdin`` is the standard way to read input, usually from a console but also from other programs via a pipeline.  ``stdout`` is the standard way to write output for a user (to the console) or to be sent to the next program in a pipeline.  ``stderr`` is intended for use with warning or error messages."
msgstr ""

#: ../../source/sys/runtime.rst:105
msgid ":mod:`subprocess` and :mod:`pipes` -- Both subprocess and pipes have features for pipelining programs together."
msgstr ""

#: ../../source/sys/runtime.rst:109
msgid "Returning Status"
msgstr ""

#: ../../source/sys/runtime.rst:111
msgid "To return an exit code from a program, pass an integer value to ``sys.exit()``."
msgstr ""

#: ../../source/sys/runtime.rst:0
msgid "sys_exit.py"
msgstr ""

#: ../../source/sys/runtime.rst:118
msgid "A nonzero value means the program exited with an error."
msgstr ""

