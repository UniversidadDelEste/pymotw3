# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sys/interpreter.rst:5
msgid "Interpreter Settings"
msgstr ""

#: ../../source/sys/interpreter.rst:7
msgid "``sys`` contains attributes and functions for accessing compile-time or runtime configuration settings for the interpreter."
msgstr ""

#: ../../source/sys/interpreter.rst:13
msgid "Build-time Version Information"
msgstr ""

#: ../../source/sys/interpreter.rst:15
msgid "The version used to build the C interpreter is available in a few forms.  ``sys.version`` is a human-readable string that usually includes the full version number as well as information about the build date, compiler, and platform.  ``sys.hexversion`` is easier to use for checking the interpreter version since it is a simple integer.  When formatted using ``hex()``, it is clear that parts of ``sys.hexversion`` come from the version information also visible in the more readable ``sys.version_info`` (a five-part namedtuple representing just the version number). The separate C API version used by the current interpreter is saved in ``sys.api_version``."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_version_values.py"
msgstr ""

#: ../../source/sys/interpreter.rst:30
msgid "All of the values depend on the actual interpreter used to run the sample program."
msgstr ""

#: ../../source/sys/interpreter.rst:52
msgid "The operating system platform used to build the interpreter is saved as ``sys.platform``."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_platform.py"
msgstr ""

#: ../../source/sys/interpreter.rst:59
msgid "For most Unix systems, the value comes from combining the output of ``uname -s`` with the first part of the version in ``uname -r``. For other operating systems there is a hard-coded table of values."
msgstr ""

#: ../../source/sys/interpreter.rst:77
msgid "`Platform values <https://docs.python.org/3/library/sys.html#sys.platform>`_ -- Hard-coded values of ``sys.platform`` for systems without ``uname``."
msgstr ""

#: ../../source/sys/interpreter.rst:83
msgid "Interpreter Implementation"
msgstr ""

#: ../../source/sys/interpreter.rst:85
msgid "The CPython interpreter is one of several implementations of the Python language.  ``sys.implementation`` is provided to detect the current implementation for libraries that need to work around any differences in interpreters."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_implementation.py"
msgstr ""

#: ../../source/sys/interpreter.rst:94
msgid "``sys.implementation.version`` is the same as ``sys.version_info`` for CPython, but will be different for other interpreters."
msgstr ""

#: ../../source/sys/interpreter.rst:115
msgid ":pep:`421` -- Adding ``sys.implementation``"
msgstr ""

#: ../../source/sys/interpreter.rst:118
msgid "Command Line Options"
msgstr ""

#: ../../source/sys/interpreter.rst:120
msgid "The CPython interpreter accepts several command-line options to control its behavior, listed in :table:`CPython Command Line Option Flags`."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "CPython Command Line Option Flags"
msgstr ""

#: ../../source/sys/interpreter.rst:128
msgid "Option"
msgstr ""

#: ../../source/sys/interpreter.rst:129
msgid "Meaning"
msgstr ""

#: ../../source/sys/interpreter.rst:130
msgid "``-B``"
msgstr ""

#: ../../source/sys/interpreter.rst:131
msgid "do not write .py[co] files on import"
msgstr ""

#: ../../source/sys/interpreter.rst:132
msgid "``-b``"
msgstr ""

#: ../../source/sys/interpreter.rst:133
msgid "issue warnings about converting bytes to string without decoding properly and comparing bytes with strings"
msgstr ""

#: ../../source/sys/interpreter.rst:135
msgid "``-bb``"
msgstr ""

#: ../../source/sys/interpreter.rst:136
msgid "convert bytes warnings to errors"
msgstr ""

#: ../../source/sys/interpreter.rst:137
msgid "``-d``"
msgstr ""

#: ../../source/sys/interpreter.rst:138
msgid "debug output from parser"
msgstr ""

#: ../../source/sys/interpreter.rst:139
msgid "``-E``"
msgstr ""

#: ../../source/sys/interpreter.rst:140
msgid "ignore PYTHON* environment variables (such as PYTHONPATH)"
msgstr ""

#: ../../source/sys/interpreter.rst:141
msgid "``-i``"
msgstr ""

#: ../../source/sys/interpreter.rst:142
msgid "inspect interactively after running script"
msgstr ""

#: ../../source/sys/interpreter.rst:143
msgid "``-O``"
msgstr ""

#: ../../source/sys/interpreter.rst:144
msgid "optimize generated bytecode slightly"
msgstr ""

#: ../../source/sys/interpreter.rst:145
msgid "``-OO``"
msgstr ""

#: ../../source/sys/interpreter.rst:146
msgid "remove doc-strings in addition to the -O optimizations"
msgstr ""

#: ../../source/sys/interpreter.rst:147
msgid "``-s``"
msgstr ""

#: ../../source/sys/interpreter.rst:148
msgid "do not add user site directory to sys.path"
msgstr ""

#: ../../source/sys/interpreter.rst:149
msgid "``-S``"
msgstr ""

#: ../../source/sys/interpreter.rst:150
msgid "do not run 'import site' on initialization"
msgstr ""

#: ../../source/sys/interpreter.rst:151
msgid "``-t``"
msgstr ""

#: ../../source/sys/interpreter.rst:152
msgid "issue warnings about inconsistent tab usage"
msgstr ""

#: ../../source/sys/interpreter.rst:153
msgid "``-tt``"
msgstr ""

#: ../../source/sys/interpreter.rst:154
msgid "issue errors for inconsistent tab usage"
msgstr ""

#: ../../source/sys/interpreter.rst:155
msgid "``-v``"
msgstr ""

#: ../../source/sys/interpreter.rst:156
msgid "verbose"
msgstr ""

#: ../../source/sys/interpreter.rst:158
msgid "Some of these are available for programs to check through ``sys.flags``."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_flags.py"
msgstr ""

#: ../../source/sys/interpreter.rst:165
msgid "Experiment with ``sys_flags.py`` to learn how the command line options map to the flags settings."
msgstr ""

#: ../../source/sys/interpreter.rst:186
msgid "Unicode Defaults"
msgstr ""

#: ../../source/sys/interpreter.rst:188
msgid "To get the name of the default Unicode encoding the interpreter is using, call ``getdefaultencoding()``.  The value is set during start-up, and cannot be changed."
msgstr ""

#: ../../source/sys/interpreter.rst:192
msgid "The internal encoding default and the file system encoding may be different for some operating systems, so there is a separate way to retrieve the file system setting.  ``getfilesystemencoding()`` returns an OS-specific (*not* file system-specific) value."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_unicode.py"
msgstr ""

#: ../../source/sys/interpreter.rst:201
msgid "Rather than relying on the global default encoding, most Unicode experts recommend making an application explicitly Unicode-aware. This provides two benefits: different Unicode encodings for different data sources can be handled more cleanly, and the number of assumptions about encodings in the application code is reduced."
msgstr ""

#: ../../source/sys/interpreter.rst:222
msgid "Interactive Prompts"
msgstr ""

#: ../../source/sys/interpreter.rst:224
msgid "The interactive interpreter uses two separate prompts for indicating the default input level (``ps1``) and the \"continuation\" of a multi-line statement (``ps2``).  The values are only used by the interactive interpreter."
msgstr ""

#: ../../source/sys/interpreter.rst:238
msgid "Either or both prompt can be changed to a different string."
msgstr ""

#: ../../source/sys/interpreter.rst:252
msgid "Alternately, any object that can be converted to a string (via ``__str__``) can be used for the prompt."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_ps1.py"
msgstr ""

#: ../../source/sys/interpreter.rst:259
msgid "The ``LineCounter`` keeps track of how many times it has been used, so the number in the prompt increases each time."
msgstr ""

#: ../../source/sys/interpreter.rst:277
msgid "Display Hook"
msgstr ""

#: ../../source/sys/interpreter.rst:279
msgid "``sys.displayhook`` is invoked by the interactive interpreter each time the user enters an expression.  The result of evaluating the expression is passed as the only argument to the function."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_displayhook.py"
msgstr ""

#: ../../source/sys/interpreter.rst:287
msgid "The default value (saved in ``sys.__displayhook__``) prints the result to stdout and saves it in ``_`` for easy reference later."
msgstr ""

#: ../../source/sys/interpreter.rst:329
msgid "Install Location"
msgstr ""

#: ../../source/sys/interpreter.rst:331
msgid "The path to the actual interpreter program is available in ``sys.executable`` on all systems for which having a path to the interpreter makes sense.  This can be useful for ensuring that the correct interpreter is being used, and also gives clues about paths that might be set based on the interpreter location."
msgstr ""

#: ../../source/sys/interpreter.rst:337
msgid "``sys.prefix`` refers to the parent directory of the interpreter installation.  It usually includes ``bin`` and ``lib`` directories for executables and installed modules, respectively."
msgstr ""

#: ../../source/sys/interpreter.rst:0
msgid "sys_locations.py"
msgstr ""

#: ../../source/sys/interpreter.rst:345
msgid "This example output was produced on a Mac running a framework build installed from python.org."
msgstr ""

