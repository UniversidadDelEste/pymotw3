# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sys/imports.rst:5
msgid "Modules and Imports"
msgstr ""

#: ../../source/sys/imports.rst:7
msgid "Most Python programs end up as a combination of several modules with a main application importing them. Whether using the features of the standard library or organizing custom code in separate files to make it easier to maintain, understanding and managing the dependencies for a program is an important aspect of development. ``sys`` includes information about the modules available to an application, either as built-ins or after being imported.  It also defines hooks for overriding the standard import behavior for special cases."
msgstr ""

#: ../../source/sys/imports.rst:19
msgid "Imported Modules"
msgstr ""

#: ../../source/sys/imports.rst:21
msgid "``sys.modules`` is a dictionary mapping the names of imported modules to the module object holding the code."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_modules.py"
msgstr ""

#: ../../source/sys/imports.rst:28
msgid "The contents of ``sys.modules`` change as new modules are imported."
msgstr ""

#: ../../source/sys/imports.rst:51
msgid "Built-in Modules"
msgstr ""

#: ../../source/sys/imports.rst:53
msgid "The Python interpreter can be compiled with some C modules built right in, so they do not need to be distributed as separate shared libraries. These modules do not appear in the list of imported modules managed in ``sys.modules`` because they were not technically imported. The only way to find the available built-in modules is through ``sys.builtin_module_names``."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_builtins.py"
msgstr ""

#: ../../source/sys/imports.rst:64
msgid "The output of this script will vary, especially if run with a custom-built version of the interpreter.  This output was created using a copy of the interpreter installed from the standard python.org installer for OS X."
msgstr ""

#: ../../source/sys/imports.rst:88
msgid "`Build Instructions <https://hg.python.org/cpython/file/tip/README>`_ -- Instructions for building Python, from the README distributed with the source."
msgstr ""

#: ../../source/sys/imports.rst:94
msgid "Import Path"
msgstr ""

#: ../../source/sys/imports.rst:96
msgid "The search path for modules is managed as a Python list saved in ``sys.path``. The default contents of the path include the directory of the script used to start the application and the current working directory."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_path_show.py"
msgstr ""

#: ../../source/sys/imports.rst:105
msgid "The first directory in the search path is the home for the sample script itself. That is followed by a series of platform-specific paths where compiled extension modules (written in C) might be installed, and then the global ``site-packages`` directory is listed last."
msgstr ""

#: ../../source/sys/imports.rst:122
msgid "The import search-path list can be modified before starting the interpreter by setting the shell variable ``PYTHONPATH`` to a colon-separated list of directories."
msgstr ""

#: ../../source/sys/imports.rst:140
msgid "A program can also modify its path by adding elements to ``sys.path`` directly."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_path_modify.py"
msgstr ""

#: ../../source/sys/imports.rst:147
msgid "Reloading an imported module re-imports the file, and uses the same ``module`` object to hold the results.  Changing the path between the initial import and the call to ``reload()`` means a different module may be loaded the second time."
msgstr ""

#: ../../source/sys/imports.rst:169
msgid "Custom Importers"
msgstr ""

#: ../../source/sys/imports.rst:171
msgid "Modifying the search path lets a programmer control how standard Python modules are found. But, what if a program needs to import code from somewhere other than the usual ``.py`` or ``.pyc`` files on the file system? :pep:`302` solves this problem by introducing the idea of *import hooks*, which can trap an attempt to find a module on the search path and take alternative measures to load the code from somewhere else or apply pre-processing to it."
msgstr ""

#: ../../source/sys/imports.rst:179
msgid "Custom importers are implemented in two separate phases. The *finder* is responsible for locating a module and providing a *loader* to manage the actual import. Custom module finders are added by appending a factory to the ``sys.path_hooks`` list. On import, each part of the path is given to a finder until one claims support (by not raising ``ImportError``). That finder is then responsible for searching data storage represented by its path entry for named modules."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_path_hooks_noisy.py"
msgstr ""

#: ../../source/sys/imports.rst:192
msgid "This example illustrates how the finders are instantiated and queried. The ``NoisyImportFinder`` raises ``ImportError`` when instantiated with a path entry that does not match its special trigger value, which is obviously not a real path on the file system. This test prevents the ``NoisyImportFinder`` from breaking imports of real modules."
msgstr ""

#: ../../source/sys/imports.rst:221
msgid "Importing from a Shelve"
msgstr ""

#: ../../source/sys/imports.rst:223
msgid "When the finder locates a module, it is responsible for returning a *loader* capable of importing that module.  This example illustrates a custom importer that saves its module contents in a database created by :mod:`shelve`."
msgstr ""

#: ../../source/sys/imports.rst:228
msgid "First, a script is used to populate the shelf with a package containing a sub-module and sub-package."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_create.py"
msgstr ""

#: ../../source/sys/imports.rst:235
msgid "A real packaging script would read the contents from the file system, but using hard-coded values is sufficient for a simple example like this."
msgstr ""

#: ../../source/sys/imports.rst:257
msgid "The custom importer needs to provide finder and loader classes that know how to look in a shelf for the source of a module or package."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer.py"
msgstr ""

#: ../../source/sys/imports.rst:264
msgid "Now ``ShelveFinder`` and ``ShelveLoader`` can be used to import code from a shelf. For example, importing the :mod:`package` just created:"
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_package.py"
msgstr ""

#: ../../source/sys/imports.rst:272
msgid "The shelf is added to the import path the first time an import occurs after the path is modified. The finder recognizes the shelf and returns a loader, which is used for all imports from that shelf. The initial package-level import creates a new module object and then uses ``exec`` to run the source loaded from the shelf. It uses the new module as the namespace so that names defined in the source are preserved as module-level attributes."
msgstr ""

#: ../../source/sys/imports.rst:318
msgid "Custom Package Importing"
msgstr ""

#: ../../source/sys/imports.rst:320
msgid "Loading other modules and sub-packages proceeds in the same way."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_module.py"
msgstr ""

#: ../../source/sys/imports.rst:326
msgid "The finder receives the entire dotted name of the module to load, and returns a ``ShelveLoader`` configured to load modules from the path entry pointing to the shelf file.  The fully qualified module name is passed to the loader's :meth:`load_module` method, which constructs and returns a ``module`` instance."
msgstr ""

#: ../../source/sys/imports.rst:407
msgid "Reloading Modules in a Custom Importer"
msgstr ""

#: ../../source/sys/imports.rst:409
msgid "Reloading a module is handled slightly differently. Instead of creating a new module object, the existing object is re-used."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_reload.py"
msgstr ""

#: ../../source/sys/imports.rst:416
msgid "By re-using the same object, existing references to the module are preserved even if class or function definitions are modified by the reload."
msgstr ""

#: ../../source/sys/imports.rst:456
msgid "Handling Import Errors"
msgstr ""

#: ../../source/sys/imports.rst:458
msgid "When a module cannot be located by any finder, ``ImportError`` is raised by the main import code."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_missing.py"
msgstr ""

#: ../../source/sys/imports.rst:465
msgid "Other errors during the import are propagated."
msgstr ""

#: ../../source/sys/imports.rst:496
msgid "Package Data"
msgstr ""

#: ../../source/sys/imports.rst:498
msgid "In addition to defining the API for loading executable Python code, PEP 302 defines an optional API for retrieving package data intended for distributing data files, documentation, and other non-code resources used by a package. By implementing ``get_data()``, a loader can allow calling applications to support retrieval of data associated with the package without considering how the package is actually installed (especially without assuming that the package is stored as files on a file system)."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_shelve_importer_get_data.py"
msgstr ""

#: ../../source/sys/imports.rst:511
msgid "``get_data()`` takes a path based on the module or package that owns the data, and returns the contents of the resource \"file\" as a byte string, or raises ``IOError`` if the resource does not exist."
msgstr ""

#: ../../source/sys/imports.rst:554
msgid ":mod:`pkgutil` -- Includes ``get_data()`` for retrieving data from a package."
msgstr ""

#: ../../source/sys/imports.rst:558
msgid "Importer Cache"
msgstr ""

#: ../../source/sys/imports.rst:560
msgid "Searching through all of the hooks each time a module is imported can become expensive. To save time, ``sys.path_importer_cache`` is maintained as a mapping between a path entry and the loader that can use the value to find modules."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_path_importer_cache.py"
msgstr ""

#: ../../source/sys/imports.rst:569
msgid "A ``FileFinder`` is used for path locations found on the file system. Locations on the path not supported by any finder are associated with a ``None``, since they cannot be used to import modules. The output below has been truncated due to formatting constraints."
msgstr ""

#: ../../source/sys/imports.rst:613
msgid "Meta Path"
msgstr ""

#: ../../source/sys/imports.rst:615
msgid "The ``sys.meta_path`` further extends the sources of potential imports by allowing a finder to be searched *before* the regular ``sys.path`` is scanned. The API for a finder on the meta-path is the same as for a regular path. The difference is that the metafinder is not limited to a single entry in ``sys.path`` -- it can search anywhere at all."
msgstr ""

#: ../../source/sys/imports.rst:0
msgid "sys_meta_path.py"
msgstr ""

#: ../../source/sys/imports.rst:626
msgid "Each finder on the meta-path is interrogated before ``sys.path`` is searched, so there is always an opportunity to have a central importer load modules without explicitly modifying ``sys.path``. Once the module is \"found,\" the loader API works in the same way as for regular loaders (although this example is truncated for simplicity)."
msgstr ""

#: ../../source/sys/imports.rst:658
msgid ":mod:`importlib` -- Base classes and other tools for creating custom importers."
msgstr ""

#: ../../source/sys/imports.rst:661
msgid ":mod:`zipimport` -- Implements importing Python modules from inside ZIP archives."
msgstr ""

#: ../../source/sys/imports.rst:664
msgid "`The Internal Structure of Python Eggs <http://setuptools.readthedocs.io/en/latest/formats.html?highlight=egg>`_ -- setuptools documentation for the egg format"
msgstr ""

#: ../../source/sys/imports.rst:668
msgid "`Wheel <http://wheel.readthedocs.org/en/latest/>`_ -- Documentation for ``wheel`` archive format for installable Python code."
msgstr ""

#: ../../source/sys/imports.rst:672
msgid ":pep:`302` -- Import Hooks"
msgstr ""

#: ../../source/sys/imports.rst:674
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ""

#: ../../source/sys/imports.rst:676
msgid ":pep:`427` -- The Wheel Binary Package Format 1.0"
msgstr ""

#: ../../source/sys/imports.rst:678
msgid "`Import this, that, and the other thing: custom importers <http://pyvideo.org/pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html>`_ -- Brett Cannon's PyCon 2010 presentation."
msgstr ""

