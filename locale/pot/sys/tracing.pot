# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sys/tracing.rst:5
msgid "Tracing a Program As It Runs"
msgstr ""

#: ../../source/sys/tracing.rst:7
msgid "There are two ways to inject code to watch a program run: *tracing* and *profiling*.  They are similar, but intended for different purposes and so have different constraints.  The easiest, but least efficient, way to monitor a program is through a *trace hook*, which can be used to write a debugger, monitor code coverage, or achieve many other purposes."
msgstr ""

#: ../../source/sys/tracing.rst:14
msgid "The trace hook is modified by passing a callback function to ``sys.settrace()``.  The callback will receive three arguments: the stack frame from the code being run, a string naming the type of notification, and an event-specific argument value.  :table:`Event Hooks for settrace()` lists the seven event types for different levels of information that occur as a program is being executed."
msgstr ""

#: ../../source/sys/tracing.rst:0
msgid "Event Hooks for settrace()"
msgstr ""

#: ../../source/sys/tracing.rst:25
msgid "Event"
msgstr ""

#: ../../source/sys/tracing.rst:26
msgid "When it occurs"
msgstr ""

#: ../../source/sys/tracing.rst:27
msgid "Argument value"
msgstr ""

#: ../../source/sys/tracing.rst:28
msgid "call"
msgstr ""

#: ../../source/sys/tracing.rst:29
#: ../../source/sys/tracing.rst:32
msgid "Before a line is executed"
msgstr ""

#: ../../source/sys/tracing.rst:30
#: ../../source/sys/tracing.rst:33
#: ../../source/sys/tracing.rst:45
#: ../../source/sys/tracing.rst:48
msgid "``None``"
msgstr ""

#: ../../source/sys/tracing.rst:31
msgid "line"
msgstr ""

#: ../../source/sys/tracing.rst:34
msgid "return"
msgstr ""

#: ../../source/sys/tracing.rst:35
msgid "Before a function returns"
msgstr ""

#: ../../source/sys/tracing.rst:36
msgid "The value being returned"
msgstr ""

#: ../../source/sys/tracing.rst:37
msgid "exception"
msgstr ""

#: ../../source/sys/tracing.rst:38
msgid "After an exception occurs"
msgstr ""

#: ../../source/sys/tracing.rst:39
msgid "The (exception, value, traceback) tuple"
msgstr ""

#: ../../source/sys/tracing.rst:40
msgid "c_call"
msgstr ""

#: ../../source/sys/tracing.rst:41
msgid "Before a C function is called"
msgstr ""

#: ../../source/sys/tracing.rst:42
msgid "The C function object"
msgstr ""

#: ../../source/sys/tracing.rst:43
msgid "c_return"
msgstr ""

#: ../../source/sys/tracing.rst:44
msgid "After a C function returns"
msgstr ""

#: ../../source/sys/tracing.rst:46
msgid "c_exception"
msgstr ""

#: ../../source/sys/tracing.rst:47
msgid "After a C function throws an error"
msgstr ""

#: ../../source/sys/tracing.rst:51
msgid "Tracing Function Calls"
msgstr ""

#: ../../source/sys/tracing.rst:53
msgid "A ``call`` event is generated before every function call.  The frame passed to the callback can be used to find out which function is being called and from where."
msgstr ""

#: ../../source/sys/tracing.rst:0
msgid "sys_settrace_call.py"
msgstr ""

#: ../../source/sys/tracing.rst:63
msgid "This example ignores calls to ``write()``, as used by ``print`` to write to ``sys.stdout``."
msgstr ""

#: ../../source/sys/tracing.rst:88
msgid "Tracing Inside Functions"
msgstr ""

#: ../../source/sys/tracing.rst:90
msgid "The trace hook can return a new hook to be used inside the new scope (the *local* trace function). It is possible, for instance, to control tracing to only run line-by-line within certain modules or functions."
msgstr ""

#: ../../source/sys/tracing.rst:0
msgid "sys_settrace_line.py"
msgstr ""

#: ../../source/sys/tracing.rst:100
msgid "In this example, the list of functions is kept in the variable :py``to_be_traced``, so when ``trace_calls()`` runs it can return ``trace_lines()`` to enable tracing inside of ``b()``."
msgstr ""

#: ../../source/sys/tracing.rst:127
msgid "Watching the Stack"
msgstr ""

#: ../../source/sys/tracing.rst:129
msgid "Another useful way to use the hooks is to keep up with which functions are being called, and what their return values are.  To monitor return values, watch for the ``return`` event."
msgstr ""

#: ../../source/sys/tracing.rst:0
msgid "sys_settrace_return.py"
msgstr ""

#: ../../source/sys/tracing.rst:139
msgid "The local trace function is used for watching return events, so ``trace_calls_and_returns()`` needs to return a reference to itself when a function is called, so the return value can be monitored."
msgstr ""

#: ../../source/sys/tracing.rst:162
msgid "Exception Propagation"
msgstr ""

#: ../../source/sys/tracing.rst:164
msgid "Exceptions can be monitored by looking for the ``exception`` event in a local trace function.  When an exception occurs, the trace hook is called with a tuple containing the type of exception, the exception object, and a traceback object."
msgstr ""

#: ../../source/sys/tracing.rst:0
msgid "sys_settrace_exception.py"
msgstr ""

#: ../../source/sys/tracing.rst:175
msgid "Take care to limit where the local function is applied because some of the internals of formatting error messages generate, and ignore, their own exceptions.  Every exception is seen by the trace hook, whether the caller catches and ignores it or not."
msgstr ""

#: ../../source/sys/tracing.rst:208
msgid ":mod:`profile` -- The ``profile`` module documentation shows how to use a ready-made profiler."
msgstr ""

#: ../../source/sys/tracing.rst:211
msgid ":mod:`trace` -- The ``trace`` module implements several code analysis features."
msgstr ""

#: ../../source/sys/tracing.rst:214
msgid "`Types and Members <https://docs.python.org/3/library/inspect.html#types-and-members>`_ -- The descriptions of frame and code objects and their attributes."
msgstr ""

#: ../../source/sys/tracing.rst:219
msgid "`Tracing python code <http://www.dalkescientific.com/writings/diary/archive/2005/04/20/tracing_python_code.html>`_ -- Another ``settrace()`` tutorial."
msgstr ""

#: ../../source/sys/tracing.rst:222
msgid "`Wicked hack: Python bytecode tracing <http://nedbatchelder.com/blog/200804/wicked_hack_python_bytecode_tracing.html>`_ -- Ned Batchelder's experiments with tracing with more granularity than source line level."
msgstr ""

#: ../../source/sys/tracing.rst:227
msgid "`smiley <https://pypi.python.org/pypi/smiley>`_ -- Python Application Tracer"
msgstr ""

