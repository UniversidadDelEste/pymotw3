# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/http.cookies/index.rst:3
msgid "http.cookies --- HTTP Cookies"
msgstr ""

#: ../../source/http.cookies/index.rst:8
msgid "Defines classes for parsing and creating HTTP cookie headers."
msgstr ""

#: ../../source/http.cookies/index.rst:11
msgid "The ``http.cookies`` module implements a parser for cookies that is mostly :rfc:`2109` compliant. The implementation is a little less strict than the standard because MSIE 3.0x does not support the entire standard."
msgstr ""

#: ../../source/http.cookies/index.rst:17
msgid "Creating and Setting a Cookie"
msgstr ""

#: ../../source/http.cookies/index.rst:19
msgid "Cookies are used as state management for browser-based application, and as such are usually set by the server to be stored and returned by the client. The most trivial example of creating a cookie sets a single name-value pair."
msgstr ""

#: ../../source/http.cookies/index.rst:0
msgid "http_cookies_setheaders.py"
msgstr ""

#: ../../source/http.cookies/index.rst:28
msgid "The output is a valid ``Set-Cookie`` header ready to be passed to the client as part of the HTTP response."
msgstr ""

#: ../../source/http.cookies/index.rst:45
msgid "Morsels"
msgstr ""

#: ../../source/http.cookies/index.rst:47
msgid "It is also possible to control the other aspects of a cookie, such as the expiration, path, and domain. In fact, all of the RFC attributes for cookies can be managed through the ``Morsel`` object representing the cookie value."
msgstr ""

#: ../../source/http.cookies/index.rst:0
msgid "http_cookies_Morsel.py"
msgstr ""

#: ../../source/http.cookies/index.rst:56
msgid "This example includes two different methods for setting stored cookies that expire. One sets the ``max-age`` to a number of seconds, the other sets ``expires`` to a date and time when the cookie should be discarded."
msgstr ""

#: ../../source/http.cookies/index.rst:103
msgid "Both the ``Cookie`` and ``Morsel`` objects act like dictionaries. A ``Morsel`` responds to a fixed set of keys:"
msgstr ""

#: ../../source/http.cookies/index.rst:106
msgid "expires"
msgstr ""

#: ../../source/http.cookies/index.rst:107
msgid "path"
msgstr ""

#: ../../source/http.cookies/index.rst:108
msgid "comment"
msgstr ""

#: ../../source/http.cookies/index.rst:109
msgid "domain"
msgstr ""

#: ../../source/http.cookies/index.rst:110
msgid "max-age"
msgstr ""

#: ../../source/http.cookies/index.rst:111
msgid "secure"
msgstr ""

#: ../../source/http.cookies/index.rst:112
msgid "version"
msgstr ""

#: ../../source/http.cookies/index.rst:114
msgid "The keys for a ``Cookie`` instance are the names of the individual cookies being stored. That information is also available from the key attribute of the ``Morsel``."
msgstr ""

#: ../../source/http.cookies/index.rst:119
msgid "Encoded Values"
msgstr ""

#: ../../source/http.cookies/index.rst:121
msgid "The cookie header needs values to be encoded so they can be parsed properly."
msgstr ""

#: ../../source/http.cookies/index.rst:0
msgid "http_cookies_coded_value.py"
msgstr ""

#: ../../source/http.cookies/index.rst:128
msgid ":attr:`Morsel.value` is always the decoded value of the cookie, while :attr:`Morsel.coded_value` is always the representation to be used for transmitting the value to the client. Both values are always strings. Values saved to a cookie that are not strings are converted automatically."
msgstr ""

#: ../../source/http.cookies/index.rst:156
msgid "Receiving and Parsing Cookie Headers"
msgstr ""

#: ../../source/http.cookies/index.rst:158
msgid "Once the ``Set-Cookie`` headers are received by the client, it will return those cookies to the server on subsequent requests using a ``Cookie`` header. An incoming ``Cookie`` header string may contain several cookie values, separated by semicolons (``;``)."
msgstr ""

#: ../../source/http.cookies/index.rst:167
msgid "Depending on the web server and framework, cookies are either available directly from the headers or the ``HTTP_COOKIE`` environment variable."
msgstr ""

#: ../../source/http.cookies/index.rst:0
msgid "http_cookies_parse.py"
msgstr ""

#: ../../source/http.cookies/index.rst:175
msgid "To decode them, pass the string without the header prefix to ``SimpleCookie`` when instantiating it, or use the ``load()`` method."
msgstr ""

#: ../../source/http.cookies/index.rst:198
msgid "Alternative Output Formats"
msgstr ""

#: ../../source/http.cookies/index.rst:200
msgid "Besides using the ``Set-Cookie`` header, servers may deliver JavaScript that adds cookies to a client. ``SimpleCookie`` and ``Morsel`` provide JavaScript output via the ``js_output()`` method."
msgstr ""

#: ../../source/http.cookies/index.rst:0
msgid "http_cookies_js_output.py"
msgstr ""

#: ../../source/http.cookies/index.rst:209
msgid "The result is a complete ``script`` tag with statements to set the cookies."
msgstr ""

#: ../../source/http.cookies/index.rst:237
msgid ":pydoc:`http.cookies`"
msgstr ""

#: ../../source/http.cookies/index.rst:239
msgid ":mod:`http.cookiejar` -- The ``cookielib`` module, for working with cookies on the client-side."
msgstr ""

#: ../../source/http.cookies/index.rst:242
msgid ":rfc:`2109` -- HTTP State Management Mechanism"
msgstr ""

