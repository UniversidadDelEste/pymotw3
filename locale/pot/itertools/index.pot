# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/itertools/index.rst:3
msgid "itertools --- Iterator Functions"
msgstr ""

#: ../../source/itertools/index.rst:9
msgid "The itertools module includes a set of functions for working with sequence data sets."
msgstr ""

#: ../../source/itertools/index.rst:12
msgid "The functions provided by ``itertools`` are inspired by similar features of functional programming languages such as Clojure, Haskell, APL, and SML. They are intended to be fast and use memory efficiently, and also to be hooked together to express more complicated iteration-based algorithms."
msgstr ""

#: ../../source/itertools/index.rst:18
msgid "Iterator-based code offers better memory consumption characteristics than code that uses lists.  Since data is not produced from the iterator until it is needed, all of the data does not need to be stored in memory at the same time.  This \"lazy\" processing model can reduce swapping and other side-effects of large data sets, improving performance."
msgstr ""

#: ../../source/itertools/index.rst:25
msgid "In addition to the functions defined in ``itertools``, the examples in this section also rely on some of the built-in functions for iteration."
msgstr ""

#: ../../source/itertools/index.rst:30
msgid "Merging and Splitting Iterators"
msgstr ""

#: ../../source/itertools/index.rst:32
msgid "The ``chain()`` function takes several iterators as arguments and returns a single iterator that produces the contents of all of the inputs as though they came from a single iterator."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_chain.py"
msgstr ""

#: ../../source/itertools/index.rst:40
msgid "``chain()`` makes it easy to process several sequences without constructing one large list."
msgstr ""

#: ../../source/itertools/index.rst:55
msgid "If the iterables to be combined are not all known in advance, or need to be evaluated lazily, ``chain.from_iterable()`` can be used to construct the chain instead."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_chain_from_iterable.py"
msgstr ""

#: ../../source/itertools/index.rst:75
msgid "The built-in function ``zip()`` returns an iterator that combines the elements of several iterators into tuples."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_zip.py"
msgstr ""

#: ../../source/itertools/index.rst:82
msgid "As with the other functions in this module, the return value is an iterable object that produces values one at a time."
msgstr ""

#: ../../source/itertools/index.rst:99
msgid "``zip()`` stops when the first input iterator is exhausted. To process all of the inputs, even if the iterators produce different numbers of values, use ``zip_longest()``."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_zip_longest.py"
msgstr ""

#: ../../source/itertools/index.rst:107
msgid "By default, ``zip_longest()`` substitutes ``None`` for any missing values. Use the ``fillvalue`` argument to use a different substitute value."
msgstr ""

#: ../../source/itertools/index.rst:128
msgid "The ``islice()`` function returns an iterator which returns selected items from the input iterator, by index."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_islice.py"
msgstr ""

#: ../../source/itertools/index.rst:135
msgid "``islice()`` takes the same arguments as the slice operator for lists: ``start``, ``stop``, and ``step``. The start and step arguments are optional."
msgstr ""

#: ../../source/itertools/index.rst:159
msgid "The ``tee()`` function returns several independent iterators (defaults to 2) based on a single original input."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_tee.py"
msgstr ""

#: ../../source/itertools/index.rst:166
msgid "``tee()`` has semantics similar to the Unix ``tee`` utility, which repeats the values it reads from its input and writes them to a named file and standard output.  The iterators returned by ``tee()`` can be used to feed the same set of data into multiple algorithms to be processed in parallel."
msgstr ""

#: ../../source/itertools/index.rst:185
msgid "The new iterators created by ``tee()`` share their input, so the original iterator should not be used after the new ones are created."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_tee_error.py"
msgstr ""

#: ../../source/itertools/index.rst:192
msgid "If values are consumed from the original input, the new iterators will not produce those values:"
msgstr ""

#: ../../source/itertools/index.rst:210
msgid "Converting Inputs"
msgstr ""

#: ../../source/itertools/index.rst:212
msgid "The built-in ``map()`` function returns an iterator that calls a function on the values in the input iterators, and returns the results. It stops when any input iterator is exhausted."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_map.py"
msgstr ""

#: ../../source/itertools/index.rst:220
msgid "In the first example, the lambda function multiplies the input values by 2. In a second example, the lambda function multiplies two arguments, taken from separate iterators, and returns a tuple with the original arguments and the computed value. The third example stops after producing two tuples because the second range is exhausted."
msgstr ""

#: ../../source/itertools/index.rst:255
msgid "The ``starmap()`` function is similar to ``map()``, but instead of constructing a tuple from multiple iterators, it splits up the items in a single iterator as arguments to the mapping function using the ``*`` syntax."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_starmap.py"
msgstr ""

#: ../../source/itertools/index.rst:264
msgid "Where the mapping function to ``map()`` is called ``f(i1, i2)``, the mapping function passed to ``starmap()`` is called ``f(*i)``."
msgstr ""

#: ../../source/itertools/index.rst:284
msgid "Producing New Values"
msgstr ""

#: ../../source/itertools/index.rst:286
msgid "The ``count()`` function returns an iterator that produces consecutive integers, indefinitely. The first number can be passed as an argument (the default is zero). There is no upper bound argument (see the built-in ``range()`` for more control over the result set)."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_count.py"
msgstr ""

#: ../../source/itertools/index.rst:295
msgid "This example stops because the list argument is consumed."
msgstr ""

#: ../../source/itertools/index.rst:311
msgid "The start and step arguments to ``count()`` can be any numerical values that can be added together."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_count_step.py"
msgstr ""

#: ../../source/itertools/index.rst:318
msgid "In this example, the start point and steps are ``Fraction`` objects from the :mod:`fraction` module."
msgstr ""

#: ../../source/itertools/index.rst:335
msgid "The ``cycle()`` function returns an iterator that repeats the contents of the arguments it is given indefinitely. Since it has to remember the entire contents of the input iterator, it may consume quite a bit of memory if the iterator is long."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_cycle.py"
msgstr ""

#: ../../source/itertools/index.rst:344
msgid "A counter variable is used to break out of the loop after a few cycles in this example."
msgstr ""

#: ../../source/itertools/index.rst:365
msgid "The ``repeat()`` function returns an iterator that produces the same value each time it is accessed."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_repeat.py"
msgstr ""

#: ../../source/itertools/index.rst:372
msgid "The iterator returned by ``repeat()`` keeps returning data forever, unless the optional ``times`` argument is provided to limit it."
msgstr ""

#: ../../source/itertools/index.rst:391
msgid "It is useful to combine ``repeat()`` with ``zip()`` or ``map()`` when invariant values need to be included with the values from the other iterators."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_repeat_zip.py"
msgstr ""

#: ../../source/itertools/index.rst:399
msgid "A counter value is combined with the constant returned by ``repeat()`` in this example."
msgstr ""

#: ../../source/itertools/index.rst:418
msgid "This example uses ``map()`` to multiply the numbers in the range 0 through 4 by 2."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_repeat_map.py"
msgstr ""

#: ../../source/itertools/index.rst:425
msgid "The ``repeat()`` iterator does not need to be explicitly limited, since ``map()`` stops processing when any of its inputs ends, and the ``range()`` returns only five elements."
msgstr ""

#: ../../source/itertools/index.rst:447
msgid "Filtering"
msgstr ""

#: ../../source/itertools/index.rst:449
msgid "The ``dropwhile()`` function returns an iterator that produces elements of the input iterator after a condition becomes false for the first time."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_dropwhile.py"
msgstr ""

#: ../../source/itertools/index.rst:457
msgid "``dropwhile()`` does not filter every item of the input; after the condition is false the first time, all of the remaining items in the input are returned."
msgstr ""

#: ../../source/itertools/index.rst:478
msgid "The opposite of ``dropwhile()`` is ``takewhile()``.  It returns an iterator that returns items from the input iterator as long as the test function returns true."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_takewhile.py"
msgstr ""

#: ../../source/itertools/index.rst:486
msgid "As soon as ``should_take()`` returns ``False``, ``takewhile()`` stops processing the input."
msgstr ""

#: ../../source/itertools/index.rst:508
msgid "The built-in function ``filter()`` returns an iterator that includes only items for which the test function returns true."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_filter.py"
msgstr ""

#: ../../source/itertools/index.rst:515
msgid "``filter()`` is different from ``dropwhile()`` and ``takewhile()`` in that every item is tested before it is returned."
msgstr ""

#: ../../source/itertools/index.rst:537
msgid "``filterfalse()`` returns an iterator that includes only items where the test function returns false."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_filterfalse.py"
msgstr ""

#: ../../source/itertools/index.rst:544
msgid "The test expression in ``check_item()`` is the same, so the results in this example with ``filterfalse()`` are the opposite of the results from the previous example."
msgstr ""

#: ../../source/itertools/index.rst:566
msgid "``compress()`` offers another way to filter the contents of an iterable. Instead of calling a function, it uses the values in another iterable to indicate when to accept a value and when to ignore it."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_compress.py"
msgstr ""

#: ../../source/itertools/index.rst:574
msgid "The first argument is the data iterable to process and the second is a selector iterable producing Boolean values indicating which elements to take from the data input (a true value causes the value to be produced, a false value causes it to be ignored)."
msgstr ""

#: ../../source/itertools/index.rst:596
msgid "Grouping Data"
msgstr ""

#: ../../source/itertools/index.rst:598
msgid "The ``groupby()`` function returns an iterator that produces sets of values organized by a common key.  This example illustrates grouping related values based on an attribute."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_groupby_seq.py"
msgstr ""

#: ../../source/itertools/index.rst:606
msgid "The input sequence needs to be sorted on the key value in order for the groupings to work out as expected."
msgstr ""

#: ../../source/itertools/index.rst:653
msgid "Combining Inputs"
msgstr ""

#: ../../source/itertools/index.rst:655
msgid "The ``accumulate()`` function processes the input iterable, passing the nth and n+1st item to a function and producing the return value instead of either input. The default function used to combine the two values adds them, so ``accumulate()`` can be used to produce the cumulative sum of a series of numerical inputs."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_accumulate.py"
msgstr ""

#: ../../source/itertools/index.rst:665
msgid "When used with a sequence of non-integer values, the results depend on what it means to \"add\" two items together. The second example in this script shows that when ``accumulate()`` receives a string input each response is a progressively longer prefix of that string."
msgstr ""

#: ../../source/itertools/index.rst:683
msgid "It is possible to combine ``accumulate()`` with any other function that takes two input values to achieve different results."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_accumulate_custom.py"
msgstr ""

#: ../../source/itertools/index.rst:690
msgid "This example combines the string values in a way that makes a series of (nonsensical) palindromes. Each step of the way when ``f()`` is called, it prints the input values passed to it by ``accumulate()``."
msgstr ""

#: ../../source/itertools/index.rst:710
msgid "Nested ``for`` loops that iterate over multiple sequences can often be replaced with ``product()``, which produces a single iterable whose values are the Cartesian product of the set of input values."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_product.py"
msgstr ""

#: ../../source/itertools/index.rst:718
msgid "The values produced by ``product()`` are tuples, with the members taken from each of the iterables passed in as arguments in the order they are passed. The first tuple returned includes the first value from each iterable. The *last* iterable passed to ``product()`` is processed first, followed by the next to last, and so on. The result is that the return values are in order based on the first iterable, then the next iterable, etc."
msgstr ""

#: ../../source/itertools/index.rst:726
msgid "In this example, the cards are ordered by value and then by suit."
msgstr ""

#: ../../source/itertools/index.rst:752
msgid "To change the order of the cards, change the order of the arguments to ``product()``."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_product_ordering.py"
msgstr ""

#: ../../source/itertools/index.rst:760
msgid "The print loop in this example looks for an Ace card, instead of the spade suit, and then adds a newline to break up the output."
msgstr ""

#: ../../source/itertools/index.rst:778
msgid "To compute the product of a sequence with itself, specify how many times the input should be repeated."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_product_repeat.py"
msgstr ""

#: ../../source/itertools/index.rst:785
msgid "Since repeating a single iterable is like passing the same iterable multiple times, each tuple produced by ``product()`` will contain a number of items equal to the repeat counter."
msgstr ""

#: ../../source/itertools/index.rst:818
msgid "The ``permutations()`` function produces items from the input iterable combined in the possible permutations of the given length. It defaults to producing the full set of all permutations."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_permutations.py"
msgstr ""

#: ../../source/itertools/index.rst:826
msgid "Use the ``r`` argument to limit the length and number of the individual permutations returned."
msgstr ""

#: ../../source/itertools/index.rst:853
msgid "To limit the values to unique combinations rather than permutations, use ``combinations()``. As long as the members of the input are unique, the output will not include any repeated values."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_combinations.py"
msgstr ""

#: ../../source/itertools/index.rst:861
msgid "Unlike with permutations, the ``r`` argument to ``combinations()`` is required."
msgstr ""

#: ../../source/itertools/index.rst:880
msgid "While ``combinations()`` does not repeat individual input elements, sometimes it is useful to consider combinations that do include repeated elements. For those cases, use ``combinations_with_replacement()``."
msgstr ""

#: ../../source/itertools/index.rst:0
msgid "itertools_combinations_with_replacement.py"
msgstr ""

#: ../../source/itertools/index.rst:889
msgid "In this output, each input item is paired with itself as well as all of the other members of the input sequence."
msgstr ""

#: ../../source/itertools/index.rst:913
msgid ":pydoc:`itertools`"
msgstr ""

#: ../../source/itertools/index.rst:915
msgid ":ref:`Python 2 to 3 porting notes for itertools <porting-itertools>`"
msgstr ""

#: ../../source/itertools/index.rst:917
msgid "`The Standard ML Basis Library <http://www.standardml.org/Basis/>`_) -- The library for SML."
msgstr ""

#: ../../source/itertools/index.rst:920
msgid "`Definition of Haskell and the Standard Libraries <http://www.haskell.org/definition/>`__ -- Standard library specification for the functional language Haskell."
msgstr ""

#: ../../source/itertools/index.rst:924
msgid "`Clojure <http://clojure.org/>`__ -- Clojure is a dynamic functional language that runs on the Java Virtual Machine."
msgstr ""

#: ../../source/itertools/index.rst:927
msgid "`tee <http://man7.org/linux/man-pages/man1/tee.1.html>`__ -- Unix command line tool for splitting one input into multiple identical output streams."
msgstr ""

#: ../../source/itertools/index.rst:931
msgid "`Cartesian product <https://en.wikipedia.org/wiki/Cartesian_product>`__ -- Mathematical definition of the Cartesian product of two sequences."
msgstr ""

