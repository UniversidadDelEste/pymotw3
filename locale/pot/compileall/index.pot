# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/compileall/index.rst:3
msgid "compileall --- Byte-compile Source Files"
msgstr ""

#: ../../source/compileall/index.rst:8
msgid "Convert source files to byte-compiled version."
msgstr ""

#: ../../source/compileall/index.rst:10
msgid "The ``compileall`` module finds Python source files and compiles them to the byte-code representation, saving the results in ``.pyc``."
msgstr ""

#: ../../source/compileall/index.rst:14
msgid "Compiling One Directory"
msgstr ""

#: ../../source/compileall/index.rst:16
msgid "``compile_dir()`` is used to recursively scan a directory and byte-compile the files within it."
msgstr ""

#: ../../source/compileall/index.rst:0
msgid "compileall_compile_dir.py"
msgstr ""

#: ../../source/compileall/index.rst:23
msgid "By default, all of the subdirectories are scanned to a depth of 10. The output files are written to a ``__pycache__`` directory and named based on the Python interpreter version."
msgstr ""

#: ../../source/compileall/index.rst:67
msgid "Ignoring Files"
msgstr ""

#: ../../source/compileall/index.rst:69
msgid "To filter directories out, use the ``rx`` argument to provide a regular expression to match the names to exclude."
msgstr ""

#: ../../source/compileall/index.rst:0
msgid "compileall_exclude_dirs.py"
msgstr ""

#: ../../source/compileall/index.rst:76
msgid "This version excludes files in the ``subdir`` subdirectory."
msgstr ""

#: ../../source/compileall/index.rst:93
msgid "The ``maxlevels`` argument controls the depth of recursion.  For example, to avoid recursion entirely pass ``0``."
msgstr ""

#: ../../source/compileall/index.rst:0
msgid "compileall_recursion_depth.py"
msgstr ""

#: ../../source/compileall/index.rst:100
msgid "Only files within the directory passed to ``compile_dir()`` are compiled."
msgstr ""

#: ../../source/compileall/index.rst:118
msgid "Compiling sys.path"
msgstr ""

#: ../../source/compileall/index.rst:120
msgid "All of the Python source files found in sys.path can be compiled with a single call to ``compile_path()``."
msgstr ""

#: ../../source/compileall/index.rst:0
msgid "compileall_path.py"
msgstr ""

#: ../../source/compileall/index.rst:127
msgid "This example replaces the default contents of ``sys.path`` to avoid permission errors while running the script, but still illustrates the default behavior.  Note that the ``maxlevels`` value defaults to ``0``."
msgstr ""

#: ../../source/compileall/index.rst:150
msgid "Compiling Individual Files"
msgstr ""

#: ../../source/compileall/index.rst:152
msgid "To compile a single file, rather than an entire directory of files, use ``compile_file()``."
msgstr ""

#: ../../source/compileall/index.rst:0
msgid "compileall_compile_file.py"
msgstr ""

#: ../../source/compileall/index.rst:159
msgid "The first argument should be the name to the file, either a full path or a relative path."
msgstr ""

#: ../../source/compileall/index.rst:194
msgid "From the Command Line"
msgstr ""

#: ../../source/compileall/index.rst:196
msgid "It is also possible to invoke ``compileall`` from the command line, so it can be integrated with a build system via a Makefile.  For example:"
msgstr ""

#: ../../source/compileall/index.rst:257
msgid "To recreate the earlier example, skipping the ``subdir`` directory, run:"
msgstr ""

#: ../../source/compileall/index.rst:277
msgid ":pydoc:`compileall`"
msgstr ""

