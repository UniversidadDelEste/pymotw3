# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/heapq/index.rst:3
msgid "heapq -- Heap Sort Algorithm"
msgstr ""

#: ../../source/heapq/index.rst:9
msgid "The heapq implements a min-heap sort algorithm suitable for use with Python's lists."
msgstr ""

#: ../../source/heapq/index.rst:12
msgid "A *heap* is a tree-like data structure in which the child nodes have a sort-order relationship with the parents. *Binary heaps* can be represented using a list or array organized so that the children of element N are at positions 2 * *N* + 1 and 2 * *N* + 2 (for zero-based indexes). This layout makes it possible to rearrange heaps in place, so it is not necessary to reallocate as much memory when adding or removing items."
msgstr ""

#: ../../source/heapq/index.rst:20
msgid "A max-heap ensures that the parent is larger than or equal to both of its children. A min-heap requires that the parent be less than or equal to its children. Python's ``heapq`` module implements a min-heap."
msgstr ""

#: ../../source/heapq/index.rst:26
msgid "Example Data"
msgstr ""

#: ../../source/heapq/index.rst:28
msgid "The examples in this section use the data in ``heapq_heapdata.py``."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_heapdata.py"
msgstr ""

#: ../../source/heapq/index.rst:34
msgid "The heap output is printed using ``heapq_showtree.py``."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_showtree.py"
msgstr ""

#: ../../source/heapq/index.rst:41
msgid "Creating a Heap"
msgstr ""

#: ../../source/heapq/index.rst:43
msgid "There are two basic ways to create a heap: ``heappush()`` and ``heapify()``."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_heappush.py"
msgstr ""

#: ../../source/heapq/index.rst:50
msgid "When ``heappush()`` is used, the heap sort order of the elements is maintained as new items are added from a data source."
msgstr ""

#: ../../source/heapq/index.rst:97
msgid "If the data is already in memory, it is more efficient to use ``heapify()`` to rearrange the items of the list in place."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_heapify.py"
msgstr ""

#: ../../source/heapq/index.rst:104
msgid "The result of building a list in heap order one item at a time is the same as building an unordered list and then calling ``heapify()``."
msgstr ""

#: ../../source/heapq/index.rst:128
msgid "Accessing the Contents of a Heap"
msgstr ""

#: ../../source/heapq/index.rst:130
msgid "Once the heap is organized correctly, use ``heappop()`` to remove the element with the lowest value."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_heappop.py"
msgstr ""

#: ../../source/heapq/index.rst:137
msgid "In this example, adapted from the stdlib documentation, ``heapify()`` and ``heappop()`` are used to sort a list of numbers."
msgstr ""

#: ../../source/heapq/index.rst:173
msgid "To remove existing elements and replace them with new values in a single operation, use ``heapreplace()``."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_heapreplace.py"
msgstr ""

#: ../../source/heapq/index.rst:180
msgid "Replacing elements in place makes it possible to maintain a fixed-size heap, such as a queue of jobs ordered by priority."
msgstr ""

#: ../../source/heapq/index.rst:216
msgid "Data Extremes from a Heap"
msgstr ""

#: ../../source/heapq/index.rst:218
msgid "``heapq`` also includes two functions to examine an iterable and find a range of the largest or smallest values it contains."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_extremes.py"
msgstr ""

#: ../../source/heapq/index.rst:225
msgid "Using ``nlargest()`` and ``nsmallest()`` is efficient only for relatively small values of *n* > 1, but can still come in handy in a few cases."
msgstr ""

#: ../../source/heapq/index.rst:246
msgid "Efficiently Merging Sorted Sequences"
msgstr ""

#: ../../source/heapq/index.rst:248
msgid "Combining several sorted sequences into one new sequence is easy for small data sets."
msgstr ""

#: ../../source/heapq/index.rst:255
msgid "For larger data sets, this technique can use a considerable amount of memory. Instead of sorting the entire combined sequence, ``merge()`` uses a heap to generate a new sequence one item at a time, determining the next item using a fixed amount of memory."
msgstr ""

#: ../../source/heapq/index.rst:0
msgid "heapq_merge.py"
msgstr ""

#: ../../source/heapq/index.rst:264
msgid "Because the implementation of ``merge()`` uses a heap, it consumes memory based on the number of sequences being merged, rather than the number of items in those sequences."
msgstr ""

#: ../../source/heapq/index.rst:288
msgid ":pydoc:`heapq`"
msgstr ""

#: ../../source/heapq/index.rst:290
msgid "`Wikipedia: Heap (data structure) <https://en.wikipedia.org/wiki/Heap_(data_structure)>`__ -- A general description of heap data structures."
msgstr ""

#: ../../source/heapq/index.rst:294
msgid ":ref:`Queue-PriorityQueue` -- A priority queue implementation from :mod:`Queue` in the standard library."
msgstr ""

