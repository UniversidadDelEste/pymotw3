# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sched/index.rst:3
msgid "sched --- Timed Event Scheduler"
msgstr ""

#: ../../source/sched/index.rst:8
msgid "Generic event scheduler."
msgstr ""

#: ../../source/sched/index.rst:10
msgid "The ``sched`` module implements a generic event scheduler for running tasks at specific times. The scheduler class uses a ``time`` function to learn the current time, and a ``delay`` function to wait for a specific period of time. The actual units of time are not important, which makes the interface flexible enough to be used for many purposes."
msgstr ""

#: ../../source/sched/index.rst:17
msgid "The ``time`` function is called without any arguments, and should return a number representing the current time. The ``delay`` function is called with a single integer argument, using the same scale as the time function, and should wait that many time units before returning. By default ``monotonic()`` and ``sleep()`` from :mod:`time` are used, but the examples in this section use ``time.time()``, which also meets the requirements, because it makes the output easier to understand."
msgstr ""

#: ../../source/sched/index.rst:26
msgid "To support multi-threaded applications, the delay function is called with argument 0 after each event is generated, to ensure that other threads also have a chance to run."
msgstr ""

#: ../../source/sched/index.rst:31
msgid "Running Events With a Delay"
msgstr ""

#: ../../source/sched/index.rst:33
msgid "Events can be scheduled to run after a delay, or at a specific time. To schedule them with a delay, use the ``enter()`` method, which takes four arguments."
msgstr ""

#: ../../source/sched/index.rst:37
msgid "A number representing the delay"
msgstr ""

#: ../../source/sched/index.rst:38
msgid "A priority value"
msgstr ""

#: ../../source/sched/index.rst:39
msgid "The function to call"
msgstr ""

#: ../../source/sched/index.rst:40
msgid "A tuple of arguments for the function"
msgstr ""

#: ../../source/sched/index.rst:42
msgid "This example schedules two different events to run after two and three seconds respectively. When the event's time comes up, ``print_event()`` is called and prints the current time and the name argument passed to the event."
msgstr ""

#: ../../source/sched/index.rst:0
msgid "sched_basic.py"
msgstr ""

#: ../../source/sched/index.rst:51
msgid "Running the program produces:"
msgstr ""

#: ../../source/sched/index.rst:67
msgid "The time printed for the first event is two seconds after start, and the time for the second event is three seconds after start."
msgstr ""

#: ../../source/sched/index.rst:71
msgid "Overlapping Events"
msgstr ""

#: ../../source/sched/index.rst:73
msgid "The call to ``run()`` blocks until all of the events have been processed. Each event is run in the same thread, so if an event takes longer to run than the delay between events, there will be overlap. The overlap is resolved by postponing the later event. No events are lost, but some events may be called later than they were scheduled. In the next example, ``long_event()`` sleeps but it could just as easily delay by performing a long calculation or by blocking on I/O."
msgstr ""

#: ../../source/sched/index.rst:0
msgid "sched_overlap.py"
msgstr ""

#: ../../source/sched/index.rst:86
msgid "The result is the second event is run immediately after the first finishes, since the first event took long enough to push the clock past the desired start time of the second event."
msgstr ""

#: ../../source/sched/index.rst:108
msgid "Event Priorities"
msgstr ""

#: ../../source/sched/index.rst:110
msgid "If more than one event is scheduled for the same time their priority values are used to determine the order they are run."
msgstr ""

#: ../../source/sched/index.rst:0
msgid "sched_priority.py"
msgstr ""

#: ../../source/sched/index.rst:117
msgid "This example needs to ensure that they are scheduled for the exact same time, so the ``enterabs()`` method is used instead of ``enter()``. The first argument to ``enterabs()`` is the time to run the event, instead of the amount of time to delay."
msgstr ""

#: ../../source/sched/index.rst:138
msgid "Canceling Events"
msgstr ""

#: ../../source/sched/index.rst:140
msgid "Both ``enter()`` and ``enterabs()`` return a reference to the event that can be used to cancel it later. Because ``run()`` blocks, the event has to be canceled in a different thread. For this example, a thread is started to run the scheduler and the main processing thread is used to cancel the event."
msgstr ""

#: ../../source/sched/index.rst:0
msgid "sched_cancel.py"
msgstr ""

#: ../../source/sched/index.rst:150
msgid "Two events were scheduled, but the first was later canceled. Only the second event runs, so the counter variable is only incremented one time."
msgstr ""

#: ../../source/sched/index.rst:172
msgid ":pydoc:`sched`"
msgstr ""

#: ../../source/sched/index.rst:174
msgid ":mod:`time` -- The ``time`` module."
msgstr ""

