# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/argparse/index.rst:3
msgid "argparse --- Command-Line Option and Argument Parsing"
msgstr ""

#: ../../source/argparse/index.rst:8
msgid "Command-line option and argument parsing."
msgstr ""

#: ../../source/argparse/index.rst:10
msgid "The ``argparse`` module includes tools for building command line argument and option processors. It was added to Python 2.7 as a replacement for :mod:`optparse`.  The implementation of ``argparse`` supports features that would not have been easy to add to :mod:`optparse`, and that would have required backwards-incompatible API changes, so a new module was brought into the library instead. :mod:`optparse` is now deprecated."
msgstr ""

#: ../../source/argparse/index.rst:19
msgid "Setting Up a Parser"
msgstr ""

#: ../../source/argparse/index.rst:21
msgid "The first step when using ``argparse`` is to create a parser object and tell it what arguments to expect.  The parser can then be used to process the command-line arguments when the program runs.  The constructor for the parser class (``ArgumentParser``) takes several arguments to set up the description used in the help text for the program and other global behaviors or settings."
msgstr ""

#: ../../source/argparse/index.rst:37
msgid "Defining Arguments"
msgstr ""

#: ../../source/argparse/index.rst:39
msgid "``argparse`` is a complete argument processing library. Arguments can trigger different actions, specified by the ``action`` argument to ``add_argument()``. Supported actions include storing the argument (singly, or as part of a list), storing a constant value when the argument is encountered (including special handling for true/false values for Boolean switches), counting the number of times an argument is seen, and calling a callback to use custom processing instructions."
msgstr ""

#: ../../source/argparse/index.rst:47
msgid "The default action is to store the argument value. If a type is provided, the value is converted to that type before it is stored. If the ``dest`` argument is provided, the value is saved using that name when the command-line arguments are parsed."
msgstr ""

#: ../../source/argparse/index.rst:53
msgid "Parsing a Command-Line"
msgstr ""

#: ../../source/argparse/index.rst:55
msgid "After all of the arguments are defined, parse the command-line by passing a sequence of argument strings to ``parse_args()``. By default, the arguments are taken from ``sys.argv[1:]``, but any list of strings can be used. The options are processed using the GNU/POSIX syntax, so option and argument values can be mixed in the sequence."
msgstr ""

#: ../../source/argparse/index.rst:61
msgid "The return value from ``parse_args()`` is a ``Namespace`` containing the arguments to the command. The object holds the argument values as attributes, so if the argument's ``dest`` is set to ``\"myoption\"``, the value is accessible as ``args.myoption``."
msgstr ""

#: ../../source/argparse/index.rst:67
msgid "Simple Examples"
msgstr ""

#: ../../source/argparse/index.rst:69
msgid "Here is a simple example with three different options: a Boolean option (``-a``), a simple string option (``-b``), and an integer option (``-c``)."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_short.py"
msgstr ""

#: ../../source/argparse/index.rst:77
msgid "There are a few ways to pass values to single character options. The previous example uses two different forms, ``-bval`` and ``-c val``."
msgstr ""

#: ../../source/argparse/index.rst:92
msgid "The type of the value associated with ``'c'`` in the output is an integer, since the ``ArgumentParser`` was told to convert the argument before storing it."
msgstr ""

#: ../../source/argparse/index.rst:96
msgid "\"Long\" option names, with more than a single character in their name, are handled in the same way."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_long.py"
msgstr ""

#: ../../source/argparse/index.rst:103
msgid "The results are similar."
msgstr ""

#: ../../source/argparse/index.rst:117
msgid "``argparse`` is a full command-line argument parser tool, and handles both optional and required arguments."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_arguments.py"
msgstr ""

#: ../../source/argparse/index.rst:124
msgid "In this example, the \"count\" argument is an integer and the \"units\" argument is saved as a string.  If either is left off of the command-line, or the value given cannot be converted to the right type, an error is reported."
msgstr ""

#: ../../source/argparse/index.rst:160
msgid "Argument Actions"
msgstr ""

#: ../../source/argparse/index.rst:162
msgid "Any of six built-in actions can be triggered when an argument is encountered."
msgstr ""

#: ../../source/argparse/index.rst:167
msgid "``store``"
msgstr ""

#: ../../source/argparse/index.rst:166
msgid "Save the value, after optionally converting it to a different type. This is the default action taken if none is specified explicitly."
msgstr ""

#: ../../source/argparse/index.rst:172
msgid "``store_const``"
msgstr ""

#: ../../source/argparse/index.rst:170
msgid "Save a value defined as part of the argument specification, rather than a value that comes from the arguments being parsed.  This is typically used to implement command-line flags that are not Booleans."
msgstr ""

#: ../../source/argparse/index.rst:176
msgid "``store_true`` / ``store_false``"
msgstr ""

#: ../../source/argparse/index.rst:175
msgid "Save the appropriate Boolean value.  These actions are used to implement Boolean switches."
msgstr ""

#: ../../source/argparse/index.rst:180
msgid "``append``"
msgstr ""

#: ../../source/argparse/index.rst:179
msgid "Save the value to a list.  Multiple values are saved if the argument is repeated."
msgstr ""

#: ../../source/argparse/index.rst:183
msgid "``append_const``"
msgstr ""

#: ../../source/argparse/index.rst:183
msgid "Save a value defined in the argument specification to a list."
msgstr ""

#: ../../source/argparse/index.rst:186
msgid "``version``"
msgstr ""

#: ../../source/argparse/index.rst:186
msgid "Prints version details about the program and then exits."
msgstr ""

#: ../../source/argparse/index.rst:188
msgid "This example program demonstrates each action type, with the minimum configuration needed for each to work."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_action.py"
msgstr ""

#: ../../source/argparse/index.rst:195
msgid "The ``-t`` and ``-f`` options are configured to modify different option values, each storing either True or False.  The ``dest`` values for ``-A`` and ``-B`` are the same so that their constant values are appended to the same list."
msgstr ""

#: ../../source/argparse/index.rst:291
msgid "Option Prefixes"
msgstr ""

#: ../../source/argparse/index.rst:293
msgid "The default syntax for options is based on the Unix convention of signifying command-line switches using a dash prefix (\"``-``\"). ``argparse`` supports other prefixes, so a program can conform to the local platform default (i.e., use \"``/``\" on Windows) or follow a different convention."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_prefix_chars.py"
msgstr ""

#: ../../source/argparse/index.rst:303
msgid "Set the ``prefix_chars`` parameter for the ``ArgumentParser`` to a string containing all of the characters that should be allowed to signify options.  It is important to understand that although ``prefix_chars`` establishes the allowed switch characters, the individual argument definitions specify the syntax for a given switch. This gives explicit control over whether options using different prefixes are aliases (such as might be the case for platform-independent command-line syntax) or alternatives (e.g., using \"``+``\" to indicate turning a switch on and \"``-``\" to turn it off). In the previous example, ``+a`` and ``-a`` are separate arguments, and ``//noarg`` can also be given as ``++noarg``, but not ``--noarg``."
msgstr ""

#: ../../source/argparse/index.rst:363
msgid "Sources of Arguments"
msgstr ""

#: ../../source/argparse/index.rst:365
msgid "In the examples so far, the list of arguments given to the parser has come from a list passed in explicitly, or were taken implicitly from ``sys.argv``.  Passing the list explicitly is useful when using ``argparse`` to process command-line-like instructions that do not come from the command-line (such as in a configuration file)."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_with_shlex.py"
msgstr ""

#: ../../source/argparse/index.rst:376
msgid "This example uses :mod:`configparser` to read a configuration file."
msgstr ""

#: ../../source/argparse/index.rst:380
msgid ":mod:`shlex` makes it easy to split the string stored in the configuration file."
msgstr ""

#: ../../source/argparse/index.rst:397
msgid "An alternative to processing the configuration file in application code is to tell ``argparse`` how to recognize an argument that specifies an input file containing a set of arguments to be processed using ``fromfile_prefix_chars``."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_fromfile_prefix_chars.py"
msgstr ""

#: ../../source/argparse/index.rst:406
msgid "This example stops when it finds an argument prefixed with ``@``, then reads the named file to find more arguments.  The file should contain one argument per line, as in this example."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_fromfile_prefix_chars.txt"
msgstr ""

#: ../../source/argparse/index.rst:413
msgid "The output produced when processing ``argparse_from_prefix_chars.txt`` follows."
msgstr ""

#: ../../source/argparse/index.rst:429
msgid "Help Output"
msgstr ""

#: ../../source/argparse/index.rst:432
msgid "Automatically Generated Help"
msgstr ""

#: ../../source/argparse/index.rst:434
msgid "``argparse`` will automatically add options to generate help, if configured to do so.  The ``add_help`` argument to ``ArgumentParser`` controls the help-related options."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_with_help.py"
msgstr ""

#: ../../source/argparse/index.rst:442
msgid "The help options (``-h`` and ``--help``) are added by default, but can be disabled by setting ``add_help`` to false."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_without_help.py"
msgstr ""

#: ../../source/argparse/index.rst:449
msgid "Although ``-h`` and ``--help`` are defacto standard option names for requesting help, some applications or uses of ``argparse`` either do not need to provide help or need to use those option names for other purposes."
msgstr ""

#: ../../source/argparse/index.rst:480
msgid "Customizing Help"
msgstr ""

#: ../../source/argparse/index.rst:482
msgid "For applications that need to handle the help output directly, some of the utility methods of ``ArgumentParser`` will be useful in creating :ref:`custom actions <argparse-custom-actions>` to print help with extra information."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_custom_help.py"
msgstr ""

#: ../../source/argparse/index.rst:491
msgid ":meth:`print_usage` prints the short usage message for an argument parser, and :meth:`print_help` prints the full help output."
msgstr ""

#: ../../source/argparse/index.rst:516
msgid "The ``ArgumentParser`` uses a formatter class to control the appearance of the help output. To change the class, pass ``formatter_class`` when instantiating the ``ArgumentParser``."
msgstr ""

#: ../../source/argparse/index.rst:521
msgid "For example, the ``RawDescriptionHelpFormatter`` bypasses the line wrapping provided by the default formatter."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_raw_description_help_formatter.py"
msgstr ""

#: ../../source/argparse/index.rst:528
msgid "All text in the description and epilog of the command will be left unchanged."
msgstr ""

#: ../../source/argparse/index.rst:555
msgid "The ``RawTextHelpFormatter`` treats all help text as pre-formatted."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_raw_text_help_formatter.py"
msgstr ""

#: ../../source/argparse/index.rst:561
msgid "The help text for the ``-a`` argument is no longer wrapped neatly."
msgstr ""

#: ../../source/argparse/index.rst:590
msgid "Raw formatters may be useful for applications with examples in the description or epilog, where changing the format of the text may make the examples invalid."
msgstr ""

#: ../../source/argparse/index.rst:594
msgid "The ``MetavarTypeHelpFormatter`` prints the name of the type for each option, instead of the destination variable, which can be useful for applications with a lot of options of different types."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_metavar_type_help_formatter.py"
msgstr ""

#: ../../source/argparse/index.rst:602
msgid "Rather than display the value of ``dest``, the name of the type associated with the option is printed."
msgstr ""

#: ../../source/argparse/index.rst:626
msgid "Parser Organization"
msgstr ""

#: ../../source/argparse/index.rst:628
msgid "``argparse`` includes several features for organizing argument parsers, to make implementation easier or to improve the usability of the help output."
msgstr ""

#: ../../source/argparse/index.rst:633
msgid "Sharing Parser Rules"
msgstr ""

#: ../../source/argparse/index.rst:635
msgid "Programmers commonly need to implement a suite of command-line tools that all take a set of arguments, and then specialize in some way. For example, if the programs all need to authenticate the user before taking any real action, they would all need to support ``--user`` and ``--password`` options.  Rather than add the options explicitly to every ``ArgumentParser``, it is possible to define a parent parser with the shared options, and then have the parsers for the individual programs inherit from its options."
msgstr ""

#: ../../source/argparse/index.rst:644
msgid "The first step is to set up the parser with the shared argument definitions.  Since each subsequent user of the parent parser is going to try to add the same help options, causing an exception, automatic help generation is turned off in the base parser."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_parent_base.py"
msgstr ""

#: ../../source/argparse/index.rst:653
msgid "Next, create another parser with ``parents`` set:"
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_uses_parent.py"
msgstr ""

#: ../../source/argparse/index.rst:659
msgid "And the resulting program takes all three options:"
msgstr ""

#: ../../source/argparse/index.rst:680
msgid "Conflicting Options"
msgstr ""

#: ../../source/argparse/index.rst:682
msgid "The previous example pointed out that adding two argument handlers to a parser using the same argument name causes an exception.  The conflict resolution behavior can be changed by passing a ``conflict_handler``.  The two built-in handlers are ``error`` (the default), and ``resolve``, which picks a handler based on the order they are added."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_conflict_handler_resolve.py"
msgstr ""

#: ../../source/argparse/index.rst:693
msgid "Since the last handler with a given argument name is used, in this example, the stand-alone option ``-b`` is masked by the alias for ``--long-b``."
msgstr ""

#: ../../source/argparse/index.rst:713
msgid "Switching the order of the calls to ``add_argument()`` unmasks the stand-alone option:"
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_conflict_handler_resolve2.py"
msgstr ""

#: ../../source/argparse/index.rst:720
msgid "Now both options can be used together."
msgstr ""

#: ../../source/argparse/index.rst:740
msgid "Argument Groups"
msgstr ""

#: ../../source/argparse/index.rst:742
msgid "``argparse`` combines the argument definitions into \"groups.\"  By default, it uses two groups, with one for options and another for required position-based arguments."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_default_grouping.py"
msgstr ""

#: ../../source/argparse/index.rst:750
msgid "The grouping is reflected in the separate \"positional arguments\" and \"optional arguments\" sections of the help output."
msgstr ""

#: ../../source/argparse/index.rst:774
msgid "The grouping can be adjusted to make it more logical in the help, so that related options or values are documented together.  The shared-option example from earlier could be written using custom grouping so that the authentication options are shown together in the help."
msgstr ""

#: ../../source/argparse/index.rst:780
msgid "Create the \"authentication\" group with ``add_argument_group()`` and then add each of the authentication-related options to the group, instead of the base parser."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_parent_with_group.py"
msgstr ""

#: ../../source/argparse/index.rst:788
msgid "The program using the group-based parent lists it in the ``parents`` value, just as before."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_uses_parent_with_group.py"
msgstr ""

#: ../../source/argparse/index.rst:795
msgid "The help output now shows the authentication options together."
msgstr ""

#: ../../source/argparse/index.rst:817
msgid "Mutually Exclusive Options"
msgstr ""

#: ../../source/argparse/index.rst:819
msgid "Defining mutually exclusive options is a special case of the option grouping feature, and uses ``add_mutually_exclusive_group()`` instead of ``add_argument_group()``."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_mutually_exclusive.py"
msgstr ""

#: ../../source/argparse/index.rst:827
msgid "``argparse`` enforces the mutual exclusivity, so that only one of the options from the group can be given."
msgstr ""

#: ../../source/argparse/index.rst:867
msgid "Nesting Parsers"
msgstr ""

#: ../../source/argparse/index.rst:869
msgid "The parent parser approach described earlier is one way to share options between related commands.  An alternate approach is to combine the commands into a single program, and use sub-parsers to handle each portion of the command-line.  The result works in the way ``svn``, ``hg``, and other programs with multiple command-line actions, or sub-commands, does."
msgstr ""

#: ../../source/argparse/index.rst:876
msgid "A program to work with directories on the file system might define commands for creating, deleting, and listing the contents of a directory."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_subparsers.py"
msgstr ""

#: ../../source/argparse/index.rst:884
msgid "The help output shows the named sub-parsers as \"commands\" that can be specified on the command-line as positional arguments."
msgstr ""

#: ../../source/argparse/index.rst:908
msgid "Each sub-parser also has its own help, describing the arguments and options for that command."
msgstr ""

#: ../../source/argparse/index.rst:931
msgid "And when the arguments are parsed, the ``Namespace`` object returned by ``parse_args()`` includes only the values related to the command specified."
msgstr ""

#: ../../source/argparse/index.rst:949
msgid "Advanced Argument Processing"
msgstr ""

#: ../../source/argparse/index.rst:951
msgid "The examples so far have shown simple Boolean flags, options with string or numerical arguments, and positional arguments. ``argparse`` also supports sophisticated argument specification for variable-length argument list, enumerations, and constant values."
msgstr ""

#: ../../source/argparse/index.rst:957
msgid "Variable Argument Lists"
msgstr ""

#: ../../source/argparse/index.rst:959
msgid "A single argument definition can be configured to consume multiple arguments on the command-line being parsed.  Set ``nargs`` to one of the flag values from :table:`Flags for Variable Argument Definitions in argparse`, based on the number of required or expected arguments."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "Flags for Variable Argument Definitions in argparse"
msgstr ""

#: ../../source/argparse/index.rst:967
msgid "Value"
msgstr ""

#: ../../source/argparse/index.rst:967
msgid "Meaning"
msgstr ""

#: ../../source/argparse/index.rst:969
msgid "``N``"
msgstr ""

#: ../../source/argparse/index.rst:969
msgid "The absolute number of arguments (e.g., ``3``)."
msgstr ""

#: ../../source/argparse/index.rst:970
msgid "``?``"
msgstr ""

#: ../../source/argparse/index.rst:970
msgid "0 or 1 arguments"
msgstr ""

#: ../../source/argparse/index.rst:971
msgid "``*``"
msgstr ""

#: ../../source/argparse/index.rst:971
msgid "0 or all arguments"
msgstr ""

#: ../../source/argparse/index.rst:972
msgid "``+``"
msgstr ""

#: ../../source/argparse/index.rst:972
msgid "All, and at least one, argument"
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_nargs.py"
msgstr ""

#: ../../source/argparse/index.rst:979
msgid "The parser enforces the argument count instructions and generates an accurate syntax diagram as part of the command help text."
msgstr ""

#: ../../source/argparse/index.rst:1062
msgid "Argument Types"
msgstr ""

#: ../../source/argparse/index.rst:1064
msgid "``argparse`` treats all argument values as strings, unless it is told to convert the string to another type.  The ``type`` parameter to ``add_argument()`` defines a converter function, which is used by the ``ArgumentParser`` to transform the argument value from a string to some other type."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_type.py"
msgstr ""

#: ../../source/argparse/index.rst:1074
msgid "Any callable that takes a single string argument can be passed as ``type``, including built-in types like ``int`` and ``float`` or even ``open()``."
msgstr ""

#: ../../source/argparse/index.rst:1102
msgid "If the type conversion fails, ``argparse`` raises an exception. ``TypeError`` and ``ValueError`` exceptions are trapped automatically and converted to a simple error message for the user. Other exceptions, such as the ``IOError`` in the next example where the input file does not exist, must be handled by the caller."
msgstr ""

#: ../../source/argparse/index.rst:1139
msgid "To limit an input argument to a value within a pre-defined set, use the ``choices`` parameter."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_choices.py"
msgstr ""

#: ../../source/argparse/index.rst:1146
msgid "If the argument to ``--mode`` is not one of the allowed values, an error is generated and processing stops."
msgstr ""

#: ../../source/argparse/index.rst:1180
msgid "File Arguments"
msgstr ""

#: ../../source/argparse/index.rst:1182
msgid "Although ``file`` objects can be instantiated with a single string argument, that does not include the access mode argument. ``FileType`` provides a more flexible way of specifying that an argument should be a file, including the mode and buffer size."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_FileType.py"
msgstr ""

#: ../../source/argparse/index.rst:1191
msgid "The value associated with the argument name is the open file handle. The application is responsible for closing the file when it is no longer being used."
msgstr ""

#: ../../source/argparse/index.rst:1236
msgid "Custom Actions"
msgstr ""

#: ../../source/argparse/index.rst:1238
msgid "In addition to the built-in actions described earlier, custom actions can be defined by providing an object that implements the Action API. The object passed to ``add_argument()`` as ``action`` should take parameters describing the argument being defined (all the same arguments given to ``add_argument()``) and return a callable object that takes as parameters the ``parser`` processing the arguments, the ``namespace`` holding the parse results, the ``value`` of the argument being acted on, and the ``option_string`` that triggered the action."
msgstr ""

#: ../../source/argparse/index.rst:1247
msgid "A class ``Action`` is provided as a convenient starting point for defining new actions.  The constructor handles the argument definitions, so only ``__call__()`` needs to be overridden in the subclass."
msgstr ""

#: ../../source/argparse/index.rst:0
msgid "argparse_custom_action.py"
msgstr ""

#: ../../source/argparse/index.rst:1256
msgid "The type of ``values`` depends on the value of ``nargs``.  If the argument allows multiple values, ``values`` will be a list even if it only contains one item."
msgstr ""

#: ../../source/argparse/index.rst:1260
msgid "The value of ``option_string`` also depends on the original argument specification.  For positional required arguments, ``option_string`` is always ``None``."
msgstr ""

#: ../../source/argparse/index.rst:1299
msgid ":pydoc:`argparse`"
msgstr ""

#: ../../source/argparse/index.rst:1301
msgid ":mod:`configparser` -- Read and write configuration files."
msgstr ""

#: ../../source/argparse/index.rst:1303
msgid ":mod:`shlex` -- Parse shell-like syntaxes."
msgstr ""

#: ../../source/argparse/index.rst:1305
msgid ":ref:`Python 2 to 3 porting notes for argparse <porting-argparse>`"
msgstr ""

