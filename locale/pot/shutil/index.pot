# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/shutil/index.rst:3
msgid "shutil --- High-level File Operations"
msgstr ""

#: ../../source/shutil/index.rst:8
msgid "High-level file operations."
msgstr ""

#: ../../source/shutil/index.rst:10
msgid "The ``shutil`` module includes high-level file operations such as copying and archiving."
msgstr ""

#: ../../source/shutil/index.rst:14
msgid "Copying Files"
msgstr ""

#: ../../source/shutil/index.rst:16
msgid "``copyfile()`` copies the contents of the source to the destination and raises ``IOError`` if it does not have permission to write to the destination file."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copyfile.py"
msgstr ""

#: ../../source/shutil/index.rst:24
msgid "Because the function opens the input file for reading, regardless of its type, special files (such as Unix device nodes) cannot be copied as new special files with ``copyfile()``."
msgstr ""

#: ../../source/shutil/index.rst:45
msgid "The implementation of ``copyfile()`` uses the lower-level function ``copyfileobj()``. While the arguments to ``copyfile()`` are filenames, the arguments to ``copyfileobj()`` are open file handles. The optional third argument is a buffer length to use for reading in blocks."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copyfileobj.py"
msgstr ""

#: ../../source/shutil/index.rst:55
msgid "The default behavior is to read using large blocks.  Use ``-1`` to read all of the input at one time or another positive integer to set a specific block size.  This example uses several different block sizes to show the effect."
msgstr ""

#: ../../source/shutil/index.rst:82
msgid "The ``copy()`` function interprets the output name like the Unix command line tool ``cp``. If the named destination refers to a directory instead of a file, a new file is created in the directory using the base name of the source."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copy.py"
msgstr ""

#: ../../source/shutil/index.rst:91
msgid "The permissions of the file are copied along with the contents."
msgstr ""

#: ../../source/shutil/index.rst:108
msgid "``copy2()`` works like ``copy()``, but includes the access and modification times in the metadata copied to the new file."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copy2.py"
msgstr ""

#: ../../source/shutil/index.rst:115
msgid "The new file has all of the same characteristics as the old version."
msgstr ""

#: ../../source/shutil/index.rst:140
msgid "Copying File Metadata"
msgstr ""

#: ../../source/shutil/index.rst:142
msgid "By default when a new file is created under Unix, it receives permissions based on the umask of the current user. To copy the permissions from one file to another, use ``copymode()``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copymode.py"
msgstr ""

#: ../../source/shutil/index.rst:150
msgid "This example script creates a file to be modified, then uses ``copymode()`` to duplicate the permissions of the script to the example file."
msgstr ""

#: ../../source/shutil/index.rst:168
msgid "To copy other metadata about the file use ``copystat()``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copystat.py"
msgstr ""

#: ../../source/shutil/index.rst:174
msgid "Only the permissions and dates associated with the file are duplicated with ``copystat()``."
msgstr ""

#: ../../source/shutil/index.rst:202
msgid "Working With Directory Trees"
msgstr ""

#: ../../source/shutil/index.rst:204
msgid "``shutil`` includes three functions for working with directory trees. To copy a directory from one place to another, use ``copytree()``. It recurses through the source directory tree, copying files to the destination. The destination directory must not exist in advance."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copytree.py"
msgstr ""

#: ../../source/shutil/index.rst:214
msgid "The ``symlinks`` argument controls whether symbolic links are copied as links or as files. The default is to copy the contents to new files. If the option is true, new symlinks are created within the destination tree."
msgstr ""

#: ../../source/shutil/index.rst:257
msgid "``copytree()`` accepts two callable arguments to control its behavior. The ``ignore`` argument is called with the name of each directory or subdirectory being copied along with a list of the contents of the directory. It should return a list of items that should be copied. The ``copy_function`` argument is called to actually copy the file."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_copytree_verbose.py"
msgstr ""

#: ../../source/shutil/index.rst:268
msgid "In the example, ``ignore_patterns()`` is used to create an ignore function to skip copying Python source files. ``verbose_copy()`` prints the names of files as they are copied then uses ``copy2()``, the default copy function, to make the copies."
msgstr ""

#: ../../source/shutil/index.rst:304
msgid "To remove a directory and its contents, use ``rmtree()``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_rmtree.py"
msgstr ""

#: ../../source/shutil/index.rst:310
msgid "Errors are raised as exceptions by default, but can be ignored if the second argument is true, and a special error handler function can be provided in the third argument."
msgstr ""

#: ../../source/shutil/index.rst:333
msgid "To move a file or directory from one place to another, use ``move()``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_move.py"
msgstr ""

#: ../../source/shutil/index.rst:340
msgid "The semantics are similar to those of the Unix command ``mv``. If the source and destination are within the same file system, the source is renamed.  Otherwise the source is copied to the destination and then the source is removed."
msgstr ""

#: ../../source/shutil/index.rst:361
msgid "Finding Files"
msgstr ""

#: ../../source/shutil/index.rst:363
msgid "The ``which()`` function scans a search path looking for a named file. The typical use case is to find an executable program on the shell's search path defined in the environment variable ``PATH``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_which.py"
msgstr ""

#: ../../source/shutil/index.rst:371
msgid "If no file matching the search parameters can be found, ``which()`` returns ``None``."
msgstr ""

#: ../../source/shutil/index.rst:388
msgid "``which()`` takes arguments to filter based on the permissions the file has, and the search path to examine. The ``path`` argument defaults to ``os.environ('PATH')``, but can be any string containing directory names separated by ``os.pathsep``. The ``mode`` argument should be a bitmask matching the permissions of the file. By default the mask looks for executable files, but the following example uses a readable bitmask and an alternate search path to find a configuration file."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_which_regular_file.py"
msgstr ""

#: ../../source/shutil/index.rst:400
msgid "There is still a race condition searching for readable files this way, because in the time between finding the file and actually trying to use it, the file can be deleted or its permissions can be changed."
msgstr ""

#: ../../source/shutil/index.rst:419
msgid "Archives"
msgstr ""

#: ../../source/shutil/index.rst:421
msgid "Python's standard library includes many modules for managing archive files such as :mod:`tarfile` and :mod:`zipfile`. There are also several higher-level functions for creating and extracting archives in ``shutil``. ``get_archive_formats()`` returns a sequence of names and descriptions for formats supported on the current system."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_get_archive_formats.py"
msgstr ""

#: ../../source/shutil/index.rst:431
msgid "The formats supported depend on which modules and underlying libraries are available, so the output for this example may change based on where it is run."
msgstr ""

#: ../../source/shutil/index.rst:451
msgid "Use ``make_archive()`` to create a new archive file. Its inputs are designed to best support archiving an entire directory and all of its contents, recursively. By default it uses the current working directory, so that all of the files and subdirectories appear at the top level of the archive. To change that behavior, use the ``root_dir`` argument to move to a new relative position on the filesystem and the ``base_dir`` argument to specify a directory to add to the archive."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_make_archive.py"
msgstr ""

#: ../../source/shutil/index.rst:463
msgid "This example starts within the source directory for the examples for ``shutil`` and moves up one level in the file system, then adds the ``shutil`` directory to a tar archive compressed with gzip. The :mod:`logging` module is configured to show messages from ``make_archive()`` about what it is doing."
msgstr ""

#: ../../source/shutil/index.rst:508
msgid "``shutil`` maintains a registry of formats that can be unpacked on the current system, accessible via ``get_unpack_formats()``."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_get_unpack_formats.py"
msgstr ""

#: ../../source/shutil/index.rst:515
msgid "This registry is different from the registry for creating archives because it also includes common file extensions used for each format so that the function for extracting an archive can guess which format to use based on the file extension."
msgstr ""

#: ../../source/shutil/index.rst:536
msgid "Extract the archive with ``unpack_archive()``, passing the archive file name and optionally the directory where it should be extracted. If no directory is given, the current directory is used."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_unpack_archive.py"
msgstr ""

#: ../../source/shutil/index.rst:544
msgid "In this example ``unpack_archive()`` is able to determine the format of the archive because the filename ends with ``tar.gz``, and that value is associated with the ``gztar`` format in the unpack format registry."
msgstr ""

#: ../../source/shutil/index.rst:586
msgid "File System Space"
msgstr ""

#: ../../source/shutil/index.rst:588
msgid "It can be useful to examine the local file system to see how much space is available before performing a long running operation that may exhaust that space. ``disk_usage()`` returns a tuple with the total space, the amount currently being used, and the amount remaining free."
msgstr ""

#: ../../source/shutil/index.rst:0
msgid "shutil_disk_usage.py"
msgstr ""

#: ../../source/shutil/index.rst:597
msgid "The values returned by ``disk_usage()`` are the number of bytes, so the example program converts them to more readable units before printing them."
msgstr ""

#: ../../source/shutil/index.rst:619
msgid ":pydoc:`shutil`"
msgstr ""

#: ../../source/shutil/index.rst:621
msgid ":doc:`/compression` -- Modules for dealing with archive and compression formats."
msgstr ""

