# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/csv/index.rst:3
msgid "csv --- Comma-separated Value Files"
msgstr ""

#: ../../source/csv/index.rst:8
msgid "Read and write comma separated value files."
msgstr ""

#: ../../source/csv/index.rst:10
msgid "The ``csv`` module can be used to work with data exported from spreadsheets and databases into text files formatted with fields and records, commonly referred to as *comma-separated value* (CSV) format because commas are often used to separate the fields in a record."
msgstr ""

#: ../../source/csv/index.rst:16
msgid "Reading"
msgstr ""

#: ../../source/csv/index.rst:18
msgid "Use ``reader()`` to create a an object for reading data from a CSV file.  The reader can be used as an iterator to process the rows of the file in order. For example"
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_reader.py"
msgstr ""

#: ../../source/csv/index.rst:26
msgid "The first argument to ``reader()`` is the source of text lines. In this case, it is a file, but any iterable is accepted (a :mod:`StringIO` instance, ``list``, etc.).  Other optional arguments can be given to control how the input data is parsed."
msgstr ""

#: ../../source/csv/index.rst:33
msgid "As it is read, each row of the input data is parsed and converted to a ``list`` of strings."
msgstr ""

#: ../../source/csv/index.rst:51
msgid "The parser handles line breaks embedded within strings in a row, which is why a \"row\" is not always the same as a \"line\" of input from the file."
msgstr ""

#: ../../source/csv/index.rst:57
msgid "Fields with line breaks in the input retain the internal line breaks when they are returned by the parser."
msgstr ""

#: ../../source/csv/index.rst:74
msgid "Writing"
msgstr ""

#: ../../source/csv/index.rst:76
msgid "Writing CSV files is just as easy as reading them. Use ``writer()`` to create an object for writing, then iterate over the rows, using ``writerow()`` to print them."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_writer.py"
msgstr ""

#: ../../source/csv/index.rst:84
msgid "The output does not look exactly like the exported data used in the reader example because it lacks quotes around some of the values."
msgstr ""

#: ../../source/csv/index.rst:106
msgid "Quoting"
msgstr ""

#: ../../source/csv/index.rst:108
msgid "The default quoting behavior is different for the writer, so the second and third columns in the previous example are not quoted. To add quoting, set the ``quoting`` argument to one of the other quoting modes."
msgstr ""

#: ../../source/csv/index.rst:117
msgid "In this case, ``QUOTE_NONNUMERIC`` adds quotes around all columns that contain values that are not numbers."
msgstr ""

#: ../../source/csv/index.rst:136
msgid "There are four different quoting options, defined as constants in the csv module."
msgstr ""

#: ../../source/csv/index.rst:140
msgid "``QUOTE_ALL``"
msgstr ""

#: ../../source/csv/index.rst:140
msgid "Quote everything, regardless of type."
msgstr ""

#: ../../source/csv/index.rst:144
#: ../../source/csv/index.rst:253
msgid "``QUOTE_MINIMAL``"
msgstr ""

#: ../../source/csv/index.rst:143
msgid "Quote fields with special characters (anything that would confuse a parser configured with the same dialect and options). This is the default"
msgstr ""

#: ../../source/csv/index.rst:148
msgid "``QUOTE_NONNUMERIC``"
msgstr ""

#: ../../source/csv/index.rst:147
msgid "Quote all fields that are not integers or floats. When used with the reader, input fields that are not quoted are converted to floats."
msgstr ""

#: ../../source/csv/index.rst:154
msgid "``QUOTE_NONE``"
msgstr ""

#: ../../source/csv/index.rst:151
msgid "Do not quote anything on output. When used with the reader, quote characters are included in the field values (normally, they are treated as delimiters and stripped)."
msgstr ""

#: ../../source/csv/index.rst:157
msgid "Dialects"
msgstr ""

#: ../../source/csv/index.rst:159
msgid "There is no well-defined standard for comma-separated value files, so the parser needs to be flexible.  This flexibility means there are many parameters to control how ``csv`` parses or writes data. Rather than passing each of these parameters to the reader and writer separately, they are grouped together into a *dialect* object."
msgstr ""

#: ../../source/csv/index.rst:165
msgid "Dialect classes can be registered by name, so that callers of the ``csv`` module do not need to know the parameter settings in advance.  The complete list of registered dialects can be retrieved with ``list_dialects()``."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_list_dialects.py"
msgstr ""

#: ../../source/csv/index.rst:174
msgid "The standard library includes three dialects: ``excel``, ``excel-tabs``, and ``unix``. The ``excel`` dialect is for working with data in the default export format for Microsoft Excel, and also works with LibreOffice_. The ``unix`` dialect quotes all fields with double-quotes and uses ``\\n`` as the record separator."
msgstr ""

#: ../../source/csv/index.rst:193
msgid "Creating a Dialect"
msgstr ""

#: ../../source/csv/index.rst:195
msgid "If, instead of using commas to delimit fields, the input file uses pipes (``|``), like this"
msgstr ""

#: ../../source/csv/index.rst:200
msgid "a new dialect can be registered using the appropriate delimiter."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_dialect.py"
msgstr ""

#: ../../source/csv/index.rst:206
msgid "Using the \"pipes\" dialect, the file can be read just as with the comma-delimited file."
msgstr ""

#: ../../source/csv/index.rst:223
msgid "Dialect Parameters"
msgstr ""

#: ../../source/csv/index.rst:225
msgid "A dialect specifies all of the tokens used when parsing or writing a data file.  :table:`CSV Dialect Parameters` lists the aspects of the file format that can be specified, from the way columns are delimited to the character used to escape a token."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "CSV Dialect Parameters"
msgstr ""

#: ../../source/csv/index.rst:234
msgid "Attribute"
msgstr ""

#: ../../source/csv/index.rst:235
msgid "Default"
msgstr ""

#: ../../source/csv/index.rst:236
msgid "Meaning"
msgstr ""

#: ../../source/csv/index.rst:237
msgid "delimiter"
msgstr ""

#: ../../source/csv/index.rst:238
msgid "``,``"
msgstr ""

#: ../../source/csv/index.rst:239
msgid "Field separator (one character)"
msgstr ""

#: ../../source/csv/index.rst:240
msgid "doublequote"
msgstr ""

#: ../../source/csv/index.rst:241
msgid "True"
msgstr ""

#: ../../source/csv/index.rst:242
msgid "Flag controlling whether quotechar instances are doubled"
msgstr ""

#: ../../source/csv/index.rst:243
msgid "escapechar"
msgstr ""

#: ../../source/csv/index.rst:244
msgid "None"
msgstr ""

#: ../../source/csv/index.rst:245
msgid "Character used to indicate an escape sequence"
msgstr ""

#: ../../source/csv/index.rst:246
msgid "lineterminator"
msgstr ""

#: ../../source/csv/index.rst:247
msgid "``\\r\\n``"
msgstr ""

#: ../../source/csv/index.rst:248
msgid "String used by writer to terminate a line"
msgstr ""

#: ../../source/csv/index.rst:249
msgid "quotechar"
msgstr ""

#: ../../source/csv/index.rst:250
msgid "``\"``"
msgstr ""

#: ../../source/csv/index.rst:251
msgid "String to surround fields containing special values (one character)"
msgstr ""

#: ../../source/csv/index.rst:252
msgid "quoting"
msgstr ""

#: ../../source/csv/index.rst:254
msgid "Controls quoting behavior described earlier"
msgstr ""

#: ../../source/csv/index.rst:255
msgid "skipinitialspace"
msgstr ""

#: ../../source/csv/index.rst:256
msgid "False"
msgstr ""

#: ../../source/csv/index.rst:257
msgid "Ignore whitespace after the field delimiter"
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_dialect_variations.py"
msgstr ""

#: ../../source/csv/index.rst:263
msgid "This program shows how the same data appears when formatted using several different dialects."
msgstr ""

#: ../../source/csv/index.rst:323
msgid "Automatically Detecting Dialects"
msgstr ""

#: ../../source/csv/index.rst:325
msgid "The best way to configure a dialect for parsing an input file is to know the correct settings in advance.  For data where the dialect parameters are unknown, the ``Sniffer`` class can be used to make an educated guess.  The ``sniff()`` method takes a sample of the input data and an optional argument giving the possible delimiter characters."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_dialect_sniffer.py"
msgstr ""

#: ../../source/csv/index.rst:336
msgid "``sniff()`` returns a ``Dialect`` instance with the settings to be used for parsing the data.  The results are not always perfect, as demonstrated by the \"escaped\" dialect in the example."
msgstr ""

#: ../../source/csv/index.rst:394
msgid "Using Field Names"
msgstr ""

#: ../../source/csv/index.rst:396
msgid "In addition to working with sequences of data, the ``csv`` module includes classes for working with rows as dictionaries so that the fields can be named. The ``DictReader`` and ``DictWriter`` classes translate rows to dictionaries instead of lists. Keys for the dictionary can be passed in, or inferred from the first row in the input (when the row contains headers)."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_dictreader.py"
msgstr ""

#: ../../source/csv/index.rst:407
msgid "The dictionary-based reader and writer are implemented as wrappers around the sequence-based classes, and use the same methods and arguments. The only difference in the reader API is that rows are returned as dictionaries instead of lists or tuples."
msgstr ""

#: ../../source/csv/index.rst:429
msgid "The ``DictWriter`` must be given a list of field names so it knows how to order the columns in the output."
msgstr ""

#: ../../source/csv/index.rst:0
msgid "csv_dictwriter.py"
msgstr ""

#: ../../source/csv/index.rst:436
msgid "The field names are not written to the file automatically, but they can be written explicitly using the ``writeheader()`` method."
msgstr ""

#: ../../source/csv/index.rst:457
msgid ":pydoc:`csv`"
msgstr ""

#: ../../source/csv/index.rst:459
msgid ":pep:`305` -- CSV File API"
msgstr ""

#: ../../source/csv/index.rst:461
msgid ":ref:`Python 2 to 3 porting notes for csv <porting-csv>`"
msgstr ""

