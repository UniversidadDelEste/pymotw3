# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/ssl.rst:3
msgid "Using SSL"
msgstr ""

#: ../../source/asyncio/ssl.rst:5
msgid "``asyncio`` has built-in support for enabling SSL communication on sockets. Passing an ``SSLContext`` instance to the coroutines that create server or client connections enables the support and ensures that the SSL protocol setup is taken care of before the socket is presented as ready for the application to use."
msgstr ""

#: ../../source/asyncio/ssl.rst:11
msgid "The coroutine-based echo server and client from the previous section can be updated with a few small changes. The first step is to create the certificate and key files. A self-signed certificate can be created with a command like:"
msgstr ""

#: ../../source/asyncio/ssl.rst:21
msgid "The ``openssl`` command will prompt for several values that are used to generate the certificate, and then produce the output files requested."
msgstr ""

#: ../../source/asyncio/ssl.rst:25
msgid "The insecure socket setup in the previous server example uses ``start_server()`` to create the listening socket."
msgstr ""

#: ../../source/asyncio/ssl.rst:31
msgid "To add encryption, create an ``SSLContext`` with the certificate and key just generated and then pass the context to ``start_server()``."
msgstr ""

#: ../../source/asyncio/ssl.rst:38
msgid "Similar changes are needed in the client. The old version uses ``open_connection()`` to create the socket connected to the server."
msgstr ""

#: ../../source/asyncio/ssl.rst:44
msgid "An ``SSLContext`` is needed again to secure the client-side of the socket. Client identity is not being enforced, so only the certificate needs to be loaded."
msgstr ""

#: ../../source/asyncio/ssl.rst:51
msgid "One other small changes is needed in the client. Because the SSL connection does not support sending an end-of-file (EOF), the client uses a NULL byte as a message terminator instead."
msgstr ""

#: ../../source/asyncio/ssl.rst:55
msgid "The old version of the client send loop uses ``write_eof()``."
msgstr ""

#: ../../source/asyncio/ssl.rst:60
msgid "The new version sends a zero byte (``b'\\x00'``)."
msgstr ""

#: ../../source/asyncio/ssl.rst:65
msgid "The ``echo()`` coroutine in the server must look for the NULL byte and close the client connection when it is received."
msgstr ""

#: ../../source/asyncio/ssl.rst:71
msgid "Running the server in one window, and the client in another, produces this output."
msgstr ""

