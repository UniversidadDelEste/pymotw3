# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/control.rst:3
msgid "Composing Coroutines with Control Structures"
msgstr ""

#: ../../source/asyncio/control.rst:5
msgid "Linear control flow between a series of coroutines is easy to manage with the built-in language keyword ``await``. More complicated structures allowing one coroutine to wait for several others to complete in parallel are also possible using tools in ``asyncio``."
msgstr ""

#: ../../source/asyncio/control.rst:11
msgid "Waiting for Multiple Coroutines"
msgstr ""

#: ../../source/asyncio/control.rst:13
msgid "It is often useful to divide one operation into many parts and execute them separately. For example, downloading several remote resources or querying remote APIs. In situations where the order of execution doesn't matter, and where there may be an arbitrary number of operations, ``wait()`` can be used to pause one coroutine until the other background operations complete."
msgstr ""

#: ../../source/asyncio/control.rst:0
msgid "asyncio_wait.py"
msgstr ""

#: ../../source/asyncio/control.rst:24
msgid "Internally, ``wait()`` uses a ``set`` to hold the ``Task`` instances it creates. This results in them starting, and finishing, in an unpredictable order.  The return value from ``wait()`` is a tuple containing two sets holding the finished and pending tasks."
msgstr ""

#: ../../source/asyncio/control.rst:49
msgid "There will only be pending operations left if ``wait()`` is used with a timeout value."
msgstr ""

#: ../../source/asyncio/control.rst:0
msgid "asyncio_wait_timeout.py"
msgstr ""

#: ../../source/asyncio/control.rst:56
msgid "Those remaining background operations should either be cancelled or finished by waiting for them. Leaving them pending while the event loop continues will let them execute further, which may not be desirable if the overall operation is considered aborted. Leaving them pending at the end of the process will result in warnings being reported."
msgstr ""

#: ../../source/asyncio/control.rst:86
msgid "Gathering Results from Coroutines"
msgstr ""

#: ../../source/asyncio/control.rst:88
msgid "If the background phases are well-defined, and only the results of those phases matter, then ``gather()`` may be more useful for waiting for multiple operations."
msgstr ""

#: ../../source/asyncio/control.rst:0
msgid "asyncio_gather.py"
msgstr ""

#: ../../source/asyncio/control.rst:96
msgid "The tasks created by gather are not exposed, so they cannot be cancelled. The return value is a list of results in the same order as the arguments passed to ``gather()``, regardless of the order the background operations actually completed."
msgstr ""

#: ../../source/asyncio/control.rst:120
msgid "Handling Background Operations as They Finish"
msgstr ""

#: ../../source/asyncio/control.rst:122
msgid "``as_completed()`` is a generator that manages the execution of a list of coroutines given to it and produces their results one at a time as they finish running. As with ``wait()``, order is not guaranteed by ``as_completed()``, but it is not necessary to wait for all of the background operations to complete before taking other action."
msgstr ""

#: ../../source/asyncio/control.rst:0
msgid "asyncio_as_completed.py"
msgstr ""

#: ../../source/asyncio/control.rst:133
msgid "This example starts several background phases that finish in the reverse order from which they start. As the generator is consumed, the loop waits for the result of the coroutine using ``await``."
msgstr ""

