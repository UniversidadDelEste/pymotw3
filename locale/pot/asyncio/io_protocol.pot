# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/io_protocol.rst:3
msgid "Asynchronous I/O with Protocol Class Abstractions"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:5
msgid "Up to this point the examples have all avoided mingling concurrency and I/O operations to focus on one concept at a time. However, switching contexts when I/O blocks is one of the primary use cases for ``asyncio``. Building on the concurrency concepts already introduced, this section examines two sample programs implementing a simple echo server and client, similar to the examples used in the :mod:`socket` and :mod:`socketserver` sections. A client can connect to the server, send some data, and then receive the same data as a response. Each time an I/O operation is initiated, the executing code gives up control to the event loop, allowing other tasks to run until the I/O is ready."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:18
msgid "Echo Server"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:20
msgid "The server starts by importing the modules it needs to set up ``asyncio`` and :mod:`logging`, and then it creates an event loop object."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:0
msgid "asyncio_echo_server_protocol.py"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:28
msgid "It then defines a subclass of ``asyncio.Protocol`` to handle client communication. The protocol object's methods are invoked based on events associated with the server socket."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:35
msgid "Each new client connection triggers a call to ``connection_made()``. The transport argument is an instance of ``asyncio.Transport``, which provides an abstraction for doing asynchronous I/O using the socket. Different types of communication provide different transport implementations, all with the same API. For example, there are separate transport classes for working with sockets and for working with pipes to subprocesses. The address of the incoming client is available from the transport through ``get_extra_info()``, an implementation-specific method."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:48
msgid "After a connection is established, when data is sent from the client to the server the ``data_received()`` method of the protocol is invoked to pass the data in for processing. Data is passed as a byte string, and it is up to the application to decode it in an appropriate way. Here the results are logged, and then a response is sent back to the client immediately by calling ``transport.write()``."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:58
msgid "Some transports support a special end-of-file indicator (\"EOF\"). When an EOF is encountered, the ``eof_received()`` method is called. In this implementation, the EOF is sent back to the client to indicate that it was received. Because not all transports support an explicit EOF, this protocol asks the transport first whether it is safe to send EOF."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:68
msgid "When a connection is closed, either normally or as the result of an error, the protocol's ``connection_lost()`` method is called. If there was an error, the argument contains an appropriate exception object. Otherwise it is ``None``."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:76
msgid "There are two steps to starting the server. First the application tells the event loop to create a new server object using the protocol class and the hostname and socket on which to listen. The ``create_server()`` method is a coroutine, so the results must be processed by the event loop in order to actually start the server. Completing the coroutine produces a ``asyncio.Server`` instance tied to the event loop."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:87
msgid "Then the event loop needs to be run in order to process events and handle client requests. For a long-running service, the ``run_forever()`` method is the simplest way to do this.  When the event loop is stopped, either by the application code or by signaling the process, the server can be closed to clean up the socket properly, and then the event loop can be closed to finish handling any other coroutines before the program exits."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:99
msgid "Echo Client"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:101
msgid "Constructing a client using a protocol class is very similar to constructing a server.  The code again starts by importing the modules it needs to set up ``asyncio`` and :mod:`logging`, and then creating an event loop object."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:0
msgid "asyncio_echo_client_protocol.py"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:110
msgid "The client protocol class defines the same methods as the server, with different implementations. The class constructor accepts two arguments, a list of the messages to send and a ``Future`` instance to use to signal that the client has completed a cycle of work by receiving a response from the server."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:119
msgid "When the client successfully connects to the server, it starts communicating immediately.  The sequence of messages is sent one at a time, although the underlying networking code may combine multiple messages into one transmission. When all of the messages are exhausted, an EOF is sent."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:125
msgid "Although it appears that the data is all being sent immediately, in fact the transport object buffers the outgoing data and sets up a callback to actually transmit when the socket's buffer is ready to receive data. This is all handled transparently, so the application code can be written as though the I/O operation is happening right away."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:135
msgid "When the response from the server is received, it is logged."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:140
msgid "And when either an end-of-file marker is received or the connection is closed from the server's side, the local transport object is closed and the future object is marked as done by setting a result."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:147
msgid "Normally the protocol class is passed to the event loop to create the connection. In this case, because the event loop has no facility for passing extra arguments to the protocol constructor, it is necessary to create a ``partial`` to wrap the client class and pass the list of messages to send and the ``Future`` instance. That new callable is then used in place of the class when calling ``create_connection()`` to establish the client connection."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:158
msgid "To trigger the client to run, the event loop is called once with the coroutine for creating the client and then again with the ``Future`` instance given to the client to communicate when it is finished. Using two calls like this avoids having an infinite loop in the client program, which likely wants to exit after it has finished communicating with the server. If only the first call was used to wait for the coroutine to create the client, it might not process all of the response data and clean up the connection to the server properly."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:171
msgid "Output"
msgstr ""

#: ../../source/asyncio/io_protocol.rst:173
msgid "Running the server in one window and the client in another produces the following output."
msgstr ""

#: ../../source/asyncio/io_protocol.rst:216
msgid "Although the client always sends the messages separately, the first time the client runs the server receives one large message and echoes that back to the client. These results vary in subsequent runs, based on how busy the network is and whether the network buffers are flushed before all of the data is prepared."
msgstr ""

