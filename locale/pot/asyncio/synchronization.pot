# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/asyncio/synchronization.rst:3
msgid "Synchronization Primitives"
msgstr ""

#: ../../source/asyncio/synchronization.rst:5
msgid "Although ``asyncio`` applications usually run as a single-threaded process, they are still built as concurrent applications. Each coroutine or task may execute in an unpredictable order, based on delays and interrupts from I/O and other external events. To support safe concurrency, ``asyncio`` includes implementations of some of the same low-level primitives found in the :mod:`threading` and :mod:`multiprocessing` modules."
msgstr ""

#: ../../source/asyncio/synchronization.rst:14
msgid "Locks"
msgstr ""

#: ../../source/asyncio/synchronization.rst:16
msgid "A ``Lock`` can be used to guard access to a shared resource. Only the holder of the lock can use the resource. Multiple attempts to acquire the lock will block so that there is only one holder at a time."
msgstr ""

#: ../../source/asyncio/synchronization.rst:0
msgid "asyncio_lock.py"
msgstr ""

#: ../../source/asyncio/synchronization.rst:25
msgid "A lock can be invoked directly, using ``await`` to acquire it and calling the ``release()`` method when done as in ``coro2()`` in this example. They also can be used as asynchronous context managers with the ``with await`` keywords, as in ``coro1()``."
msgstr ""

#: ../../source/asyncio/synchronization.rst:52
msgid "Events"
msgstr ""

#: ../../source/asyncio/synchronization.rst:54
msgid "An ``asyncio.Event`` is based on ``threading.Event``, and is used to allow multiple consumers to wait for something to happen without looking for a specific value to be associated with the notification."
msgstr ""

#: ../../source/asyncio/synchronization.rst:0
msgid "asyncio_event.py"
msgstr ""

#: ../../source/asyncio/synchronization.rst:63
msgid "As with the ``Lock``, both ``coro1()`` and ``coro2()`` wait for the event to be set. The difference is that both can start as soon as the event state changes, and they do not need to acquire a unique hold on the event object."
msgstr ""

#: ../../source/asyncio/synchronization.rst:87
msgid "Conditions"
msgstr ""

#: ../../source/asyncio/synchronization.rst:89
msgid "A ``Condition`` works similarly to an ``Event`` except that rather than notifying all waiting coroutines the number of waiters awakened is controlled with an argument to ``notify()``."
msgstr ""

#: ../../source/asyncio/synchronization.rst:0
msgid "asyncio_condition.py"
msgstr ""

#: ../../source/asyncio/synchronization.rst:97
msgid "This example starts five consumers of the ``Condition``. Each uses the ``wait()`` method to wait for a notification that they can proceed. ``manipulate_condition()`` notifies one consumer, then two consumers, then all of the remaining consumers."
msgstr ""

#: ../../source/asyncio/synchronization.rst:134
msgid "Queues"
msgstr ""

#: ../../source/asyncio/synchronization.rst:136
msgid "An ``asyncio.Queue`` provides a first-in, first-out data structure for coroutines like a ``queue.Queue`` does for threads or a ``multiprocessing.Queue`` does for processes."
msgstr ""

#: ../../source/asyncio/synchronization.rst:0
msgid "asyncio_queue.py"
msgstr ""

#: ../../source/asyncio/synchronization.rst:144
msgid "Adding items with ``put()`` or removing items with ``get()`` are both asynchronous operations, since the queue size might be fixed (blocking an addition) or the queue might be empty (blocking a call to fetch an item)."
msgstr ""

