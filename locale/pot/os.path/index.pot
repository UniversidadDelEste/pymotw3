# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/os.path/index.rst:3
msgid "os.path --- Platform-independent Manipulation of Filenames"
msgstr ""

#: ../../source/os.path/index.rst:8
msgid "Parse, build, test, and otherwise work on filenames and paths."
msgstr ""

#: ../../source/os.path/index.rst:10
msgid "Writing code to work with files on multiple platforms is easy using the functions included in the ``os.path`` module. Even programs not intended to be ported between platforms should use ``os.path`` for reliable filename parsing."
msgstr ""

#: ../../source/os.path/index.rst:16
msgid "Parsing Paths"
msgstr ""

#: ../../source/os.path/index.rst:18
msgid "The first set of functions in ``os.path`` can be used to parse strings representing filenames into their component parts. It is important to realize that these functions do not depend on the paths actually existing; they operate solely on the strings."
msgstr ""

#: ../../source/os.path/index.rst:23
msgid "Path parsing depends on a few variable defined in :mod:`os`:"
msgstr ""

#: ../../source/os.path/index.rst:25
msgid "``os.sep`` - The separator between portions of the path (e.g., \"``/``\" or \"``\\``\")."
msgstr ""

#: ../../source/os.path/index.rst:28
msgid "``os.extsep`` - The separator between a filename and the file \"extension\" (e.g., \"``.``\")."
msgstr ""

#: ../../source/os.path/index.rst:31
msgid "``os.pardir`` - The path component that means traverse the directory tree up one level (e.g., \"``..``\")."
msgstr ""

#: ../../source/os.path/index.rst:34
msgid "``os.curdir`` - The path component that refers to the current directory (e.g., \"``.``\")."
msgstr ""

#: ../../source/os.path/index.rst:37
msgid "The ``split()`` function breaks the path into two separate parts and returns a ``tuple`` with the results. The second element of the ``tuple`` is the last component of the path, and the first element is everything that comes before it."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_split.py"
msgstr ""

#: ../../source/os.path/index.rst:46
msgid "When the input argument ends in ``os.sep``, the last element of the path is an empty string."
msgstr ""

#: ../../source/os.path/index.rst:65
msgid "The ``basename()`` function returns a value equivalent to the second part of the ``split()`` value."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_basename.py"
msgstr ""

#: ../../source/os.path/index.rst:72
msgid "The full path is stripped down to the last element, whether that refers to a file or directory.  If the path ends in the directory separator (``os.sep``), the base portion is considered to be empty."
msgstr ""

#: ../../source/os.path/index.rst:93
msgid "The ``dirname()`` function returns the first part of the split path:"
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_dirname.py"
msgstr ""

#: ../../source/os.path/index.rst:99
msgid "Combining the results of ``basename()`` with ``dirname()`` gives the original path."
msgstr ""

#: ../../source/os.path/index.rst:118
msgid "``splitext()`` works like ``split()``, but divides the path on the extension separator, rather than the directory separator."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_splitext.py"
msgstr ""

#: ../../source/os.path/index.rst:125
msgid "Only the last occurrence of ``os.extsep`` is used when looking for the extension, so if a filename has multiple extensions the results of splitting it leaves part of the extension on the prefix."
msgstr ""

#: ../../source/os.path/index.rst:148
msgid "``commonprefix()`` takes a list of paths as an argument and returns a single string that represents a common prefix present in all of the paths. The value may represent a path that does not actually exist, and the path separator is not included in the consideration, so the prefix might not stop on a separator boundary."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_commonprefix.py"
msgstr ""

#: ../../source/os.path/index.rst:158
msgid "In this example, the common prefix string is ``/one/two/three``, even though one path does not include a directory named ``three``."
msgstr ""

#: ../../source/os.path/index.rst:177
msgid "``commonpath()`` does honor path separators, and returns a prefix that does not include partial path values."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_commonpath.py"
msgstr ""

#: ../../source/os.path/index.rst:184
msgid "Because ``\"threefold\"`` does not have a path separator after ``\"three\"`` the common prefix is ``/one/two``."
msgstr ""

#: ../../source/os.path/index.rst:204
msgid "Building Paths"
msgstr ""

#: ../../source/os.path/index.rst:206
msgid "Besides taking existing paths apart, it is frequently necessary to build paths from other strings.  To combine several path components into a single value, use ``join()``:"
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_join.py"
msgstr ""

#: ../../source/os.path/index.rst:214
msgid "If any argument to join begins with ``os.sep``, all of the previous arguments are discarded and the new one becomes the beginning of the return value."
msgstr ""

#: ../../source/os.path/index.rst:232
msgid "It is also possible to work with paths that include \"variable\" components that can be expanded automatically. For example, ``expanduser()`` converts the tilde (``~``) character to the name of a user's home directory."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_expanduser.py"
msgstr ""

#: ../../source/os.path/index.rst:241
msgid "If the user's home directory cannot be found, the string is returned unchanged, as with ``~nosuchuser`` in this example."
msgstr ""

#: ../../source/os.path/index.rst:258
msgid "``expandvars()`` is more general, and expands any shell environment variables present in the path."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_expandvars.py"
msgstr ""

#: ../../source/os.path/index.rst:265
msgid "No validation is performed to ensure that the variable value results in the name of a file that already exists."
msgstr ""

#: ../../source/os.path/index.rst:281
msgid "Normalizing Paths"
msgstr ""

#: ../../source/os.path/index.rst:283
msgid "Paths assembled from separate strings using ``join()`` or with embedded variables might end up with extra separators or relative path components. Use ``normpath()`` to clean them up:"
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_normpath.py"
msgstr ""

#: ../../source/os.path/index.rst:291
msgid "Path segments made up of ``os.curdir`` and ``os.pardir`` are evaluated and collapsed."
msgstr ""

#: ../../source/os.path/index.rst:308
msgid "To convert a relative path to an absolute filename, use ``abspath()``."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_abspath.py"
msgstr ""

#: ../../source/os.path/index.rst:315
msgid "The result is a complete path, starting at the top of the file system tree."
msgstr ""

#: ../../source/os.path/index.rst:334
msgid "File Times"
msgstr ""

#: ../../source/os.path/index.rst:336
msgid "Besides working with paths, ``os.path`` includes functions for retrieving file properties, similar to the ones returned by ``os.stat()``:"
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_properties.py"
msgstr ""

#: ../../source/os.path/index.rst:344
msgid "``os.path.getatime()`` returns the access time, ``os.path.getmtime()`` returns the modification time, and ``os.path.getctime()`` returns the creation time. ``os.path.getsize()`` returns the amount of data in the file, represented in bytes."
msgstr ""

#: ../../source/os.path/index.rst:367
msgid "Testing Files"
msgstr ""

#: ../../source/os.path/index.rst:369
msgid "When a program encounters a path name, it often needs to know whether the path refers to a file, directory, or symlink and whether it exists.  ``os.path`` includes functions for testing all of these conditions."
msgstr ""

#: ../../source/os.path/index.rst:0
msgid "ospath_tests.py"
msgstr ""

#: ../../source/os.path/index.rst:378
msgid "All of the test functions return boolean values."
msgstr ""

#: ../../source/os.path/index.rst:433
msgid ":pydoc:`os.path`"
msgstr ""

#: ../../source/os.path/index.rst:435
msgid ":ref:`Python 2 to 3 porting notes for os.path <porting-os.path>`"
msgstr ""

#: ../../source/os.path/index.rst:437
msgid ":mod:`pathlib` -- Paths as objects."
msgstr ""

#: ../../source/os.path/index.rst:439
msgid ":mod:`os` -- The ``os`` module is a parent of ``os.path``."
msgstr ""

#: ../../source/os.path/index.rst:441
msgid ":mod:`time` -- The time module includes functions to convert between the representation used by the time property functions in ``os.path`` and easy-to-read strings."
msgstr ""

