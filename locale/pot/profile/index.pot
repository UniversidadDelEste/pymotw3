# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/profile/index.rst:6
msgid "profile and pstats --- Performance Analysis"
msgstr ""

#: ../../source/profile/index.rst:11
msgid "Performance analysis of Python programs."
msgstr ""

#: ../../source/profile/index.rst:13
msgid "The ``profile`` module provides APIs for collecting and analyzing statistics about how Python source consumes processor resources."
msgstr ""

#: ../../source/profile/index.rst:18
msgid "This output reports in this section have been reformatted to fit on the page.  Lines ending with backslash (``\\``) are continued on the next line."
msgstr ""

#: ../../source/profile/index.rst:23
msgid "Running the Profiler"
msgstr ""

#: ../../source/profile/index.rst:25
msgid "The most basic starting point in the ``profile`` module is ``run()``.  It takes a string statement as argument, and creates a report of the time spent executing different lines of code while running the statement."
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_fibonacci_raw.py"
msgstr ""

#: ../../source/profile/index.rst:34
msgid "This recursive version of a Fibonacci sequence calculator is especially useful for demonstrating the profile because the performance can be improved significantly.  The standard report format shows a summary and then details for each function executed."
msgstr ""

#: ../../source/profile/index.rst:77
msgid "The raw version takes 57359 separate function calls and 0.127 seconds to run.  The fact that there are only 69 *primitive* calls says that the vast majority of those 57k calls were recursive.  The details about where time was spent are broken out by function in the listing showing the number of calls, total time spent in the function, time per call (tottime/ncalls), cumulative time spent in a function, and the ratio of cumulative time to primitive calls."
msgstr ""

#: ../../source/profile/index.rst:85
msgid "Not surprisingly, most of the time here is spent calling ``fib()`` repeatedly.  Adding a cache decorator reduces the number of recursive calls, and has a big impact on the performance of this function."
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_fibonacci_memoized.py"
msgstr ""

#: ../../source/profile/index.rst:93
msgid "By remembering the Fibonacci value at each level, most of the recursion is avoided and the run drops down to 89 calls that only take 0.001 seconds.  The ``ncalls`` count for ``fib()`` shows that it *never* recurses."
msgstr ""

#: ../../source/profile/index.rst:136
msgid "Running in a Context"
msgstr ""

#: ../../source/profile/index.rst:138
msgid "Sometimes, instead of constructing a complex expression for ``run()``, it is easier to build a simple expression and pass it parameters through a context, using ``runctx()``."
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_runctx.py"
msgstr ""

#: ../../source/profile/index.rst:146
msgid "In this example, the value of ``n`` is passed through the local variable context instead of being embedded directly in the statement passed to ``runctx()``."
msgstr ""

#: ../../source/profile/index.rst:184
msgid "pstats: Saving and Working With Statistics"
msgstr ""

#: ../../source/profile/index.rst:189
msgid "The standard report created by the ``profile`` functions is not very flexible.  However, custom reports can be produced by saving the raw profiling data from ``run()`` and ``runctx()`` and processing it separately with the ``pstats.Stats`` class."
msgstr ""

#: ../../source/profile/index.rst:194
msgid "This example runs several iterations of the same test and combines the results:"
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_stats.py"
msgstr ""

#: ../../source/profile/index.rst:201
msgid "The output report is sorted in descending order of cumulative time spent in the function and the directory names are removed from the printed filenames to conserve horizontal space on the page."
msgstr ""

#: ../../source/profile/index.rst:258
msgid "Limiting Report Contents"
msgstr ""

#: ../../source/profile/index.rst:260
msgid "The output can be restricted by function.  This version only shows information about the performance of ``fib()`` and ``fib_seq()`` by using a regular expression to match the desired ``filename:lineno(function)`` values."
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_stats_restricted.py"
msgstr ""

#: ../../source/profile/index.rst:269
msgid "The regular expression includes a literal left parenthesis (``(``) to match against the function name portion of the location value."
msgstr ""

#: ../../source/profile/index.rst:304
msgid "Caller / Callee Graphs"
msgstr ""

#: ../../source/profile/index.rst:306
msgid "``Stats`` also includes methods for printing the callers and callees of functions."
msgstr ""

#: ../../source/profile/index.rst:0
msgid "profile_stats_callers.py"
msgstr ""

#: ../../source/profile/index.rst:313
msgid "The arguments to ``print_callers()`` and ``print_callees()`` work the same as the restriction arguments to ``print_stats()``.  The output shows the caller, callee, number of calls, and cumulative time."
msgstr ""

#: ../../source/profile/index.rst:364
msgid ":pydoc:`profile`"
msgstr ""

#: ../../source/profile/index.rst:366
msgid ":ref:`functools.lru_cache() <functools-lru_cache>` -- The cache decorator used to improve performance in this example."
msgstr ""

#: ../../source/profile/index.rst:369
msgid "`The Stats Class <https://docs.python.org/3.5/library/profile.html#the-stats-class>`__ -- Standard library documentation for ``pstats.Stats``."
msgstr ""

#: ../../source/profile/index.rst:373
msgid "`Gprof2Dot <http://code.google.com/p/jrfonseca/wiki/Gprof2Dot>`__ -- Visualization tool for profile output data."
msgstr ""

#: ../../source/profile/index.rst:376
msgid "`Python Decorators: Syntactic Sugar | avinash.vora <http://avinashv.net/2008/04/python-decorators-syntactic-sugar/>`__ -- Another memoized Fibonacci sequence generator in Python."
msgstr ""

#: ../../source/profile/index.rst:380
msgid "`Smiley <https://github.com/dhellmann/smiley>`__ -- Python Application Tracer"
msgstr ""

