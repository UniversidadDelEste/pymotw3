# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/collections/counter.rst:3
msgid "Counter --- Count Hashable Objects"
msgstr ""

#: ../../source/collections/counter.rst:5
msgid "A ``Counter`` is a container that keeps track of how many times equivalent values are added.  It can be used to implement the same algorithms for which other languages commonly use bag or multiset data structures."
msgstr ""

#: ../../source/collections/counter.rst:11
msgid "Initializing"
msgstr ""

#: ../../source/collections/counter.rst:13
msgid "``Counter`` supports three forms of initialization.  Its constructor can be called with a sequence of items, a dictionary containing keys and counts, or using keyword arguments that map string names to counts."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_init.py"
msgstr ""

#: ../../source/collections/counter.rst:22
msgid "The results of all three forms of initialization are the same."
msgstr ""

#: ../../source/collections/counter.rst:38
msgid "An empty ``Counter`` can be constructed with no arguments and populated via the ``update()`` method."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_update.py"
msgstr ""

#: ../../source/collections/counter.rst:45
msgid "The count values are increased based on the new data, rather than replaced.  In the preceding example, the count for ``a`` goes from ``3`` to ``4``."
msgstr ""

#: ../../source/collections/counter.rst:64
msgid "Accessing Counts"
msgstr ""

#: ../../source/collections/counter.rst:66
msgid "Once a ``Counter`` is populated, its values can be retrieved using the dictionary API."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_get_values.py"
msgstr ""

#: ../../source/collections/counter.rst:73
msgid "``Counter`` does not raise ``KeyError`` for unknown items. If a value has not been seen in the input (as with ``e`` in this example), its count is ``0``."
msgstr ""

#: ../../source/collections/counter.rst:93
msgid "The ``elements()`` method returns an iterator that produces all of the items known to the ``Counter``."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_elements.py"
msgstr ""

#: ../../source/collections/counter.rst:100
msgid "The order of elements is not guaranteed, and items with counts less than or equal to zero are not included."
msgstr ""

#: ../../source/collections/counter.rst:117
msgid "Use ``most_common()`` to produce a sequence of the *n* most frequently encountered input values and their respective counts."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_most_common.py"
msgstr ""

#: ../../source/collections/counter.rst:124
msgid "This example counts the letters appearing in all of the words in the system dictionary to produce a frequency distribution, then prints the three most common letters.  Leaving out the argument to ``most_common()`` produces a list of all the items, in order of frequency."
msgstr ""

#: ../../source/collections/counter.rst:146
msgid "Arithmetic"
msgstr ""

#: ../../source/collections/counter.rst:148
msgid "``Counter`` instances support arithmetic and set operations for aggregating results. This example shows the standard operators for creating new ``Counter`` instances, but the in-place operators ``+=``, ``-=``, ``&=``, and ``|=`` are also supported."
msgstr ""

#: ../../source/collections/counter.rst:0
msgid "collections_counter_arithmetic.py"
msgstr ""

#: ../../source/collections/counter.rst:157
msgid "Each time a new ``Counter`` is produced through an operation, any items with zero or negative counts are discarded.  The count for ``a`` is the same in ``c1`` and ``c2``, so subtraction leaves it at zero."
msgstr ""

