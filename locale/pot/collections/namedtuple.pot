# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/collections/namedtuple.rst:5
msgid "namedtuple --- Tuple Subclass with Named Fields"
msgstr ""

#: ../../source/collections/namedtuple.rst:7
msgid "The standard ``tuple`` uses numerical indexes to access its members."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_tuple.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:14
msgid "This makes ``tuples`` convenient containers for simple uses."
msgstr ""

#: ../../source/collections/namedtuple.rst:34
msgid "In contrast, remembering which index should be used for each value can lead to errors, especially if the ``tuple`` has a lot of fields and is constructed far from where it is used.  A ``namedtuple`` assigns names, as well as the numerical index, to each member."
msgstr ""

#: ../../source/collections/namedtuple.rst:41
msgid "Defining"
msgstr ""

#: ../../source/collections/namedtuple.rst:43
msgid "``namedtuple`` instances are just as memory efficient as regular tuples because they do not have per-instance dictionaries.  Each kind of ``namedtuple`` is represented by its own class, which is created by using the ``namedtuple()`` factory function.  The arguments are the name of the new class and a string containing the names of the elements."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_person.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:54
msgid "As the example illustrates, it is possible to access the fields of the ``namedtuple`` by name using dotted notation (``obj.attr``) as well as by using the positional indexes of standard tuples."
msgstr ""

#: ../../source/collections/namedtuple.rst:77
msgid "Just like a regular ``tuple``, a ``namedtuple`` is immutable. This restriction allows ``tuple`` instances to have a consistent hash value, which makes it possible to use them as keys in dictionaries and to be included in sets."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_immutable.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:86
msgid "Trying to change a value through its named attribute results in an ``AttributeError``."
msgstr ""

#: ../../source/collections/namedtuple.rst:108
msgid "Invalid Field Names"
msgstr ""

#: ../../source/collections/namedtuple.rst:110
msgid "Field names are invalid if they are repeated or conflict with Python keywords."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_bad_fields.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:117
msgid "As the field names are parsed, invalid values cause ``ValueError`` exceptions."
msgstr ""

#: ../../source/collections/namedtuple.rst:133
msgid "In situations where a ``namedtuple`` is created based on values outside the control of the program (such as to represent the rows returned by a database query, where the schema is not known in advance), the ``rename`` option should be set to ``True`` so the invalid fields are renamed."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_rename.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:143
msgid "The new names for renamed fields depend on their index in the tuple, so the field with name ``class`` becomes ``_1`` and the duplicate ``age`` field is changed to ``_2``."
msgstr ""

#: ../../source/collections/namedtuple.rst:161
msgid "Special Attributes"
msgstr ""

#: ../../source/collections/namedtuple.rst:163
msgid "``namedtuple`` provides several useful attributes and methods for working with subclasses and instances. All of these built-in properties have names prefixed with an underscore (``_``), which by convention in most Python programs indicates a private attribute. For ``namedtuple``, however, the prefix is intended to protect the name from collision with user-provided attribute names."
msgstr ""

#: ../../source/collections/namedtuple.rst:170
msgid "The names of the fields passed to ``namedtuple`` to define the new class are saved in the :attr:`_fields` attribute."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_fields.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:177
msgid "Although the argument is a single space-separated string, the stored value is the sequence of individual names."
msgstr ""

#: ../../source/collections/namedtuple.rst:193
msgid "``namedtuple`` instances can be converted to ``OrderedDict`` instances using ``_asdict()``."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_asdict.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:200
msgid "The keys of the ``OrderedDict`` are in the same order as the fields for the ``namedtuple``."
msgstr ""

#: ../../source/collections/namedtuple.rst:216
msgid "The ``_replace()`` method builds a new instance, replacing the values of some fields in the process."
msgstr ""

#: ../../source/collections/namedtuple.rst:0
msgid "collections_namedtuple_replace.py"
msgstr ""

#: ../../source/collections/namedtuple.rst:223
msgid "Although the name implies it is modifying the existing object, because ``namedtuple`` instances are immutable the method actually returns a new object."
msgstr ""

