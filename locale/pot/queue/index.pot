# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/queue/index.rst:3
msgid "queue --- Thread-Safe FIFO Implementation"
msgstr ""

#: ../../source/queue/index.rst:8
msgid "Provides a thread-safe FIFO implementation"
msgstr ""

#: ../../source/queue/index.rst:10
msgid "The ``queue`` module provides a first-in, first-out (FIFO) data structure suitable for multi-threaded programming. It can be used to pass messages or other data between producer and consumer threads safely. Locking is handled for the caller, so many threads can work with the same ``Queue`` instance safely and easily. The size of a ``Queue`` (the number of elements it contains) may be restricted to throttle memory usage or processing."
msgstr ""

#: ../../source/queue/index.rst:20
msgid "This discussion assumes you already understand the general nature of a queue. If you do not, you may want to read some of the references before continuing."
msgstr ""

#: ../../source/queue/index.rst:25
msgid "Basic FIFO Queue"
msgstr ""

#: ../../source/queue/index.rst:27
msgid "The ``Queue`` class implements a basic first-in, first-out container.  Elements are added to one \"end\" of the sequence using ``put()``, and removed from the other end using ``get()``."
msgstr ""

#: ../../source/queue/index.rst:0
msgid "queue_fifo.py"
msgstr ""

#: ../../source/queue/index.rst:35
msgid "This example uses a single thread to illustrate that elements are removed from the queue in the same order in which they are inserted."
msgstr ""

#: ../../source/queue/index.rst:51
msgid "LIFO Queue"
msgstr ""

#: ../../source/queue/index.rst:53
msgid "In contrast to the standard FIFO implementation of ``Queue``, the ``LifoQueue`` uses last-in, first-out ordering (normally associated with a stack data structure)."
msgstr ""

#: ../../source/queue/index.rst:0
msgid "queue_lifo.py"
msgstr ""

#: ../../source/queue/index.rst:61
msgid "The item most recently ``put`` into the queue is removed by ``get``."
msgstr ""

#: ../../source/queue/index.rst:79
msgid "Priority Queue"
msgstr ""

#: ../../source/queue/index.rst:81
msgid "Sometimes the processing order of the items in a queue needs to be based on characteristics of those items, rather than just the order they are created or added to the queue.  For example, print jobs from the payroll department may take precedence over a code listing that a developer wants to print.  ``PriorityQueue`` uses the sort order of the contents of the queue to decide which item to retrieve."
msgstr ""

#: ../../source/queue/index.rst:0
msgid "queue_priority.py"
msgstr ""

#: ../../source/queue/index.rst:92
msgid "This example has multiple threads consuming the jobs, which are processed based on the priority of items in the queue at the time ``get()`` was called.  The order of processing for items added to the queue while the consumer threads are running depends on thread context switching."
msgstr ""

#: ../../source/queue/index.rst:116
msgid "Building a Threaded Podcast Client"
msgstr ""

#: ../../source/queue/index.rst:118
msgid "The source code for the podcasting client in this section demonstrates how to use the ``Queue`` class with multiple threads.  The program reads one or more RSS feeds, queues up the enclosures for the five most recent episodes from each feed to be downloaded, and processes several downloads in parallel using threads. It does not have enough error handling for production use, but the skeleton implementation illustrates the use of the ``queue`` module."
msgstr ""

#: ../../source/queue/index.rst:126
msgid "First, some operating parameters are established. Usually, these would come from user inputs (e.g., preferences or a database). The example uses hard-coded values for the number of threads and list of URLs to fetch."
msgstr ""

#: ../../source/queue/index.rst:0
msgid "fetch_podcasts.py"
msgstr ""

#: ../../source/queue/index.rst:135
msgid "The function ``download_enclosures()`` runs in the worker thread and processes the downloads using :mod:`urllib`."
msgstr ""

#: ../../source/queue/index.rst:141
msgid "Once the target function for the threads is defined, the worker threads can be started. When ``download_enclosures()`` processes the statement ``url = q.get()``, it blocks and waits until the queue has something to return.  That means it is safe to start the threads before there is anything in the queue."
msgstr ""

#: ../../source/queue/index.rst:150
msgid "The next step is to retrieve the feed contents using the ``feedparser`` module and enqueue the URLs of the enclosures. As soon as the first URL is added to the queue, one of the worker threads picks it up and starts downloading it. The loop continues to add items until the feed is exhausted, and the worker threads take turns dequeuing URLs to download them."
msgstr ""

#: ../../source/queue/index.rst:160
msgid "The only thing left to do is wait for the queue to empty out again, using ``join()``."
msgstr ""

#: ../../source/queue/index.rst:166
msgid "Running the sample script produces output similar to the following."
msgstr ""

#: ../../source/queue/index.rst:192
msgid "The actual output will depend on the contents of the RSS feed used."
msgstr ""

#: ../../source/queue/index.rst:196
msgid ":pydoc:`queue`"
msgstr ""

#: ../../source/queue/index.rst:198
msgid ":ref:`deque` from :mod:`collections`"
msgstr ""

#: ../../source/queue/index.rst:200
msgid "`Queue data structures <https://en.wikipedia.org/wiki/Queue_(data_structure)>`__ -- Wikipedia article explaining queues."
msgstr ""

#: ../../source/queue/index.rst:204
msgid "`FIFO <https://en.wikipedia.org/wiki/FIFO>`__ -- Wikipedia article explaining first-in, first-out, data structures."
msgstr ""

#: ../../source/queue/index.rst:207
msgid "`feedparser module <https://pypi.python.org/pypi/feedparser>`__ -- A module for parsing RSS and Atom feeds, created by Mark Pilgrim and maintained by Kurt McKee."
msgstr ""

