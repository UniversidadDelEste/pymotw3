# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/glob/index.rst:3
msgid "glob --- Filename Pattern Matching"
msgstr ""

#: ../../source/glob/index.rst:8
msgid "Use Unix shell rules to find filenames matching a pattern."
msgstr ""

#: ../../source/glob/index.rst:10
msgid "Even though the ``glob`` API is small, the module packs a lot of power. It is useful in any situation where a program needs to look for a list of files on the file system with names matching a pattern. To create a list of filenames that all have a certain extension, prefix, or any common string in the middle, use ``glob`` instead of writing custom code to scan the directory contents."
msgstr ""

#: ../../source/glob/index.rst:17
msgid "The pattern rules for ``glob`` are not the same as the regular expressions used by the :mod:`re` module. Instead, they follow standard Unix path expansion rules. There are only a few special characters used to implement two different wild-cards and character ranges. The pattern rules are applied to segments of the filename (stopping at the path separator, ``/``). Paths in the pattern can be relative or absolute. Shell variable names and tilde (``~``) are not expanded."
msgstr ""

#: ../../source/glob/index.rst:27
msgid "Example Data"
msgstr ""

#: ../../source/glob/index.rst:29
msgid "The examples in this section assume the following test files are present in the current working directory."
msgstr ""

#: ../../source/glob/index.rst:57
msgid "If these files do not exist, use ``glob_maketestdata.py`` in the sample code to create them before running the following examples."
msgstr ""

#: ../../source/glob/index.rst:61
msgid "Wildcards"
msgstr ""

#: ../../source/glob/index.rst:63
msgid "An asterisk (``*``) matches zero or more characters in a segment of a name. For example, ``dir/*``."
msgstr ""

#: ../../source/glob/index.rst:0
msgid "glob_asterisk.py"
msgstr ""

#: ../../source/glob/index.rst:70
msgid "The pattern matches every path name (file or directory) in the directory dir, without recursing further into subdirectories. The data returned by ``glob()`` is not sorted, so the examples here sort it to make studying the results easier."
msgstr ""

#: ../../source/glob/index.rst:95
msgid "To list files in a subdirectory, the subdirectory must be included in the pattern."
msgstr ""

#: ../../source/glob/index.rst:0
msgid "glob_subdir.py"
msgstr ""

#: ../../source/glob/index.rst:102
msgid "The first case shown earlier lists the subdirectory name explicitly, while the second case depends on a wildcard to find the directory."
msgstr ""

#: ../../source/glob/index.rst:120
msgid "The results, in this case, are the same. If there was another subdirectory, the wildcard would match both subdirectories and include the filenames from both."
msgstr ""

#: ../../source/glob/index.rst:125
msgid "Single Character Wildcard"
msgstr ""

#: ../../source/glob/index.rst:127
msgid "A question mark (``?``) is another wildcard character. It matches any single character in that position in the name."
msgstr ""

#: ../../source/glob/index.rst:0
msgid "glob_question.py"
msgstr ""

#: ../../source/glob/index.rst:134
msgid "The previous example matches all of the filenames that begin with ``file``, have one more character of any type, then end with ``.txt``."
msgstr ""

#: ../../source/glob/index.rst:157
msgid "Character Ranges"
msgstr ""

#: ../../source/glob/index.rst:159
msgid "Use a character range (``[a-z]``) instead of a question mark to match one of several characters.  This example finds all of the files with a digit in the name before the extension."
msgstr ""

#: ../../source/glob/index.rst:0
msgid "glob_charrange.py"
msgstr ""

#: ../../source/glob/index.rst:167
msgid "The character range ``[0-9]`` matches any single digit. The range is ordered based on the character code for each letter/digit, and the dash indicates an unbroken range of sequential characters. The same range value could be written ``[0123456789]``."
msgstr ""

#: ../../source/glob/index.rst:186
msgid "Escaping Meta-characters"
msgstr ""

#: ../../source/glob/index.rst:188
msgid "Sometimes it is necessary to search for files with names containing the special meta-characters ``glob`` uses for its patterns. The ``escape()`` function builds a suitable pattern with the special characters \"escaped\" so they are not expanded or interpreted as special by ``glob``."
msgstr ""

#: ../../source/glob/index.rst:0
msgid "glob_escape.py"
msgstr ""

#: ../../source/glob/index.rst:198
msgid "Each special character is escaped by building a character range containing a single entry."
msgstr ""

#: ../../source/glob/index.rst:225
msgid ":pydoc:`glob`"
msgstr ""

#: ../../source/glob/index.rst:227
msgid "`Pattern Matching Notation <http://www.opengroup.org/onlinepubs/000095399/utilities/xcu_chap02.html#tag_02_13>`_ -- An explanation of globbing from The Open Group's Shell Command Language specification."
msgstr ""

#: ../../source/glob/index.rst:232
msgid ":mod:`fnmatch` -- Filename matching implementation."
msgstr ""

#: ../../source/glob/index.rst:234
msgid ":ref:`Python 2 to 3 porting notes for glob <porting-glob>`"
msgstr ""

