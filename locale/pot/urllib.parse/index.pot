# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/urllib.parse/index.rst:3
msgid "urllib.parse --- Split URLs into Components"
msgstr ""

#: ../../source/urllib.parse/index.rst:8
msgid "Split URL into components"
msgstr ""

#: ../../source/urllib.parse/index.rst:10
msgid "The ``urllib.parse`` module provides functions for manipulating URLs and their component parts, to either break them down or build them up."
msgstr ""

#: ../../source/urllib.parse/index.rst:15
msgid "Parsing"
msgstr ""

#: ../../source/urllib.parse/index.rst:17
msgid "The return value from the ``urlparse()`` function is a ``ParseResult`` object that acts like a ``tuple`` with six elements."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlparse.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:25
msgid "The parts of the URL available through the tuple interface are the scheme, network location, path, path segment parameters (separated from the path by a semicolon), query, and fragment."
msgstr ""

#: ../../source/urllib.parse/index.rst:43
msgid "Although the return value acts like a tuple, it is really based on a ``namedtuple``, a subclass of ``tuple`` that supports accessing the parts of the URL via named attributes as well as indexes.  In addition to being easier to use for the programmer, the attribute API also offers access to several values not available in the ``tuple`` API."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlparseattrs.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:54
msgid "The ``username`` and ``password`` are available when present in the input URL, and set to ``None`` when not. The ``hostname`` is the same value as ``netloc``, in all lower case and with the port value stripped.  And the ``port`` is converted to an integer when present and ``None`` when not."
msgstr ""

#: ../../source/urllib.parse/index.rst:80
msgid "The ``urlsplit()`` function is an alternative to ``urlparse()``. It behaves a little differently, because it does not split the parameters from the URL. This is useful for URLs following :rfc:`2396`, which supports parameters for each segment of the path."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlsplit.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:89
msgid "Since the parameters are not split out, the tuple API will show five elements instead of six, and there is no ``params`` attribute."
msgstr ""

#: ../../source/urllib.parse/index.rst:115
msgid "To simply strip the fragment identifier from a URL, such as when finding a base page name from a URL, use ``urldefrag()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urldefrag.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:122
msgid "The return value is a ``DefragResult``, based on ``namedtuple``, containing the base URL and the fragment."
msgstr ""

#: ../../source/urllib.parse/index.rst:140
msgid "Unparsing"
msgstr ""

#: ../../source/urllib.parse/index.rst:142
msgid "There are several ways to assemble the parts of a split URL back together into a single string. The parsed URL object has a ``geturl()`` method."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_geturl.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:150
msgid "``geturl()`` only works on the object returned by ``urlparse()`` or ``urlsplit()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:166
msgid "A regular tuple containing strings can be combined into a URL with ``urlunparse()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlunparse.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:173
msgid "While the ``ParseResult`` returned by ``urlparse()`` can be used as a tuple, this example explicitly creates a new tuple to show that ``urlunparse()`` works with normal tuples, too."
msgstr ""

#: ../../source/urllib.parse/index.rst:196
msgid "If the input URL included superfluous parts, those may be dropped from the reconstructed URL."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlunparseextra.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:203
msgid "In this case, ``parameters``, ``query``, and ``fragment`` are all missing in the original URL. The new URL does not look the same as the original, but is equivalent according to the standard."
msgstr ""

#: ../../source/urllib.parse/index.rst:226
msgid "Joining"
msgstr ""

#: ../../source/urllib.parse/index.rst:228
msgid "In addition to parsing URLs, :mod:`urlparse` includes ``urljoin()`` for constructing absolute URLs from relative fragments."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urljoin.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:236
msgid "In the example, the relative portion of the path (``\"../\"``) is taken into account when the second URL is computed."
msgstr ""

#: ../../source/urllib.parse/index.rst:252
msgid "Non-relative paths are handled in the same way as by ``os.path.join()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urljoin_with_path.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:259
msgid "If the path being joined to the URL starts with a slash (``/``), it resets the URL's path to the top level.  If it does not start with a slash, it is appended to the end of the path for the URL."
msgstr ""

#: ../../source/urllib.parse/index.rst:279
msgid "Encoding Query Arguments"
msgstr ""

#: ../../source/urllib.parse/index.rst:281
msgid "Before arguments can be added to a URL, they need to be encoded."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlencode.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:287
msgid "Encoding replaces special characters like spaces to ensure they are passed to the server using a format that complies with the standard."
msgstr ""

#: ../../source/urllib.parse/index.rst:302
msgid "To pass a sequence of values using separate occurrences of the variable in the query string, set ``doseq`` to ``True`` when calling ``urlencode()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_urlencode_doseq.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:310
msgid "The result is a query string with several values associated with the same name."
msgstr ""

#: ../../source/urllib.parse/index.rst:326
msgid "To decode the query string, use ``parse_qs()`` or ``parse_qsl()``."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_parse_qs.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:332
msgid "The return value from ``parse_qs()`` is a dictionary mapping names to values, while ``parse_qsl()`` returns a list of tuples containing a name and a value."
msgstr ""

#: ../../source/urllib.parse/index.rst:349
msgid "Special characters within the query arguments that might cause parse problems with the URL on the server side are \"quoted\" when passed to ``urlencode()``. To quote them locally to make safe versions of the strings, use the ``quote()`` or ``quote_plus()`` functions directly."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_quote.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:359
msgid "The quoting implementation in ``quote_plus()`` is more aggressive about the characters it replaces."
msgstr ""

#: ../../source/urllib.parse/index.rst:377
msgid "To reverse the quote operations, use ``unquote()`` or ``unquote_plus()``, as appropriate."
msgstr ""

#: ../../source/urllib.parse/index.rst:0
msgid "urllib_parse_unquote.py"
msgstr ""

#: ../../source/urllib.parse/index.rst:384
msgid "The encoded value is converted back to a normal string URL."
msgstr ""

#: ../../source/urllib.parse/index.rst:402
msgid ":pydoc:`urllib.parse`"
msgstr ""

#: ../../source/urllib.parse/index.rst:404
msgid ":mod:`urllib.request` -- Retrieve the contents of a resource identified by a URL."
msgstr ""

#: ../../source/urllib.parse/index.rst:407
msgid ":rfc:`1738` -- Uniform Resource Locator (URL) syntax"
msgstr ""

#: ../../source/urllib.parse/index.rst:409
msgid ":rfc:`1808` -- Relative URLs"
msgstr ""

#: ../../source/urllib.parse/index.rst:411
msgid ":rfc:`2396` -- Uniform Resource Identifier (URI) generic syntax"
msgstr ""

#: ../../source/urllib.parse/index.rst:413
msgid ":rfc:`3986` -- Uniform Resource Identifier (URI) syntax"
msgstr ""

