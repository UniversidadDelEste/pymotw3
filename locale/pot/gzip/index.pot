# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/gzip/index.rst:3
msgid "gzip --- Read and Write GNU zip Files"
msgstr ""

#: ../../source/gzip/index.rst:8
msgid "Read and write gzip files."
msgstr ""

#: ../../source/gzip/index.rst:10
msgid "The ``gzip`` module provides a file-like interface to GNU zip files, using :mod:`zlib` to compress and uncompress the data."
msgstr ""

#: ../../source/gzip/index.rst:14
msgid "Writing Compressed Files"
msgstr ""

#: ../../source/gzip/index.rst:16
msgid "The module-level function ``open()`` creates an instance of the file-like class ``GzipFile``.  The usual methods for writing and reading bytes are provided."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_write.py"
msgstr ""

#: ../../source/gzip/index.rst:24
msgid "To write data into a compressed file, open the file with mode ``'wb'``. This example wraps the ``GzipFile`` with a ``TextIOWrapper`` from the :mod:`io` module to encode Unicode text to bytes suitable for compression."
msgstr ""

#: ../../source/gzip/index.rst:42
msgid "Different amounts of compression can be used by passing a ``compresslevel`` argument.  Valid values range from 0 to 9, inclusive. Lower values are faster and result in less compression.  Higher values are slower and compress more, up to a point."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_compresslevel.py"
msgstr ""

#: ../../source/gzip/index.rst:51
msgid "The center column of numbers in the output shows the size in bytes of the files produced by compressing the input.  For this input data, the higher compression values do not necessarily pay off in decreased storage space.  Results will vary, depending on the input data."
msgstr ""

#: ../../source/gzip/index.rst:80
msgid "A ``GzipFile`` instance also includes a ``writelines()`` method that can be used to write a sequence of strings."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_writelines.py"
msgstr ""

#: ../../source/gzip/index.rst:87
msgid "As with a regular file, the input lines need to include a newline character."
msgstr ""

#: ../../source/gzip/index.rst:113
msgid "Reading Compressed Data"
msgstr ""

#: ../../source/gzip/index.rst:115
msgid "To read data back from previously compressed files, open the file with binary read mode (``'rb'``) so no text-based translation of line endings or Unicode decoding is performed."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_read.py"
msgstr ""

#: ../../source/gzip/index.rst:123
msgid "This example reads the file written by ``gzip_write.py`` from the previous section, using a ``TextIOWrapper`` to decode the text after it is decompressed."
msgstr ""

#: ../../source/gzip/index.rst:140
msgid "While reading a file, it is also possible to seek and read only part of the data."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_seek.py"
msgstr ""

#: ../../source/gzip/index.rst:147
msgid "The ``seek()`` position is relative to the *uncompressed* data, so the caller does not need to know that the data file is compressed."
msgstr ""

#: ../../source/gzip/index.rst:169
msgid "Working with Streams"
msgstr ""

#: ../../source/gzip/index.rst:171
msgid "The ``GzipFile`` class can be used to wrap other types of data streams so they can use compression as well.  This is useful when the data is being transmitted over a socket or an existing (already open) file handle.  A :mod:`BytesIO` buffer can also be used."
msgstr ""

#: ../../source/gzip/index.rst:0
msgid "gzip_BytesIO.py"
msgstr ""

#: ../../source/gzip/index.rst:181
msgid "One benefit of using ``GzipFile`` over :mod:`zlib` is that it supports the file API.  However, when re-reading the previously compressed data, an explicit length is passed to ``read()``. Leaving the length off resulted in a CRC error, possibly because ``BytesIO`` returned an empty string before reporting EOF.  When working with streams of compressed data, either prefix the data with an integer representing the actual amount of data to be read or use the incremental decompression API in :mod:`zlib`."
msgstr ""

#: ../../source/gzip/index.rst:220
msgid ":pydoc:`gzip`"
msgstr ""

#: ../../source/gzip/index.rst:222
msgid ":mod:`zlib` -- The ``zlib`` module is a lower-level interface to gzip compression."
msgstr ""

#: ../../source/gzip/index.rst:225
msgid ":mod:`zipfile` -- The ``zipfile`` module gives access to ZIP archives."
msgstr ""

#: ../../source/gzip/index.rst:228
msgid ":mod:`bz2` -- The ``bz2`` module uses the bzip2 compression format."
msgstr ""

#: ../../source/gzip/index.rst:231
msgid ":mod:`tarfile` -- The ``tarfile`` module includes built-in support for reading compressed tar archives."
msgstr ""

#: ../../source/gzip/index.rst:234
msgid ":mod:`io` -- Building-blocks for creating input and output pipelines."
msgstr ""

