# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/subprocess/index.rst:3
msgid "subprocess --- Spawning Additional Processes"
msgstr ""

#: ../../source/subprocess/index.rst:8
msgid "Start and communicate with additional processes."
msgstr ""

#: ../../source/subprocess/index.rst:10
msgid "The ``subprocess`` module supports three APIs for working with processes. The ``run()`` function, added in Python 3.5, is a high-level API for running a process and optionally collecting its output. The functions ``call()``, ``check_call()``, and ``check_output()`` are the former high-level API, carried over from Python 2. They are still supported and widely used in existing programs. The class ``Popen`` is a low-level API used to build the other APIs and useful for more complex process interactions. The constructor for ``Popen`` takes arguments to set up the new process so the parent can communicate with it via pipes.  It provides all of the functionality of the other modules and functions it replaces, and more. The API is consistent for all uses, and many of the extra steps of overhead needed (such as closing extra file descriptors and ensuring the pipes are closed) are \"built in\" instead of being handled by the application code separately."
msgstr ""

#: ../../source/subprocess/index.rst:26
msgid "The ``subprocess`` module is intended to replace functions such as ``os.system()``, ``os.spawnv()``, the variations of ``popen()`` in the :mod:`os` and :mod:`popen2` modules, as well as the ``commands()`` module. To make it easier to compare ``subprocess`` with those other modules, many of the examples in this section re-create the ones used for :mod:`os` and :mod:`popen2`."
msgstr ""

#: ../../source/subprocess/index.rst:35
msgid "The API for working on Unix and Windows is roughly the same, but the underlying implementation is different because of the difference in process models in the operating systems.  All of the examples shown here were tested on Mac OS X. Behavior on a non-Unix OS may vary."
msgstr ""

#: ../../source/subprocess/index.rst:42
msgid "Running External Command"
msgstr ""

#: ../../source/subprocess/index.rst:44
msgid "To run an external command without interacting with it in the same way as ``os.system()``, use the ``run()`` function."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_os_system.py"
msgstr ""

#: ../../source/subprocess/index.rst:51
msgid "The command line arguments are passed as a list of strings, which avoids the need for escaping quotes or other special characters that might be interpreted by the shell. ``run()`` returns a ``CompletedProcess`` instance, with information about the process like the exit code and output."
msgstr ""

#: ../../source/subprocess/index.rst:91
msgid "Setting the ``shell`` argument to a true value causes ``subprocess`` to spawn an intermediate shell process which then runs the command.  The default is to run the command directly."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_shell_variables.py"
msgstr ""

#: ../../source/subprocess/index.rst:99
msgid "Using an intermediate shell means that variables, glob patterns, and other special shell features in the command string are processed before the command is run."
msgstr ""

#: ../../source/subprocess/index.rst:118
msgid "Using ``run()`` without passing ``check=True`` is equivalent to using ``call()``, which only returned the exit code from the process."
msgstr ""

#: ../../source/subprocess/index.rst:123
msgid "Error Handling"
msgstr ""

#: ../../source/subprocess/index.rst:125
msgid "The ``returncode`` attribute of the ``CompletedProcess`` is the exit code of the program.  The caller is responsible for interpreting it to detect errors.  If the ``check`` argument to ``run()`` is ``True``, the exit code is checked and if it indicates an error happened then a ``CalledProcessError`` exception is raised."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_run_check.py"
msgstr ""

#: ../../source/subprocess/index.rst:135
msgid "The ``false`` command always exits with a non-zero status code, which ``run()`` interprets as an error."
msgstr ""

#: ../../source/subprocess/index.rst:152
msgid "Passing ``check=True`` to ``run()`` makes it equivalent to using ``check_call()``."
msgstr ""

#: ../../source/subprocess/index.rst:156
msgid "Capturing Output"
msgstr ""

#: ../../source/subprocess/index.rst:158
msgid "The standard input and output channels for the process started by ``run()`` are bound to the parent's input and output.  That means the calling program cannot capture the output of the command.  Pass ``PIPE`` for the ``stdout`` and ``stderr`` arguments to capture the output for later processing."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_run_output.py"
msgstr ""

#: ../../source/subprocess/index.rst:168
msgid "The ``ls -1`` command runs successfully, so the text it prints to standard output is captured and returned."
msgstr ""

#: ../../source/subprocess/index.rst:208
msgid "Passing ``check=True`` and setting ``stdout`` to ``PIPE`` is equivalent to using ``check_output()``."
msgstr ""

#: ../../source/subprocess/index.rst:211
msgid "The next example runs a series of commands in a sub-shell.  Messages are sent to standard output and standard error before the commands exit with an error code."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_run_output_error.py"
msgstr ""

#: ../../source/subprocess/index.rst:219
msgid "The message to standard error is printed to the console, but the message to standard output is hidden."
msgstr ""

#: ../../source/subprocess/index.rst:237
msgid "To prevent error messages from commands run through ``run()`` from being written to the console, set the ``stderr`` parameter to the constant ``PIPE``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_run_output_error_trap.py"
msgstr ""

#: ../../source/subprocess/index.rst:245
msgid "This example does not set ``check=True`` so the output of the command is captured and printed."
msgstr ""

#: ../../source/subprocess/index.rst:263
msgid "To capture error messages when using ``check_output()``, set ``stderr`` to ``STDOUT``, and the messages will be merged with the rest of the output from the command."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_check_output_error_trap_output.py"
msgstr ""

#: ../../source/subprocess/index.rst:271
msgid "The order of output may vary, depending on how buffering is applied to the standard output stream and how much data is being printed."
msgstr ""

#: ../../source/subprocess/index.rst:287
msgid "Suppressing Output"
msgstr ""

#: ../../source/subprocess/index.rst:289
msgid "For cases where the output should not be shown or captured, use ``DEVNULL`` to suppress an output stream. This example suppresses both the standard output and error streams."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_run_output_error_suppress.py"
msgstr ""

#: ../../source/subprocess/index.rst:297
msgid "The name ``DEVNULL`` comes from the Unix special device file, ``/dev/null``, which responds with end-of-file when opened for reading and receives but ignores any amount of input when writing."
msgstr ""

#: ../../source/subprocess/index.rst:316
msgid "Working with Pipes Directly"
msgstr ""

#: ../../source/subprocess/index.rst:318
msgid "The functions ``run()``, ``call()``, ``check_call()``, and ``check_output()`` are wrappers around the ``Popen`` class. Using ``Popen`` directly gives more control over how the command is run, and how its input and output streams are processed.  For example, by passing different arguments for ``stdin``, ``stdout``, and ``stderr`` it is possible to mimic the variations of ``os.popen()``."
msgstr ""

#: ../../source/subprocess/index.rst:326
msgid "One-way Communication With a Process"
msgstr ""

#: ../../source/subprocess/index.rst:328
msgid "To run a process and read all of its output, set the ``stdout`` value to ``PIPE`` and call ``communicate()``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_popen_read.py"
msgstr ""

#: ../../source/subprocess/index.rst:335
msgid "This is similar to the way ``popen()`` works, except that the reading is managed internally by the ``Popen`` instance."
msgstr ""

#: ../../source/subprocess/index.rst:351
msgid "To set up a pipe to allow the calling program to write data to it, set ``stdin`` to ``PIPE``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_popen_write.py"
msgstr ""

#: ../../source/subprocess/index.rst:358
msgid "To send data to the standard input channel of the process one time, pass the data to ``communicate()``.  This is similar to using ``popen()`` with mode ``'w'``."
msgstr ""

#: ../../source/subprocess/index.rst:376
msgid "Bi-directional Communication With a Process"
msgstr ""

#: ../../source/subprocess/index.rst:378
msgid "To set up the ``Popen`` instance for reading and writing at the same time, use a combination of the previous techniques."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_popen2.py"
msgstr ""

#: ../../source/subprocess/index.rst:385
msgid "This sets up the pipe to mimic ``popen2()``."
msgstr ""

#: ../../source/subprocess/index.rst:401
msgid "Capturing Error Output"
msgstr ""

#: ../../source/subprocess/index.rst:403
msgid "It is also possible watch both of the streams for ``stdout`` and ``stderr``, as with ``popen3()``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_popen3.py"
msgstr ""

#: ../../source/subprocess/index.rst:410
msgid "Reading from ``stderr`` works the same as with ``stdout``.  Passing ``PIPE`` tells ``Popen`` to attach to the channel, and ``communicate()`` reads all of the data from it before returning."
msgstr ""

#: ../../source/subprocess/index.rst:429
msgid "Combining Regular and Error Output"
msgstr ""

#: ../../source/subprocess/index.rst:431
msgid "To direct the error output from the process to its standard output channel, use ``STDOUT`` for ``stderr`` instead of ``PIPE``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_popen4.py"
msgstr ""

#: ../../source/subprocess/index.rst:438
msgid "Combining the output in this way is similar to how ``popen4()`` works."
msgstr ""

#: ../../source/subprocess/index.rst:456
msgid "Connecting Segments of a Pipe"
msgstr ""

#: ../../source/subprocess/index.rst:458
msgid "Multiple commands can be connected into a *pipeline*, similar to the way the Unix shell works, by creating separate ``Popen`` instances and chaining their inputs and outputs together.  The :attr:`stdout` attribute of one ``Popen`` instance is used as the ``stdin`` argument for the next in the pipeline, instead of the constant ``PIPE``.  The output is read from the :attr:`stdout` handle for the final command in the pipeline."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_pipes.py"
msgstr ""

#: ../../source/subprocess/index.rst:470
msgid "The example reproduces the command line:"
msgstr ""

#: ../../source/subprocess/index.rst:476
msgid "The pipeline reads the reStructuredText source file for this section and finds all of the lines that include other files, then prints the names of the files being included."
msgstr ""

#: ../../source/subprocess/index.rst:514
msgid "Interacting with Another Command"
msgstr ""

#: ../../source/subprocess/index.rst:516
msgid "All of the previous examples assume a limited amount of interaction. The ``communicate()`` method reads all of the output and waits for child process to exit before returning. It is also possible to write to and read from the individual pipe handles used by the ``Popen`` instance incrementally, as the program runs. A simple echo program that reads from standard input and writes to standard output illustrates this technique."
msgstr ""

#: ../../source/subprocess/index.rst:524
msgid "The script ``repeater.py`` is used as the child process in the next example.  It reads from ``stdin`` and writes the values to ``stdout``, one line at a time until there is no more input.  It also writes a message to ``stderr`` when it starts and stops, showing the lifetime of the child process."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "repeater.py"
msgstr ""

#: ../../source/subprocess/index.rst:534
msgid "The next interaction example uses the :attr:`stdin` and :attr:`stdout` file handles owned by the ``Popen`` instance in different ways. In the first example, a sequence of five numbers are written to :attr:`stdin` of the process, and after each write the next line of output is read back. In the second example, the same five numbers are written but the output is read all at once using ``communicate()``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "interaction.py"
msgstr ""

#: ../../source/subprocess/index.rst:546
msgid "The ``\"repeater.py: exiting\"`` lines come at different points in the output for each loop style."
msgstr ""

#: ../../source/subprocess/index.rst:581
msgid "Signaling Between Processes"
msgstr ""

#: ../../source/subprocess/index.rst:583
msgid "The process management examples for the :mod:`os` module include a demonstration of signaling between processes using ``os.fork()`` and ``os.kill()``. Since each ``Popen`` instance provides a *pid* attribute with the process id of the child process, it is possible to do something similar with ``subprocess``. The next example combines two scripts.  This child process sets up a signal handler for the ``USR`` signal."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "signal_child.py"
msgstr ""

#: ../../source/subprocess/index.rst:595
msgid "This script runs as the parent process.  It starts ``signal_child.py``, then sends the ``USR1`` signal."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "signal_parent.py"
msgstr ""

#: ../../source/subprocess/index.rst:602
msgid "The output is:"
msgstr ""

#: ../../source/subprocess/index.rst:623
msgid "Process Groups / Sessions"
msgstr ""

#: ../../source/subprocess/index.rst:625
msgid "If the process created by ``Popen`` spawns sub-processes, those children will not receive any signals sent to the parent.  That means when using the ``shell`` argument to ``Popen`` it will be difficult to cause the command started in the shell to terminate by sending ``SIGINT`` or ``SIGTERM``."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_signal_parent_shell.py"
msgstr ""

#: ../../source/subprocess/index.rst:635
msgid "The pid used to send the signal does not match the pid of the child of the shell script waiting for the signal, because in this example there are three separate processes interacting:"
msgstr ""

#: ../../source/subprocess/index.rst:639
msgid "The program ``subprocess_signal_parent_shell.py``"
msgstr ""

#: ../../source/subprocess/index.rst:640
msgid "The shell process running the script created by the main python program"
msgstr ""

#: ../../source/subprocess/index.rst:642
msgid "The program ``signal_child.py``"
msgstr ""

#: ../../source/subprocess/index.rst:662
msgid "To send signals to descendants without knowing their process id, use a *process group* to associate the children so they can be signaled together.  The process group is created with ``os.setpgrp()``, which sets process group id to the process id of the current process. All child processes inherit their process group from their parent, and since it should only be set in the shell created by ``Popen`` and its descendants, ``os.setpgrp()`` should not be called in the same process where the ``Popen`` is created.  Instead, the function is passed to ``Popen`` as the ``preexec_fn`` argument so it is run after the ``fork()`` inside the new process, before it uses ``exec()`` to run the shell.  To signal the entire process group, use ``os.killpg()`` with the :attr:`pid` value from the ``Popen`` instance."
msgstr ""

#: ../../source/subprocess/index.rst:0
msgid "subprocess_signal_setpgrp.py"
msgstr ""

#: ../../source/subprocess/index.rst:680
msgid "The sequence of events is"
msgstr ""

#: ../../source/subprocess/index.rst:682
msgid "The parent program instantiates ``Popen``."
msgstr ""

#: ../../source/subprocess/index.rst:683
msgid "The ``Popen`` instance forks a new process."
msgstr ""

#: ../../source/subprocess/index.rst:684
msgid "The new process runs ``os.setpgrp()``."
msgstr ""

#: ../../source/subprocess/index.rst:685
msgid "The new process runs ``exec()`` to start the shell."
msgstr ""

#: ../../source/subprocess/index.rst:686
msgid "The shell runs the shell script."
msgstr ""

#: ../../source/subprocess/index.rst:687
msgid "The shell script forks again and that process execs Python."
msgstr ""

#: ../../source/subprocess/index.rst:688
msgid "Python runs ``signal_child.py``."
msgstr ""

#: ../../source/subprocess/index.rst:689
msgid "The parent program signals the process group using the pid of the shell."
msgstr ""

#: ../../source/subprocess/index.rst:690
msgid "The shell and Python processes receive the signal."
msgstr ""

#: ../../source/subprocess/index.rst:691
msgid "The shell ignores the signal."
msgstr ""

#: ../../source/subprocess/index.rst:692
msgid "The Python process running ``signal_child.py`` invokes the signal handler."
msgstr ""

#: ../../source/subprocess/index.rst:717
msgid ":pydoc:`subprocess`"
msgstr ""

#: ../../source/subprocess/index.rst:719
msgid ":mod:`os` -- Although ``subprocess`` replaces many of them, the functions for working with processes found in the :mod:`os` module are still widely used in existing code."
msgstr ""

#: ../../source/subprocess/index.rst:723
msgid "`UNIX Signals and Process Groups <http://www.cs.ucsb.edu/~almeroth/classes/W99.276/assignment1/signals.html>`__ -- A good description of Unix signaling and how process groups work."
msgstr ""

#: ../../source/subprocess/index.rst:728
msgid ":mod:`signal` -- More details about using the ``signal`` module."
msgstr ""

#: ../../source/subprocess/index.rst:730
msgid "`Advanced Programming in the UNIX(R) Environment <http://www.amazon.com/Programming-Environment-Addison-Wesley-Professional-Computing/dp/0201433079/ref=pd_bbs_3/002-2842372-4768037?ie=UTF8&s=books&amp;qid=1182098757&sr=8-3>`__ -- Covers working with multiple processes, such as handling signals, closing duplicated file descriptors, etc."
msgstr ""

#: ../../source/subprocess/index.rst:735
msgid ":mod:`pipes` -- Unix shell command pipeline templates in the standard library."
msgstr ""

