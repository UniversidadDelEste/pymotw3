# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/bz2/index.rst:3
msgid "bz2 --- bzip2 Compression"
msgstr ""

#: ../../source/bz2/index.rst:8
msgid "bzip2 compression"
msgstr ""

#: ../../source/bz2/index.rst:10
msgid "The ``bz2`` module is an interface for the bzip2 library, used to compress data for storage or transmission.  There are three APIs provided:"
msgstr ""

#: ../../source/bz2/index.rst:14
msgid "\"one shot\" compression/decompression functions for operating on a blob of data"
msgstr ""

#: ../../source/bz2/index.rst:16
msgid "iterative compression/decompression objects for working with streams of data"
msgstr ""

#: ../../source/bz2/index.rst:18
msgid "a file-like class that supports reading and writing as with an uncompressed file"
msgstr ""

#: ../../source/bz2/index.rst:22
msgid "One-shot Operations in Memory"
msgstr ""

#: ../../source/bz2/index.rst:24
msgid "The simplest way to work with ``bz2`` is to load all of the data to be compressed or decompressed in memory, and then use ``compress()`` and ``decompress()`` to transform it."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_memory.py"
msgstr ""

#: ../../source/bz2/index.rst:32
msgid "The compressed data contains non-ASCII characters, so it needs to be converted to its hexadecimal representation before it can be printed. In the output from these examples, the hexadecimal version is reformatted to have at most 40 characters on each line."
msgstr ""

#: ../../source/bz2/index.rst:59
msgid "For short text, the compressed version can be significantly longer than the original.  While the actual results depend on the input data, it is interesting to observe the compression overhead."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_lengths.py"
msgstr ""

#: ../../source/bz2/index.rst:67
msgid "The output lines ending with ``*`` show the points where the compressed data is longer than the raw input."
msgstr ""

#: ../../source/bz2/index.rst:89
msgid "Incremental Compression and Decompression"
msgstr ""

#: ../../source/bz2/index.rst:91
msgid "The in-memory approach has obvious drawbacks that make it impractical for real-world use cases.  The alternative is to use ``BZ2Compressor`` and ``BZ2Decompressor`` objects to manipulate data incrementally so that the entire data set does not have to fit into memory."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_incremental.py"
msgstr ""

#: ../../source/bz2/index.rst:100
msgid "This example reads small blocks of data from a plain-text file and passes it to ``compress()``.  The compressor maintains an internal buffer of compressed data.  Since the compression algorithm depends on checksums and minimum block sizes, the compressor may not be ready to return data each time it receives more input.  If it does not have an entire compressed block ready, it returns an empty string.  When all of the data is fed in, the ``flush()`` method forces the compressor to close the final block and return the rest of the compressed data."
msgstr ""

#: ../../source/bz2/index.rst:132
msgid "Mixed Content Streams"
msgstr ""

#: ../../source/bz2/index.rst:134
msgid "``BZ2Decompressor`` can also be used in situations where compressed and uncompressed data is mixed together."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_mixed.py"
msgstr ""

#: ../../source/bz2/index.rst:141
msgid "After decompressing all of the data, the ``unused_data`` attribute contains any data not used."
msgstr ""

#: ../../source/bz2/index.rst:159
msgid "Writing Compressed Files"
msgstr ""

#: ../../source/bz2/index.rst:161
msgid "``BZ2File`` can be used to write to and read from bzip2-compressed files using the usual methods for writing and reading data."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_file_write.py"
msgstr ""

#: ../../source/bz2/index.rst:169
msgid "To write data into a compressed file, open the file with mode ``'wb'``. This example wraps the ``BZ2File`` with a ``TextIOWrapper`` from the :mod:`io` module to encode Unicode text to bytes suitable for compression."
msgstr ""

#: ../../source/bz2/index.rst:191
msgid "Different compression levels can be used by passing a ``compresslevel`` argument.  Valid values range from ``1`` to ``9``, inclusive.  Lower values are faster and result in less compression.  Higher values are slower and compress more, up to a point."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_file_compresslevel.py"
msgstr ""

#: ../../source/bz2/index.rst:200
msgid "The center column of numbers in the output of the script is the size in bytes of the files produced.  For this input data, the higher compression values do not always pay off in decreased storage space for the same input data.  Results will vary for other inputs."
msgstr ""

#: ../../source/bz2/index.rst:220
msgid "A ``BZ2File`` instance also includes a ``writelines()`` method that can be used to write a sequence of strings."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_file_writelines.py"
msgstr ""

#: ../../source/bz2/index.rst:227
msgid "The lines should end in a newline character, as when writing to a regular file."
msgstr ""

#: ../../source/bz2/index.rst:255
msgid "Reading Compressed Files"
msgstr ""

#: ../../source/bz2/index.rst:257
msgid "To read data back from previously compressed files, open the file with read mode (``'rb'``). The value returned from ``read()`` will be a byte string."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_file_read.py"
msgstr ""

#: ../../source/bz2/index.rst:265
msgid "This example reads the file written by ``bz2_file_write.py`` from the previous section. The ``BZ2File`` is wrapped with a ``TextIOWrapper`` to decode bytes read to Unicode text."
msgstr ""

#: ../../source/bz2/index.rst:282
msgid "While reading a file, it is also possible to seek, and to read only part of the data."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_file_seek.py"
msgstr ""

#: ../../source/bz2/index.rst:289
msgid "The ``seek()`` position is relative to the *uncompressed* data, so the caller does not need to be aware that the data file is compressed. This allows a ``BZ2File`` instance to be passed to a function expecting a regular uncompressed file."
msgstr ""

#: ../../source/bz2/index.rst:312
msgid "Reading and Writing Unicode Data"
msgstr ""

#: ../../source/bz2/index.rst:314
msgid "The previous examples used ``BZ2File`` directly and managed the encoding and decoding of Unicode text strings inline with an ``io.TextIOWrapper``, where necessary. These extra steps can be avoided by using ``bz2.open()``, which sets up an ``io.TextIOWrapper`` to handle the encoding or decoding automatically."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_unicode.py"
msgstr ""

#: ../../source/bz2/index.rst:325
msgid "The file handle returned by ``open()`` supports ``seek()``, but use care because the file pointer moves by *bytes* not *characters* and may end up in the middle of an encoded character."
msgstr ""

#: ../../source/bz2/index.rst:346
msgid "Compressing Network Data"
msgstr ""

#: ../../source/bz2/index.rst:348
msgid "The code in the next example responds to requests consisting of filenames by writing a compressed version of the file to the socket used to communicate with the client.  It has some artificial chunking in place to illustrate the buffering that occurs when the data passed to ``compress()`` or ``decompress()`` does not result in a complete block of compressed or uncompressed output."
msgstr ""

#: ../../source/bz2/index.rst:0
msgid "bz2_server.py"
msgstr ""

#: ../../source/bz2/index.rst:359
msgid "The main program starts a server in a thread, combining :mod:`SocketServer` and ``Bz2RequestHandler``."
msgstr ""

#: ../../source/bz2/index.rst:365
msgid "It then opens a socket to communicate with the server as a client, and requests the file (defaulting to ``lorem.txt``) which contains:"
msgstr ""

#: ../../source/bz2/index.rst:372
msgid "This implementation has obvious security implications.  Do not run it on a server on the open Internet or in any environment where security might be an issue."
msgstr ""

#: ../../source/bz2/index.rst:376
msgid "Running ``bz2_server.py`` produces:"
msgstr ""

#: ../../source/bz2/index.rst:440
msgid ":pydoc:`bz2`"
msgstr ""

#: ../../source/bz2/index.rst:442
msgid "`bzip2.org <http://www.bzip.org/>`_ -- The home page for ``bzip2``."
msgstr ""

#: ../../source/bz2/index.rst:445
msgid ":mod:`zlib` -- The ``zlib`` module for GNU zip compression."
msgstr ""

#: ../../source/bz2/index.rst:447
msgid ":mod:`gzip` -- A file-like interface to GNU zip compressed files."
msgstr ""

#: ../../source/bz2/index.rst:450
msgid ":mod:`io` -- Building-blocks for creating input and output pipelines."
msgstr ""

#: ../../source/bz2/index.rst:453
msgid ":ref:`Python 2 to 3 porting notes for bz2 <porting-bz2>`"
msgstr ""

