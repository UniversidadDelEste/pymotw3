# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/linecache/index.rst:3
msgid "linecache --- Read Text Files Efficiently"
msgstr ""

#: ../../source/linecache/index.rst:8
msgid "Retrieve lines of text from files or imported Python modules, holding a cache of the results to make reading many lines from the same file more efficient."
msgstr ""

#: ../../source/linecache/index.rst:12
msgid "The ``linecache`` module is used within other parts of the Python standard library when dealing with Python source files. The implementation of the cache holds the contents of files, parsed into separate lines, in memory. The API returns the requested line(s) by indexing into a ``list``, and saves time over repeatedly reading the file and parsing lines to find the one desired. This is especially useful when looking for multiple lines from the same file, such as when producing a traceback for an error report."
msgstr ""

#: ../../source/linecache/index.rst:22
msgid "Test Data"
msgstr ""

#: ../../source/linecache/index.rst:24
msgid "This text produced by a Lorem Ipsum generator is used as sample input."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_data.py"
msgstr ""

#: ../../source/linecache/index.rst:31
msgid "Reading Specific Lines"
msgstr ""

#: ../../source/linecache/index.rst:33
msgid "The line numbers of files read by the ``linecache`` module start with 1, but normally lists start indexing the array from 0."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_getline.py"
msgstr ""

#: ../../source/linecache/index.rst:40
msgid "Each line returned includes a trailing newline."
msgstr ""

#: ../../source/linecache/index.rst:59
msgid "Handling Blank Lines"
msgstr ""

#: ../../source/linecache/index.rst:61
msgid "The return value always includes the newline at the end of the line, so if the line is empty the return value is just the newline."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_empty_line.py"
msgstr ""

#: ../../source/linecache/index.rst:68
msgid "Line eight of the input file contains no text."
msgstr ""

#: ../../source/linecache/index.rst:83
msgid "Error Handling"
msgstr ""

#: ../../source/linecache/index.rst:85
msgid "If the requested line number falls out of the range of valid lines in the file, ``getline()`` returns an empty string."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_out_of_range.py"
msgstr ""

#: ../../source/linecache/index.rst:92
msgid "The input file only has 15 lines, so requesting line 500 is like trying to read past the end of the file."
msgstr ""

#: ../../source/linecache/index.rst:107
msgid "Reading from a file that does not exist is handled in the same way."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_missing_file.py"
msgstr ""

#: ../../source/linecache/index.rst:113
msgid "The module never raises an exception when the caller tries to read data."
msgstr ""

#: ../../source/linecache/index.rst:128
msgid "Reading Python Source Files"
msgstr ""

#: ../../source/linecache/index.rst:130
msgid "Since ``linecache`` is used so heavily when producing tracebacks, one of its key features is the ability to find Python source modules in the import path by specifying the base name of the module."
msgstr ""

#: ../../source/linecache/index.rst:0
msgid "linecache_path_search.py"
msgstr ""

#: ../../source/linecache/index.rst:138
msgid "The cache population code in ``linecache`` searches ``sys.path`` for the named module if it cannot find a file with that name in the current directory.  This example looks for ``linecache.py``.  Since there is no copy in the current directory, the file from the standard library is found instead."
msgstr ""

#: ../../source/linecache/index.rst:165
msgid ":pydoc:`linecache`"
msgstr ""

