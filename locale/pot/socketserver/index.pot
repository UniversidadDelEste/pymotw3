# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socketserver/index.rst:3
msgid "socketserver --- Creating Network Servers"
msgstr ""

#: ../../source/socketserver/index.rst:8
msgid "Creating network servers."
msgstr ""

#: ../../source/socketserver/index.rst:10
msgid "The ``socketserver`` module is a framework for creating network servers. It defines classes for handling synchronous network requests (the server request handler blocks until the request is completed) over TCP, UDP, Unix streams, and Unix datagrams. It also provides mix-in classes for easily converting servers to use a separate thread or process for each request."
msgstr ""

#: ../../source/socketserver/index.rst:17
msgid "Responsibility for processing a request is split between a server class and a request handler class. The server deals with the communication issues, such as listening on a socket and accepting connections, and the request handler deals with the \"protocol\" issues like interpreting incoming data, processing it, and sending data back to the client. This division of responsibility means that many applications can use one of the existing server classes without any modifications, and provide a request handler class for it to work with the custom protocol."
msgstr ""

#: ../../source/socketserver/index.rst:28
msgid "Server Types"
msgstr ""

#: ../../source/socketserver/index.rst:30
msgid "There are five different server classes defined in ``socketserver``.  ``BaseServer`` defines the API, and is not intended to be instantiated and used directly. ``TCPServer`` uses TCP/IP sockets to communicate. ``UDPServer`` uses datagram sockets. ``UnixStreamServer`` and ``UnixDatagramServer`` use Unix-domain sockets and are only available on Unix platforms."
msgstr ""

#: ../../source/socketserver/index.rst:38
msgid "Server Objects"
msgstr ""

#: ../../source/socketserver/index.rst:40
msgid "To construct a server, pass it an address on which to listen for requests and a request handler *class* (not instance). The address format depends on the server type and the socket family used. Refer to the :mod:`socket` module documentation for details."
msgstr ""

#: ../../source/socketserver/index.rst:45
msgid "Once the server object is instantiated, use either ``handle_request()`` or ``serve_forever()`` to process requests. The ``serve_forever()`` method calls ``handle_request()`` in an infinite loop, but if an application needs to integrate the server with another event loop or use ``select()`` to monitor several sockets for different servers, it can call ``handle_request()`` directly."
msgstr ""

#: ../../source/socketserver/index.rst:54
msgid "Implementing a Server"
msgstr ""

#: ../../source/socketserver/index.rst:56
msgid "When creating a server, it is usually sufficient to reuse one of the existing classes and provide a custom request handler class.  For other cases, ``BaseServer`` includes several methods that can be overridden in a subclass."
msgstr ""

#: ../../source/socketserver/index.rst:61
msgid "``verify_request(request, client_address)``: Return ``True`` to process the request or ``False`` to ignore it. For example, a server could refuse requests from an IP range or if it is overloaded."
msgstr ""

#: ../../source/socketserver/index.rst:65
msgid "``process_request(request, client_address)``: Calls ``finish_request()`` to actually do the work of handling the request.  It can also create a separate thread or process, as the mix-in classes do."
msgstr ""

#: ../../source/socketserver/index.rst:70
msgid "``finish_request(request, client_address)``: Creates a request handler instance using the class given to the server's constructor. Calls ``handle()`` on the request handler to process the request."
msgstr ""

#: ../../source/socketserver/index.rst:76
msgid "Request Handlers"
msgstr ""

#: ../../source/socketserver/index.rst:78
msgid "Request handlers do most of the work of receiving incoming requests and deciding what action to take. The handler is responsible for implementing the protocol on top of the socket layer (i.e., HTTP, XML-RPC, or AMQP). The request handler reads the request from the incoming data channel, processes it, and writes a response back out. There are three methods available to be over-ridden."
msgstr ""

#: ../../source/socketserver/index.rst:85
msgid "``setup()``: Prepares the request handler for the request. In the ``StreamRequestHandler`` the ``setup()`` method creates file-like objects for reading from and writing to the socket."
msgstr ""

#: ../../source/socketserver/index.rst:89
msgid "``handle()``: Does the real work for the request. Parse the incoming request, process the data, and send a response."
msgstr ""

#: ../../source/socketserver/index.rst:92
msgid "``finish()``: Cleans up anything created during ``setup()``."
msgstr ""

#: ../../source/socketserver/index.rst:94
msgid "Many handlers can be implemented with only a ``handle()`` method."
msgstr ""

#: ../../source/socketserver/index.rst:97
msgid "Echo Example"
msgstr ""

#: ../../source/socketserver/index.rst:99
msgid "This example implements a simple server/request handler pair that accepts TCP connections and echos back any data sent by the client. It starts with the request handler."
msgstr ""

#: ../../source/socketserver/index.rst:0
msgid "socketserver_echo.py"
msgstr ""

#: ../../source/socketserver/index.rst:107
msgid "The only method that actually needs to be implemented is ``EchoRequestHandler.handle()``, but versions of all of the methods described earlier are included to illustrate the sequence of calls made.  The ``EchoServer`` class does nothing different from ``TCPServer``, except log when each method is called."
msgstr ""

#: ../../source/socketserver/index.rst:117
msgid "The last step is to add a main program that sets up the server to run in a thread, and sends it data to illustrate which methods are called as the data is echoed back."
msgstr ""

#: ../../source/socketserver/index.rst:124
msgid "Running the program produces the following output."
msgstr ""

#: ../../source/socketserver/index.rst:169
msgid "The port number used will change each time the program runs because the kernel allocates an available port automatically. To make the server listen on a specific port each time, provide that number in the address tuple instead of the ``0``."
msgstr ""

#: ../../source/socketserver/index.rst:174
msgid "Here is a condensed version of the same server, without the logging calls.  Only the ``handle()`` method in the request handler class needs to be provided."
msgstr ""

#: ../../source/socketserver/index.rst:0
msgid "socketserver_echo_simple.py"
msgstr ""

#: ../../source/socketserver/index.rst:182
msgid "In this case, no special server class is required since the :mod:`TCPServer` handles all of the server requirements."
msgstr ""

#: ../../source/socketserver/index.rst:199
msgid "Threading and Forking"
msgstr ""

#: ../../source/socketserver/index.rst:201
msgid "To add threading or forking support to a server, include the appropriate mix-in in the class hierarchy for the server. The mix-in classes override ``process_request()`` to start a new thread or process when a request is ready to be handled, and the work is done in the new child."
msgstr ""

#: ../../source/socketserver/index.rst:207
msgid "For threads, use ``ThreadingMixIn``."
msgstr ""

#: ../../source/socketserver/index.rst:0
msgid "socketserver_threaded.py"
msgstr ""

#: ../../source/socketserver/index.rst:213
msgid "The response from this threaded server includes the identifier of the thread where the request is handled."
msgstr ""

#: ../../source/socketserver/index.rst:230
msgid "For separate processes, use the ``ForkingMixIn``."
msgstr ""

#: ../../source/socketserver/index.rst:0
msgid "socketserver_forking.py"
msgstr ""

#: ../../source/socketserver/index.rst:236
msgid "In this case, the process ID of the child is included in the response from the server:"
msgstr ""

#: ../../source/socketserver/index.rst:256
msgid ":pydoc:`socketserver`"
msgstr ""

#: ../../source/socketserver/index.rst:258
msgid ":mod:`socket` -- Low-level network communication"
msgstr ""

#: ../../source/socketserver/index.rst:260
msgid ":mod:`select` -- Low-level asynchronous I/O tools"
msgstr ""

#: ../../source/socketserver/index.rst:262
msgid ":mod:`asyncio` -- Asynchronous I/O, event loop, and concurrency tools"
msgstr ""

#: ../../source/socketserver/index.rst:264
msgid ":mod:`SimpleXMLRPCServer` -- XML-RPC server built using ``socketserver``."
msgstr ""

#: ../../source/socketserver/index.rst:267
msgid "*Unix Network Programming, Volume 1: The Sockets Networking API, 3/E* By W. Richard Stevens, Bill Fenner, and Andrew M. Rudoff. Published by Addison-Wesley Professional, 2004. ISBN-10: 0131411551"
msgstr ""

#: ../../source/socketserver/index.rst:272
msgid "*Foundations of Python Network Programminng, 3/E* By Brandon Rhodes and John Goerzen. Published by Apress, 2014. ISBN-10: 1430258543"
msgstr ""

