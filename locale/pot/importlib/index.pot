# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/importlib/index.rst:3
msgid "importlib --- Python's Import Mechanism"
msgstr ""

#: ../../source/importlib/index.rst:8
msgid "The importlib module exposes the implementation of Python's import statement."
msgstr ""

#: ../../source/importlib/index.rst:11
msgid "The ``importlib`` module includes functions that implement Python's import mechanism for loading code in packages and modules. It is one access point to importing modules dynamically, and useful in some cases where the name of the module that needs to be imported is unknown when the code is written (for example, for plugins or extensions to an application)."
msgstr ""

#: ../../source/importlib/index.rst:19
msgid "Example Package"
msgstr ""

#: ../../source/importlib/index.rst:21
msgid "The examples in this section use a package called ``example`` with ``__init__.py``."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "example/__init__.py"
msgstr ""

#: ../../source/importlib/index.rst:28
msgid "The package also contains ``submodule.py``."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "example/submodule.py"
msgstr ""

#: ../../source/importlib/index.rst:34
msgid "Watch for the text from the ``print()`` calls in the sample output when the package or module are imported."
msgstr ""

#: ../../source/importlib/index.rst:38
msgid "Module Types"
msgstr ""

#: ../../source/importlib/index.rst:40
msgid "Python supports several styles of modules. Each requires its own handling when opening the module and adding it to the namespace, and support for the formats varies by platform.  For example, under Microsoft Windows, shared libraries are loaded from files with extensions ``.dll`` or ``.pyd``, instead of ``.so``.  The extensions for C modules may also change when using a debug build of the interpreter instead of a normal release build, since they can be compiled with debug information included as well.  If a C extension library or other module is not loading as expected, use the constants defined in ``importlib.machinery`` to find the supported types for the current platform, and the parameters for loading them."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_suffixes.py"
msgstr ""

#: ../../source/importlib/index.rst:56
msgid "The return value is a sequence of tuples containing the file extension, mode to use for opening the file containing the module, and a type code from a constant defined in the module. This table is incomplete, because some of the importable module or package types do not correspond to single files."
msgstr ""

#: ../../source/importlib/index.rst:79
msgid "Importing Modules"
msgstr ""

#: ../../source/importlib/index.rst:81
msgid "The high level API in ``importlib`` makes it simple to import a module given an absolute or relative name.  When using a relative module name, specify the package containing the module as a separate argument."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_import_module.py"
msgstr ""

#: ../../source/importlib/index.rst:90
msgid "The return value from ``import_module()`` is the module object that was created by the import."
msgstr ""

#: ../../source/importlib/index.rst:109
msgid "If the module cannot be imported, ``import_module()`` raises ``ImportError``."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_import_module_error.py"
msgstr ""

#: ../../source/importlib/index.rst:116
msgid "The error message includes the name of the missing module."
msgstr ""

#: ../../source/importlib/index.rst:131
msgid "To reload an existing module, use ``reload()``."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_reload.py"
msgstr ""

#: ../../source/importlib/index.rst:137
msgid "The return value from ``reload()`` is the new module. Depending on which type of loader was used, it may be the same module instance."
msgstr ""

#: ../../source/importlib/index.rst:157
msgid "Loaders"
msgstr ""

#: ../../source/importlib/index.rst:159
msgid "The lower-level API in ``importlib`` provides access to the loader objects, as described in :ref:`sys-imports` from the section on the ``sys`` module. To get a loader for a module, use ``find_loader()``. Then to retrieve the module, use the loader's ``load_module()`` method."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_find_loader.py"
msgstr ""

#: ../../source/importlib/index.rst:169
msgid "This example loads the top level of the ``example`` package."
msgstr ""

#: ../../source/importlib/index.rst:186
msgid "Submodules within packages need to be loaded separately using the path from the package. In the following example, the package is loaded first and then its path is passed to ``find_loader()`` to create a loader capable of loading the submodule."
msgstr ""

#: ../../source/importlib/index.rst:0
msgid "importlib_submodule.py"
msgstr ""

#: ../../source/importlib/index.rst:195
msgid "Unlike with ``import_module()``, the name of the submodule should be given without any relative path prefix, since the loader will already be constrained by the package's path."
msgstr ""

#: ../../source/importlib/index.rst:217
msgid ":pydoc:`importlib`"
msgstr ""

#: ../../source/importlib/index.rst:219
msgid ":ref:`sys-imports` -- Import hooks, the module search path, and other related machinery in the ``sys`` module."
msgstr ""

#: ../../source/importlib/index.rst:222
msgid ":mod:`inspect` -- Load information from a module programmatically."
msgstr ""

#: ../../source/importlib/index.rst:225
msgid ":pep:`302` -- New import hooks."
msgstr ""

#: ../../source/importlib/index.rst:227
msgid ":pep:`369` -- Post import hooks."
msgstr ""

#: ../../source/importlib/index.rst:229
msgid ":pep:`488` -- Elimination of PYO files."
msgstr ""

