# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/tempfile/index.rst:3
msgid "tempfile --- Temporary File System Objects"
msgstr ""

#: ../../source/tempfile/index.rst:8
msgid "Create temporary file system objects."
msgstr ""

#: ../../source/tempfile/index.rst:10
msgid "Creating temporary files with unique names securely, so they cannot be guessed by someone wanting to break the application or steal the data, is challenging. The ``tempfile`` module provides several functions for creating temporary file system resources securely. ``TemporaryFile()`` opens and returns an unnamed file, ``NamedTemporaryFile()`` opens and returns a named file, ``SpooledTemporaryFile`` holds its content in memory before writing to disk, and ``TemporaryDirectory`` is a context manager that removes the directory when the context is closed."
msgstr ""

#: ../../source/tempfile/index.rst:21
msgid "Temporary Files"
msgstr ""

#: ../../source/tempfile/index.rst:23
msgid "Applications that need temporary files to store data, without needing to share that file with other programs, should use the ``TemporaryFile()`` function to create the files. The function creates a file, and on platforms where it is possible, unlinks it immediately. This makes it impossible for another program to find or open the file, since there is no reference to it in the file system table. The file created by ``TemporaryFile()`` is removed automatically when it is closed, whether by calling ``close()`` or by using the context manager API and ``with`` statement."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_TemporaryFile.py"
msgstr ""

#: ../../source/tempfile/index.rst:37
msgid "This example illustrates the difference in creating a temporary file using a common pattern for making up a name, versus using the ``TemporaryFile()`` function. The file returned by ``TemporaryFile()`` has no name."
msgstr ""

#: ../../source/tempfile/index.rst:64
msgid "By default, the file handle is created with mode ``'w+b'`` so it behaves consistently on all platforms and the caller can write to it and read from it."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_TemporaryFile_binary.py"
msgstr ""

#: ../../source/tempfile/index.rst:72
msgid "After writing, the file handle must be \"rewound\" using ``seek()`` in order to read the data back from it."
msgstr ""

#: ../../source/tempfile/index.rst:87
msgid "To open the file in text mode, set ``mode`` to ``'w+t'`` when the file is created."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_TemporaryFile_text.py"
msgstr ""

#: ../../source/tempfile/index.rst:94
msgid "The file handle treats the data as text."
msgstr ""

#: ../../source/tempfile/index.rst:110
msgid "Named Files"
msgstr ""

#: ../../source/tempfile/index.rst:112
msgid "There are situations where having a named temporary file is important. For applications spanning multiple processes, or even hosts, naming the file is the simplest way to pass it between parts of the application. The ``NamedTemporaryFile()`` function creates a file without unlinking it, so it retains its name (accessed with the :attr:`name` attribute)."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_NamedTemporaryFile.py"
msgstr ""

#: ../../source/tempfile/index.rst:123
msgid "The file is removed after the handle is closed."
msgstr ""

#: ../../source/tempfile/index.rst:142
msgid "Spooled Files"
msgstr ""

#: ../../source/tempfile/index.rst:144
msgid "For temporary files containing relatively small amounts of data, it is likely to be more efficient to use a ``SpooledTemporaryFile`` because it holds the file contents in memory using a ``io.BytesIO`` or ``io.StringIO`` buffer until they reach a threshold size. When the amount of data passes the threshold, it is \"rolled over\" and written to disk, and then the buffer is replaced with a normal ``TemporaryFile()``."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_SpooledTemporaryFile.py"
msgstr ""

#: ../../source/tempfile/index.rst:156
msgid "This example uses private attributes of the ``SpooledTemporaryFile`` to determine when the rollover to disk has happened. It is not normally necessary to check this status except when tuning the buffer size."
msgstr ""

#: ../../source/tempfile/index.rst:176
msgid "To explicitly cause the buffer to be written to disk, call the ``rollover()`` or ``fileno()`` methods."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_SpooledTemporaryFile_explicit.py"
msgstr ""

#: ../../source/tempfile/index.rst:183
msgid "In this example, because the buffer size is so much larger than the amount of data, no file would be created on disk except that ``rollover()`` was called."
msgstr ""

#: ../../source/tempfile/index.rst:205
msgid "Temporary Directories"
msgstr ""

#: ../../source/tempfile/index.rst:207
msgid "When several temporary files are needed, it may be more convenient to create a single temporary directory with ``TemporaryDirectory`` and open all of the files in that directory."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_TemporaryDirectory.py"
msgstr ""

#: ../../source/tempfile/index.rst:215
msgid "The context manager produces the name of the directory, which can then be used within the context block to build other file names."
msgstr ""

#: ../../source/tempfile/index.rst:233
msgid "Predicting Names"
msgstr ""

#: ../../source/tempfile/index.rst:235
msgid "While less secure than strictly anonymous temporary files, including a predictable portion in the name makes it possible to find the file and examine it for debugging purposes. All of the functions described so far take three arguments to control the filenames to some degree. Names are generated using the formula:"
msgstr ""

#: ../../source/tempfile/index.rst:245
msgid "All of the values except ``random`` can be passed as arguments to the functions for creating temporary files or directories."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_NamedTemporaryFile_args.py"
msgstr ""

#: ../../source/tempfile/index.rst:252
msgid "The ``prefix`` and ``suffix`` arguments are combined with a random string of characters to build the filename, and the ``dir`` argument is taken as-is and used as the location of the new file."
msgstr ""

#: ../../source/tempfile/index.rst:272
msgid "Temporary File Location"
msgstr ""

#: ../../source/tempfile/index.rst:274
msgid "If an explicit destination is not given using the ``dir`` argument, the path used for the temporary files will vary based on the current platform and settings. The ``tempfile`` module includes two functions for querying the settings being used at runtime."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_settings.py"
msgstr ""

#: ../../source/tempfile/index.rst:283
msgid "``gettempdir()`` returns the default directory that will hold all of the temporary files and ``gettempprefix()`` returns the string prefix for new file and directory names."
msgstr ""

#: ../../source/tempfile/index.rst:300
msgid "The value returned by ``gettempdir()`` is set based on a straightforward algorithm of looking through a list of locations for the first place the current process can create a file.  The search list is:"
msgstr ""

#: ../../source/tempfile/index.rst:305
msgid "The environment variable ``TMPDIR``"
msgstr ""

#: ../../source/tempfile/index.rst:306
msgid "The environment variable ``TEMP``"
msgstr ""

#: ../../source/tempfile/index.rst:307
msgid "The environment variable ``TMP``"
msgstr ""

#: ../../source/tempfile/index.rst:308
msgid "A fallback, based on the platform.  (Windows uses the first available of ``C:\\temp``, ``C:\\tmp``, ``\\temp``, or ``\\tmp``. Other platforms use ``/tmp``, ``/var/tmp``, or ``/usr/tmp``.)"
msgstr ""

#: ../../source/tempfile/index.rst:311
msgid "If no other directory can be found, the current working directory is used."
msgstr ""

#: ../../source/tempfile/index.rst:0
msgid "tempfile_tempdir.py"
msgstr ""

#: ../../source/tempfile/index.rst:318
msgid "Programs that need to use a global location for all temporary files without using any of these environment variables should set ``tempfile.tempdir`` directly by assigning a value to the variable."
msgstr ""

#: ../../source/tempfile/index.rst:337
msgid ":pydoc:`tempfile`"
msgstr ""

#: ../../source/tempfile/index.rst:339
msgid ":mod:`random` -- Psuedorandom number generators, used to introduce random values into temporary file names"
msgstr ""

