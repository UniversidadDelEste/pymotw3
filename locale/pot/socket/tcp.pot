# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socket/tcp.rst:3
msgid "TCP/IP Client and Server"
msgstr ""

#: ../../source/socket/tcp.rst:5
msgid "Sockets can be configured to act as a *server* and listen for incoming messages, or connect to other applications as a *client*.  After both ends of a TCP/IP socket are connected, communication is bi-directional."
msgstr ""

#: ../../source/socket/tcp.rst:11
msgid "Echo Server"
msgstr ""

#: ../../source/socket/tcp.rst:13
msgid "This sample program, based on the one in the standard library documentation, receives incoming messages and echos them back to the sender.  It starts by creating a TCP/IP socket, then ``bind()`` is used to associate the socket with the server address.  In this case, the address is ``localhost``, referring to the current server, and the port number is 10000."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_server.py"
msgstr ""

#: ../../source/socket/tcp.rst:25
msgid "Calling ``listen()`` puts the socket into server mode, and ``accept()`` waits for an incoming connection.  The integer argument is the number of connections the system should queue up in the background before rejecting new clients.  This example only expects to work with one connection at a time."
msgstr ""

#: ../../source/socket/tcp.rst:31
msgid "``accept()`` returns an open connection between the server and client, along with the address of the client.  The connection is actually a different socket on another port (assigned by the kernel). Data is read from the connection with ``recv()`` and transmitted with ``sendall()``."
msgstr ""

#: ../../source/socket/tcp.rst:37
msgid "When communication with a client is finished, the connection needs to be cleaned up using ``close()``.  This example uses a ``try:finally`` block to ensure that ``close()`` is always called, even in the event of an error."
msgstr ""

#: ../../source/socket/tcp.rst:43
msgid "Echo Client"
msgstr ""

#: ../../source/socket/tcp.rst:45
msgid "The client program sets up its ``socket`` differently from the way a server does.  Instead of binding to a port and listening, it uses ``connect()`` to attach the socket directly to the remote address."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_client.py"
msgstr ""

#: ../../source/socket/tcp.rst:54
msgid "After the connection is established, data can be sent through the ``socket`` with ``sendall()`` and received with ``recv()``, just as in the server. When the entire message is sent and a copy received, the socket is closed to free up the port."
msgstr ""

#: ../../source/socket/tcp.rst:60
msgid "Client and Server Together"
msgstr ""

#: ../../source/socket/tcp.rst:62
msgid "The client and server should be run in separate terminal windows, so they can communicate with each other.  The server output shows the incoming connection and data, as well as the response sent back to the client."
msgstr ""

#: ../../source/socket/tcp.rst:85
msgid "The client output shows the outgoing message and the response from the server."
msgstr ""

#: ../../source/socket/tcp.rst:101
msgid "Easy Client Connections"
msgstr ""

#: ../../source/socket/tcp.rst:103
msgid "TCP/IP clients can save a few steps by using the convenience function ``create_connection()`` to connect to a server.  The function takes one argument, a two-value tuple containing the address of the server, and derives the best address to use for the connection."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_client_easy.py"
msgstr ""

#: ../../source/socket/tcp.rst:112
msgid "``create_connection()`` uses ``getaddrinfo()`` to find candidate connection parameters, and returns a ``socket`` opened with the first configuration that creates a successful connection.  The :attr:`family`, :attr:`type`, and :attr:`proto` attributes can be examined to determine the type of ``socket`` being returned."
msgstr ""

#: ../../source/socket/tcp.rst:134
msgid "Choosing an Address for Listening"
msgstr ""

#: ../../source/socket/tcp.rst:136
msgid "It is important to bind a server to the correct address, so that clients can communicate with it.  The previous examples all used ``'localhost'`` as the IP address, which limits connections to clients running on the same server.  Use a public address of the server, such as the value returned by ``gethostname()``, to allow other hosts to connect.  This example modifies the echo server to listen on an address specified via a command line argument."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_server_explicit.py"
msgstr ""

#: ../../source/socket/tcp.rst:148
msgid "A similar modification to the client program is needed before the server can be tested."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_client_explicit.py"
msgstr ""

#: ../../source/socket/tcp.rst:155
msgid "After starting the server with the argument ``hubert``, the ``netstat`` command shows it listening on the address for the named host."
msgstr ""

#: ../../source/socket/tcp.rst:175
msgid "Running the client on another host, passing ``hubert.hellfly.net`` as the host where the server is running, produces:"
msgstr ""

#: ../../source/socket/tcp.rst:194
msgid "And the server output is:"
msgstr ""

#: ../../source/socket/tcp.rst:213
msgid "Many servers have more than one network interface, and therefore more than one IP address.  Rather than running separate copies of a service bound to each IP address, use the special address ``INADDR_ANY`` to listen on all addresses at the same time.  Although ``socket`` defines a constant for ``INADDR_ANY``, it is an integer value and must be converted to a dotted-notation string address before it can be passed to ``bind()``.  As a shortcut, use \"``0.0.0.0``\" or an empty string (``''``) instead of doing the conversion."
msgstr ""

#: ../../source/socket/tcp.rst:0
msgid "socket_echo_server_any.py"
msgstr ""

#: ../../source/socket/tcp.rst:226
msgid "To see the actual address being used by a socket, call its ``getsockname()`` method.  After starting the service, running ``netstat`` again shows it listening for incoming connections on any address."
msgstr ""

