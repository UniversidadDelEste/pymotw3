# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socket/udp.rst:3
msgid "User Datagram Client and Server"
msgstr ""

#: ../../source/socket/udp.rst:5
msgid "The user datagram protocol (UDP) works differently from TCP/IP.  Where TCP is a *stream oriented* protocol, ensuring that all of the data is transmitted in the right order, UDP is a *message oriented* protocol. UDP does not require a long-lived connection, so setting up a UDP socket is a little simpler.  On the other hand, UDP messages must fit within a single datagram (for IPv4, that means they can only hold 65,507 bytes because the 65,535 byte packet also includes header information) and delivery is not guaranteed as it is with TCP."
msgstr ""

#: ../../source/socket/udp.rst:15
msgid "Echo Server"
msgstr ""

#: ../../source/socket/udp.rst:17
msgid "Since there is no connection, per se, the server does not need to listen for and accept connections.  It only needs to use ``bind()`` to associate its socket with a port, and then wait for individual messages."
msgstr ""

#: ../../source/socket/udp.rst:0
msgid "socket_echo_server_dgram.py"
msgstr ""

#: ../../source/socket/udp.rst:26
msgid "Messages are read from the socket using ``recvfrom()``, which returns the data as well as the address of the client from which it was sent."
msgstr ""

#: ../../source/socket/udp.rst:31
msgid "Echo Client"
msgstr ""

#: ../../source/socket/udp.rst:33
msgid "The UDP echo client is similar the server, but does not use ``bind()`` to attach its socket to an address.  It uses ``sendto()`` to deliver its message directly to the server, and ``recvfrom()`` to receive the response."
msgstr ""

#: ../../source/socket/udp.rst:0
msgid "socket_echo_client_dgram.py"
msgstr ""

#: ../../source/socket/udp.rst:43
msgid "Client and Server Together"
msgstr ""

#: ../../source/socket/udp.rst:45
msgid "Running the server produces:"
msgstr ""

#: ../../source/socket/udp.rst:59
msgid "The client output is:"
msgstr ""

