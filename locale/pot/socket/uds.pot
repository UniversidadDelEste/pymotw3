# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socket/uds.rst:3
msgid "Unix Domain Sockets"
msgstr ""

#: ../../source/socket/uds.rst:5
msgid "From the programmer's perspective there are two essential differences between using a Unix domain socket and an TCP/IP socket.  First, the address of the socket is a path on the file system, rather than a tuple containing the server name and port.  Second, the node created in the file system to represent the socket persists after the socket is closed, and needs to be removed each time the server starts up.  The echo server example from earlier can be updated to use UDS by making a few changes in the setup section."
msgstr ""

#: ../../source/socket/uds.rst:14
msgid "The ``socket`` needs to be created with address family ``AF_UNIX``. Binding the socket and managing the incoming connections works the same as with TCP/IP sockets."
msgstr ""

#: ../../source/socket/uds.rst:0
msgid "socket_echo_server_uds.py"
msgstr ""

#: ../../source/socket/uds.rst:22
msgid "The client setup also needs to be modified to work with UDS.  It should assume the file system node for the socket exists, since the server creates it by binding to the address.  Sending and receiving data works the same way in the UDS client as the TCP/IP client from before."
msgstr ""

#: ../../source/socket/uds.rst:0
msgid "socket_echo_client_uds.py"
msgstr ""

#: ../../source/socket/uds.rst:32
msgid "The program output is mostly the same, with appropriate updates for the address information.  The server shows the messages received and sent back to the client."
msgstr ""

#: ../../source/socket/uds.rst:54
msgid "The client sends the message all at once, and receives parts of it back incrementally."
msgstr ""

#: ../../source/socket/uds.rst:70
msgid "Permissions"
msgstr ""

#: ../../source/socket/uds.rst:72
msgid "Since the UDS socket is represented by a node on the file system, standard file system permissions can be used to control access to the server."
msgstr ""

#: ../../source/socket/uds.rst:90
msgid "Running the client as a user other than ``root`` now results in an error because the process does not have permission to open the socket."
msgstr ""

#: ../../source/socket/uds.rst:103
msgid "Communication Between Parent and Child Processes"
msgstr ""

#: ../../source/socket/uds.rst:105
msgid "The ``socketpair()`` function is useful for setting up UDS sockets for inter-process communication under Unix.  It creates a pair of connected sockets that can be used to communicate between a parent process and a child process after the child is forked."
msgstr ""

#: ../../source/socket/uds.rst:0
msgid "socket_socketpair.py"
msgstr ""

#: ../../source/socket/uds.rst:114
msgid "By default, a UDS socket is created, but the caller can also pass address family, socket type, and even protocol options to control how the sockets are created."
msgstr ""

