# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socket/binary.rst:3
msgid "Sending Binary Data"
msgstr ""

#: ../../source/socket/binary.rst:5
msgid "Sockets transmit streams of bytes.  Those bytes can contain text messages encoded to bytes, as in the previous examples, or they can be made up of binary data that has been packed into a buffer with :mod:`struct` to prepare it for transmission."
msgstr ""

#: ../../source/socket/binary.rst:10
msgid "This client program encodes an integer, a string of two characters, and a floating point value into a sequence of bytes that can be passed to the socket for transmission."
msgstr ""

#: ../../source/socket/binary.rst:0
msgid "socket_binary_client.py"
msgstr ""

#: ../../source/socket/binary.rst:18
msgid "When sending multi-byte binary data between two systems, it is important to ensure that both sides of the connection know what order the bytes are in and how to assemble them back into the correct order for the local architecture.  The server program uses the same ``Struct`` specifier to unpack the bytes it receives so they are interpreted in the correct order."
msgstr ""

#: ../../source/socket/binary.rst:0
msgid "socket_binary_server.py"
msgstr ""

#: ../../source/socket/binary.rst:29
msgid "Running the client produces:"
msgstr ""

#: ../../source/socket/binary.rst:40
msgid "And the server shows the values it receives:"
msgstr ""

#: ../../source/socket/binary.rst:54
msgid "The floating point value loses some precision as it is packed and unpacked, but otherwise the data is transmitted as expected.  One thing to keep in mind is that depending on the value of the integer, it may be more efficient to convert it to text and then transmit, instead of using ``struct``.  The integer ``1`` uses one byte when represented as a string, but four when packed into the structure."
msgstr ""

#: ../../source/socket/binary.rst:63
msgid ":mod:`struct` -- Converting between strings and other data types."
msgstr ""

