# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/struct/index.rst:3
msgid "struct --- Binary Data Structures"
msgstr ""

#: ../../source/struct/index.rst:8
msgid "Convert between strings and binary data."
msgstr ""

#: ../../source/struct/index.rst:10
msgid "The ``struct`` module includes functions for converting between strings of bytes and native Python data types such as numbers and strings."
msgstr ""

#: ../../source/struct/index.rst:15
msgid "Functions versus Struct Class"
msgstr ""

#: ../../source/struct/index.rst:17
msgid "A set of module-level functions is available for working with structured values, as well as the ``Struct`` class.  Format specifiers are converted from their string format to a compiled representation, similar to the way regular expressions are handled. The conversion takes some resources, so it is typically more efficient to do it once when creating a ``Struct`` instance and call methods on the instance instead of using the module-level functions. All of the following examples use the ``Struct`` class."
msgstr ""

#: ../../source/struct/index.rst:27
msgid "Packing and Unpacking"
msgstr ""

#: ../../source/struct/index.rst:29
msgid "Structs support *packing* data into strings, and *unpacking* data from strings using format specifiers made up of characters representing the type of the data and optional count and endianness indicators.  Refer to the standard library documentation for a complete list of the supported format specifiers."
msgstr ""

#: ../../source/struct/index.rst:35
msgid "In this example, the specifier calls for an integer or long integer value, a two-byte string, and a floating-point number.  The spaces in the format specifier are included to separate the type indicators, and are ignored when the format is compiled."
msgstr ""

#: ../../source/struct/index.rst:0
msgid "struct_pack.py"
msgstr ""

#: ../../source/struct/index.rst:44
msgid "The example converts the packed value to a sequence of hex bytes for printing with ``binascii.hexlify()``, since some of the characters are nulls."
msgstr ""

#: ../../source/struct/index.rst:63
msgid "Use ``unpack()`` to extract data from its packed representation."
msgstr ""

#: ../../source/struct/index.rst:0
msgid "struct_unpack.py"
msgstr ""

#: ../../source/struct/index.rst:69
msgid "Passing the packed value to ``unpack()``, gives basically the same values back (note the discrepancy in the floating point value)."
msgstr ""

#: ../../source/struct/index.rst:86
msgid "Endianness"
msgstr ""

#: ../../source/struct/index.rst:88
msgid "By default, values are encoded using the native C library notion of *endianness*.  It is easy to override that choice by providing an explicit endianness directive in the format string."
msgstr ""

#: ../../source/struct/index.rst:0
msgid "struct_endianness.py"
msgstr ""

#: ../../source/struct/index.rst:96
msgid ":table:`Byte Order Specifiers for struct` lists the byte order specifiers used by ``Struct``."
msgstr ""

#: ../../source/struct/index.rst:0
msgid "Byte Order Specifiers for struct"
msgstr ""

#: ../../source/struct/index.rst:102
msgid "Code"
msgstr ""

#: ../../source/struct/index.rst:102
msgid "Meaning"
msgstr ""

#: ../../source/struct/index.rst:104
msgid "``@``"
msgstr ""

#: ../../source/struct/index.rst:104
msgid "Native order"
msgstr ""

#: ../../source/struct/index.rst:105
msgid "``=``"
msgstr ""

#: ../../source/struct/index.rst:105
msgid "Native standard"
msgstr ""

#: ../../source/struct/index.rst:106
msgid "``<``"
msgstr ""

#: ../../source/struct/index.rst:106
msgid "little-endian"
msgstr ""

#: ../../source/struct/index.rst:107
msgid "``>``"
msgstr ""

#: ../../source/struct/index.rst:107
msgid "big-endian"
msgstr ""

#: ../../source/struct/index.rst:108
msgid "``!``"
msgstr ""

#: ../../source/struct/index.rst:108
msgid "Network order"
msgstr ""

#: ../../source/struct/index.rst:149
msgid "Buffers"
msgstr ""

#: ../../source/struct/index.rst:151
msgid "Working with binary packed data is typically reserved for performance-sensitive situations or passing data into and out of extension modules.  These cases can be optimized by avoiding the overhead of allocating a new buffer for each packed structure.  The :meth:`pack_into` and :meth:`unpack_from` methods support writing to pre-allocated buffers directly."
msgstr ""

#: ../../source/struct/index.rst:0
msgid "struct_buffers.py"
msgstr ""

#: ../../source/struct/index.rst:162
msgid "The ``size`` attribute of the ``Struct`` tells us how big the buffer needs to be."
msgstr ""

#: ../../source/struct/index.rst:190
msgid ":pydoc:`struct`"
msgstr ""

#: ../../source/struct/index.rst:192
msgid ":ref:`Python 2 to 3 porting notes for struct <porting-struct>`"
msgstr ""

#: ../../source/struct/index.rst:194
msgid ":mod:`array` -- The ``array`` module, for working with sequences of fixed-type values."
msgstr ""

#: ../../source/struct/index.rst:197
msgid ":mod:`binascii` -- The ``binascii`` module, for producing ASCII representations of binary data."
msgstr ""

#: ../../source/struct/index.rst:200
msgid "`WikiPedia: Endianness <https://en.wikipedia.org/wiki/Endianness>`_ -- Explanation of byte order and endianness in encoding."
msgstr ""

