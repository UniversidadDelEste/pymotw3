# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/cgitb/index.rst:3
msgid "cgitb --- Detailed Traceback Reports"
msgstr ""

#: ../../source/cgitb/index.rst:8
msgid "cgitb provides more detailed traceback information than :mod:`traceback`."
msgstr ""

#: ../../source/cgitb/index.rst:10
msgid "``cgitb`` is a valuable debugging tool in the standard library.  It was originally designed for showing errors and debugging information in web applications and was later updated to include plain-text output as well, but unfortunately was never renamed.  This has led to obscurity, and the module is not used as often as it could be."
msgstr ""

#: ../../source/cgitb/index.rst:17
msgid "Standard Traceback Dumps"
msgstr ""

#: ../../source/cgitb/index.rst:19
msgid "Python's default exception handling behavior is to print a traceback to the standard error output stream with the call stack leading up to the error position.  This basic output frequently contains enough information to understand the cause of the exception and permit a fix."
msgstr ""

#: ../../source/cgitb/index.rst:0
msgid "cgitb_basic_traceback.py"
msgstr ""

#: ../../source/cgitb/index.rst:28
msgid "This sample program has a subtle error in ``func2()``."
msgstr ""

#: ../../source/cgitb/index.rst:50
msgid "Enabling Detailed Tracebacks"
msgstr ""

#: ../../source/cgitb/index.rst:52
msgid "While the basic traceback includes enough information to spot the error, enabling ``cgitb`` gives more detail.  ``cgitb`` replaces ``sys.excepthook`` with a function that gives extended tracebacks."
msgstr ""

#: ../../source/cgitb/index.rst:0
msgid "cgitb_local_vars.py"
msgstr ""

#: ../../source/cgitb/index.rst:61
msgid "The error report from this example is much more extensive than the original.  Each frame of the stack is listed, along with:"
msgstr ""

#: ../../source/cgitb/index.rst:64
msgid "The full path to the source file, instead of just the base name"
msgstr ""

#: ../../source/cgitb/index.rst:65
msgid "The values of the arguments to each function in the stack"
msgstr ""

#: ../../source/cgitb/index.rst:66
msgid "A few lines of source context from around the line in the error path"
msgstr ""

#: ../../source/cgitb/index.rst:67
msgid "The values of variables in the expression causing the error"
msgstr ""

#: ../../source/cgitb/index.rst:69
msgid "Having access to the variables involved in the error stack can help find a logical error that occurs somewhere higher in the stack than the line where the actual exception is generated."
msgstr ""

#: ../../source/cgitb/index.rst:188
msgid "In the case of this code with a ``ZeroDivisionError``, it is apparent that the problem is introduced in the computation of the value of ``c`` in ``func1()``, rather than where the value is used in ``func2()``."
msgstr ""

#: ../../source/cgitb/index.rst:193
msgid "The end of the output also includes the full details of the exception object (in case it has attributes other than ``message`` that would be useful for debugging) and the original form of a traceback dump."
msgstr ""

#: ../../source/cgitb/index.rst:198
msgid "Local Variables in Tracebacks"
msgstr ""

#: ../../source/cgitb/index.rst:200
msgid "The code in ``cgitb`` that examines the variables used in the stack frame leading to the error is smart enough to evaluate object attributes to display them, too."
msgstr ""

#: ../../source/cgitb/index.rst:0
msgid "cgitb_with_classes.py"
msgstr ""

#: ../../source/cgitb/index.rst:208
msgid "If a function or method includes a lot of in-line comments, whitespace, or other code that makes it very long, then having the default of five lines of context may not provide enough direction. When the body of the function is pushed out of the code window displayed, there is not enough context to understand the location of the error.  Using a larger context value with ``cgitb`` solves this problem.  Passing an integer as the ``context`` argument to ``enable()`` controls the amount of code displayed for each line of the traceback."
msgstr ""

#: ../../source/cgitb/index.rst:218
msgid "This output shows that ``self.a`` and ``self.b`` are involved in the error-prone code."
msgstr ""

#: ../../source/cgitb/index.rst:343
msgid "Exception Properties"
msgstr ""

#: ../../source/cgitb/index.rst:345
msgid "In addition to the local variables from each stack frame, ``cgitb`` shows all properties of the exception object.  Extra properties on custom exception types are printed as part of the error report."
msgstr ""

#: ../../source/cgitb/index.rst:0
msgid "cgitb_exception_properties.py"
msgstr ""

#: ../../source/cgitb/index.rst:353
msgid "In this example, the ``bad_value`` property is included along with the standard ``message`` and ``args`` values."
msgstr ""

#: ../../source/cgitb/index.rst:443
msgid "HTML Output"
msgstr ""

#: ../../source/cgitb/index.rst:445
msgid "Because ``cgitb`` was originally developed for handling exceptions in web applications, no discussion would be complete without mentioning its original HTML output format.  The earlier examples all shows plain text output.  To produce HTML instead, leave out the ``format`` argument (or specify ``\"html\"``).  Most modern web applications are constructed using a framework that includes an error reporting facility, so the HTML form is largely obsolete."
msgstr ""

#: ../../source/cgitb/index.rst:454
msgid "Logging Tracebacks"
msgstr ""

#: ../../source/cgitb/index.rst:456
msgid "For many situations, printing the traceback details to standard error is the best resolution.  In a production system, however, logging the errors is even better.  The ``enable()`` function includes an optional argument, ``logdir``, to enable error logging.  When a directory name is provided, each exception is logged to its own file in the given directory."
msgstr ""

#: ../../source/cgitb/index.rst:0
msgid "cgitb_log_exception.py"
msgstr ""

#: ../../source/cgitb/index.rst:467
msgid "Even though the error display is suppressed, a message is printed describing where to go to find the error log."
msgstr ""

#: ../../source/cgitb/index.rst:587
msgid ":pydoc:`cgitb`"
msgstr ""

#: ../../source/cgitb/index.rst:589
msgid ":mod:`traceback` -- Standard library module for working with tracebacks."
msgstr ""

#: ../../source/cgitb/index.rst:592
msgid ":mod:`inspect` -- The ``inspect`` module includes more functions for examining the stack."
msgstr ""

#: ../../source/cgitb/index.rst:595
msgid ":mod:`sys` -- The ``sys`` module provides access to the current exception value and the ``excepthook`` handler invoked when an exception occurs."
msgstr ""

#: ../../source/cgitb/index.rst:599
msgid "`Improved traceback module <http://thread.gmane.org/gmane.comp.python.devel/110326>`_ -- Discussion on the Python development mailing list about improvements to the traceback module and related enhancements other developers use locally."
msgstr ""

