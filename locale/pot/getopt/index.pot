# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/getopt/index.rst:3
msgid "getopt --- Command Line Option Parsing"
msgstr ""

#: ../../source/getopt/index.rst:8
msgid "Command line option parsing"
msgstr ""

#: ../../source/getopt/index.rst:10
msgid "The ``getopt`` module is the original command line option parser that supports the conventions established by the Unix function ``getopt``. It parses an argument sequence, such as ``sys.argv`` and returns a sequence of tuples containing (option, argument) pairs and a sequence of non-option arguments."
msgstr ""

#: ../../source/getopt/index.rst:16
msgid "Supported option syntax includes short and long form options:"
msgstr ""

#: ../../source/getopt/index.rst:29
msgid "``getopt`` is not deprecated, but :mod:`argparse` is more actively maintained and should be used for new development."
msgstr ""

#: ../../source/getopt/index.rst:33
msgid "Function Arguments"
msgstr ""

#: ../../source/getopt/index.rst:35
msgid "The ``getopt()`` function takes three arguments:"
msgstr ""

#: ../../source/getopt/index.rst:37
msgid "The first parameter is the sequence of arguments to be parsed. This usually comes from ``sys.argv[1:]`` (ignoring the program name in ``sys.arg[0]``)."
msgstr ""

#: ../../source/getopt/index.rst:41
msgid "The second argument is the option definition string for single character options. If one of the options requires an argument, its letter is followed by a colon."
msgstr ""

#: ../../source/getopt/index.rst:45
msgid "The third argument, if used, should be a sequence of the long-style option names. Long style options can be more than a single character, such as ``--noarg`` or ``--witharg``. The option names in the sequence should not include the \"``--``\" prefix. If any long option requires an argument, its name should have a suffix of \"``=``\"."
msgstr ""

#: ../../source/getopt/index.rst:51
msgid "Short and long form options can be combined in a single call."
msgstr ""

#: ../../source/getopt/index.rst:54
msgid "Short Form Options"
msgstr ""

#: ../../source/getopt/index.rst:56
msgid "This example program accepts three options.  The ``-a`` is a simple flag, while ``-b`` and ``-c`` require an argument.  The option definition string is ``\"ab:c:\"``."
msgstr ""

#: ../../source/getopt/index.rst:0
msgid "getopt_short.py"
msgstr ""

#: ../../source/getopt/index.rst:64
msgid "The program passes a list of simulated option values to ``getopt()`` to show the way they are processed."
msgstr ""

#: ../../source/getopt/index.rst:83
msgid "Long Form Options"
msgstr ""

#: ../../source/getopt/index.rst:85
msgid "For a program that takes two options, ``--noarg`` and ``--witharg``, the long-argument sequence should be ``[ 'noarg', 'witharg=' ]``."
msgstr ""

#: ../../source/getopt/index.rst:0
msgid "getopt_long.py"
msgstr ""

#: ../../source/getopt/index.rst:92
msgid "Since this sample program does not take any short form options, the second argument to ``getopt()`` is an empty string."
msgstr ""

#: ../../source/getopt/index.rst:111
msgid "A Complete Example"
msgstr ""

#: ../../source/getopt/index.rst:113
msgid "This example is a more complete program that takes five options: ``-o``, ``-v``, ``--output``, ``--verbose``, and ``--version``. The ``-o``, ``--output``, and ``--version`` options each require an argument."
msgstr ""

#: ../../source/getopt/index.rst:0
msgid "getopt_example.py"
msgstr ""

#: ../../source/getopt/index.rst:122
msgid "The program can be called in a variety of ways.  When it is called without any arguments at all, the default settings are used."
msgstr ""

#: ../../source/getopt/index.rst:142
msgid "A single letter option can be a separated from its argument by whitespace."
msgstr ""

#: ../../source/getopt/index.rst:162
msgid "Or the option and value can be combined into a single argument."
msgstr ""

#: ../../source/getopt/index.rst:181
msgid "A long form option can similarly be separate from the value."
msgstr ""

#: ../../source/getopt/index.rst:200
msgid "When a long option is combined with its value, the option name and value should be separated by a single ``=``."
msgstr ""

#: ../../source/getopt/index.rst:222
msgid "Abbreviating Long Form Options"
msgstr ""

#: ../../source/getopt/index.rst:224
msgid "The long form option does not have to be spelled out entirely on the command line, as long as a unique prefix is provided."
msgstr ""

#: ../../source/getopt/index.rst:244
msgid "If a unique prefix is not provided, an exception is raised."
msgstr ""

#: ../../source/getopt/index.rst:261
msgid "GNU-style Option Parsing"
msgstr ""

#: ../../source/getopt/index.rst:263
msgid "Normally, option processing stops as soon as the first non-option argument is encountered."
msgstr ""

#: ../../source/getopt/index.rst:283
msgid "To mix option and non-option arguments on the command line in any order, use ``gnu_getopt()`` instead."
msgstr ""

#: ../../source/getopt/index.rst:0
msgid "getopt_gnu.py"
msgstr ""

#: ../../source/getopt/index.rst:290
msgid "After changing the call in the previous example, the difference becomes clear."
msgstr ""

#: ../../source/getopt/index.rst:312
msgid "Ending Argument Processing"
msgstr ""

#: ../../source/getopt/index.rst:314
msgid "If ``getopt()`` encounters \"``--``\" in the input arguments, it stops processing the remaining arguments as options.  This feature can be used to pass argument values that look like options, such as filenames that start with a dash (\"``-``\")."
msgstr ""

#: ../../source/getopt/index.rst:338
msgid ":pydoc:`getopt`"
msgstr ""

#: ../../source/getopt/index.rst:340
msgid ":mod:`argparse` -- The ``argparse`` module replaces ``getopt`` for newer applications."
msgstr ""

