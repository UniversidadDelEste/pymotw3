# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/sqlite3/index.rst:3
msgid "sqlite3 --- Embedded Relational Database"
msgstr ""

#: ../../source/sqlite3/index.rst:8
msgid "Implements an embedded relational database with SQL support."
msgstr ""

#: ../../source/sqlite3/index.rst:10
msgid "The ``sqlite3`` module implements a `Python DB-API 2.0`_ compliant interface to SQLite, an in-process relational database.  SQLite is designed to be embedded in applications, instead of using a separate database server program such as MySQL, PostgreSQL, or Oracle.  It is fast, rigorously tested, and flexible, making it suitable for prototyping and production deployment for some applications."
msgstr ""

#: ../../source/sqlite3/index.rst:20
msgid "Creating a Database"
msgstr ""

#: ../../source/sqlite3/index.rst:22
msgid "An SQLite database is stored as a single file on the file system.  The library manages access to the file, including locking it to prevent corruption when multiple writers use it.  The database is created the first time the file is accessed, but the application is responsible for managing the table definitions, or *schema*, within the database."
msgstr ""

#: ../../source/sqlite3/index.rst:28
msgid "This example looks for the database file before opening it with ``connect()`` so it knows when to create the schema for new databases."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_createdb.py"
msgstr ""

#: ../../source/sqlite3/index.rst:36
msgid "Running the script twice shows that it creates the empty file if it does not exist."
msgstr ""

#: ../../source/sqlite3/index.rst:67
msgid "After creating the new database file, the next step is to create the schema to define the tables within the database.  The remaining examples in this section all use the same database schema with tables for managing tasks.  The details of the database schema are presented in :table:`The project Table` and :table:`The task Table`."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "The project Table"
msgstr ""

#: ../../source/sqlite3/index.rst:76
#: ../../source/sqlite3/index.rst:86
msgid "Column"
msgstr ""

#: ../../source/sqlite3/index.rst:76
#: ../../source/sqlite3/index.rst:86
msgid "Type"
msgstr ""

#: ../../source/sqlite3/index.rst:76
#: ../../source/sqlite3/index.rst:86
msgid "Description"
msgstr ""

#: ../../source/sqlite3/index.rst:78
msgid "name"
msgstr ""

#: ../../source/sqlite3/index.rst:78
#: ../../source/sqlite3/index.rst:79
#: ../../source/sqlite3/index.rst:90
#: ../../source/sqlite3/index.rst:91
#: ../../source/sqlite3/index.rst:94
msgid "text"
msgstr ""

#: ../../source/sqlite3/index.rst:78
msgid "Project name"
msgstr ""

#: ../../source/sqlite3/index.rst:79
msgid "description"
msgstr ""

#: ../../source/sqlite3/index.rst:79
msgid "Long project description"
msgstr ""

#: ../../source/sqlite3/index.rst:80
#: ../../source/sqlite3/index.rst:92
msgid "deadline"
msgstr ""

#: ../../source/sqlite3/index.rst:80
#: ../../source/sqlite3/index.rst:92
#: ../../source/sqlite3/index.rst:93
msgid "date"
msgstr ""

#: ../../source/sqlite3/index.rst:80
msgid "Due date for the entire project"
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "The task Table"
msgstr ""

#: ../../source/sqlite3/index.rst:88
msgid "id"
msgstr ""

#: ../../source/sqlite3/index.rst:88
msgid "number"
msgstr ""

#: ../../source/sqlite3/index.rst:88
msgid "Unique task identifier"
msgstr ""

#: ../../source/sqlite3/index.rst:89
msgid "priority"
msgstr ""

#: ../../source/sqlite3/index.rst:89
msgid "integer"
msgstr ""

#: ../../source/sqlite3/index.rst:89
msgid "Numerical priority, lower is more important"
msgstr ""

#: ../../source/sqlite3/index.rst:90
msgid "details"
msgstr ""

#: ../../source/sqlite3/index.rst:90
msgid "Full task details"
msgstr ""

#: ../../source/sqlite3/index.rst:91
msgid "status"
msgstr ""

#: ../../source/sqlite3/index.rst:91
msgid "Task status (one of 'new', 'pending', 'done', or 'canceled')."
msgstr ""

#: ../../source/sqlite3/index.rst:92
msgid "Due date for this task"
msgstr ""

#: ../../source/sqlite3/index.rst:93
msgid "completed_on"
msgstr ""

#: ../../source/sqlite3/index.rst:93
msgid "When the task was completed."
msgstr ""

#: ../../source/sqlite3/index.rst:94
msgid "project"
msgstr ""

#: ../../source/sqlite3/index.rst:94
msgid "The name of the project for this task."
msgstr ""

#: ../../source/sqlite3/index.rst:97
msgid "The *data definition language* (DDL) statements to create the tables are:"
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "todo_schema.sql"
msgstr ""

#: ../../source/sqlite3/index.rst:106
msgid "The ``executescript()`` method of the ``Connection`` can be used to run the DDL instructions to create the schema."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_create_schema.py"
msgstr ""

#: ../../source/sqlite3/index.rst:113
msgid "After the tables are created, a few ``insert`` statements create a sample project and related tasks.  The ``sqlite3`` command line program can be used to examine the contents of the database."
msgstr ""

#: ../../source/sqlite3/index.rst:143
msgid "Retrieving Data"
msgstr ""

#: ../../source/sqlite3/index.rst:145
msgid "To retrieve the values saved in the ``task`` table from within a Python program, create a ``Cursor`` from a database connection. A cursor produces a consistent view of the data, and is the primary means of interacting with a transactional database system like SQLite."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_select_tasks.py"
msgstr ""

#: ../../source/sqlite3/index.rst:154
msgid "Querying is a two step process.  First, run the query with the cursor's ``execute()`` method to tell the database engine what data to collect.  Then, use ``fetchall()`` to retrieve the results.  The return value is a sequence of tuples containing the values for the columns included in the ``select`` clause of the query."
msgstr ""

#: ../../source/sqlite3/index.rst:174
msgid "The results can be retrieved one at a time with ``fetchone()``, or in fixed-size batches with ``fetchmany()``."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_select_variations.py"
msgstr ""

#: ../../source/sqlite3/index.rst:181
msgid "The value passed to ``fetchmany()`` is the maximum number of items to return.  If fewer items are available, the sequence returned will be smaller than the maximum value."
msgstr ""

#: ../../source/sqlite3/index.rst:204
msgid "Query Metadata"
msgstr ""

#: ../../source/sqlite3/index.rst:206
msgid "The DB-API 2.0 specification says that after ``execute()`` has been called, the ``Cursor`` should set its :attr:`description` attribute to hold information about the data that will be returned by the fetch methods.  The API specification say that the description value is a sequence of tuples containing the column name, type, display size, internal size, precision, scale, and a flag that says whether null values are accepted."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_cursor_description.py"
msgstr ""

#: ../../source/sqlite3/index.rst:218
msgid "Because ``sqlite3`` does not enforce type or size constraints on data inserted into a database, only the column name value is filled in."
msgstr ""

#: ../../source/sqlite3/index.rst:242
msgid "Row Objects"
msgstr ""

#: ../../source/sqlite3/index.rst:244
msgid "By default, the values returned by the fetch methods as \"rows\" from the database are tuples.  The caller is responsible for knowing the order of the columns in the query and extracting individual values from the tuple.  When the number of values in a query grows, or the code working with the data is spread out in a library, it is usually easier to work with an object and access values using their column names.  That way, the number and order of the tuple contents can change over time as the query is edited, and code depending on the query results is less likely to break."
msgstr ""

#: ../../source/sqlite3/index.rst:254
msgid "``Connection`` objects have a ``row_factory`` property that allows the calling code to control the type of object created to represent each row in the query result set.  ``sqlite3`` also includes a ``Row`` class intended to be used as a row factory. Column values can be accessed through ``Row`` instances by using the column index or name."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_row_factory.py"
msgstr ""

#: ../../source/sqlite3/index.rst:265
msgid "This version of the ``sqlite3_select_variations.py`` example has been re-written using ``Row`` instances instead of tuples.  The row from the project table is still printed by accessing the column values through position, but the ``print`` statement for tasks uses keyword lookup instead, so it does not matter that the order of the columns in the query has been changed."
msgstr ""

#: ../../source/sqlite3/index.rst:291
msgid "Using Variables with Queries"
msgstr ""

#: ../../source/sqlite3/index.rst:293
msgid "Using queries defined as literal strings embedded in a program is inflexible.  For example, when another project is added to the database the query to show the top five tasks should be updated to work with either project.  One way to add more flexibility is to build an SQL statement with the desired query by combining values in Python. However, building a query string in this way is dangerous, and should be avoided.  Failing to correctly escape special characters in the variable parts of the query can result in SQL parsing errors, or worse, a class of security vulnerabilities known as *SQL-injection attacks*, which allow intruders to execute arbitrary SQL statements in the database."
msgstr ""

#: ../../source/sqlite3/index.rst:305
msgid "The proper way to use dynamic values with queries is through *host variables* passed to ``execute()`` along with the SQL instruction. A placeholder value in the SQL is replaced with the value of the host variable when the statement is executed.  Using host variables instead of inserting arbitrary values into the SQL before it is parsed avoids injection attacks because there is no chance that the untrusted values will affect how the SQL is parsed.  SQLite supports two forms for queries with placeholders, positional and named."
msgstr ""

#: ../../source/sqlite3/index.rst:315
msgid "Positional Parameters"
msgstr ""

#: ../../source/sqlite3/index.rst:317
msgid "A question mark (``?``) denotes a positional argument, passed to ``execute()`` as a member of a tuple."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_argument_positional.py"
msgstr ""

#: ../../source/sqlite3/index.rst:324
msgid "The command line argument is passed safely to the query as a positional argument, and there is no chance for bad data to corrupt the database."
msgstr ""

#: ../../source/sqlite3/index.rst:343
msgid "Named Parameters"
msgstr ""

#: ../../source/sqlite3/index.rst:345
msgid "Use named parameters for more complex queries with a lot of parameters, or where some parameters are repeated multiple times within the query. Named parameters are prefixed with a colon (e.g., ``:param_name``)."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_argument_named.py"
msgstr ""

#: ../../source/sqlite3/index.rst:353
msgid "Neither positional nor named parameters need to be quoted or escaped, since they are given special treatment by the query parser."
msgstr ""

#: ../../source/sqlite3/index.rst:370
msgid "Query parameters can be used with ``select``, ``insert``, and ``update`` statements.  They can appear in any part of the query where a literal value is legal."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_argument_update.py"
msgstr ""

#: ../../source/sqlite3/index.rst:378
msgid "This ``update`` statement uses two named parameters.  The ``id`` value is used to find the right row to modify, and the ``status`` value is written to the table."
msgstr ""

#: ../../source/sqlite3/index.rst:399
msgid "Bulk Loading"
msgstr ""

#: ../../source/sqlite3/index.rst:401
msgid "To apply the same SQL instruction to a large set of data, use ``executemany()``.  This is useful for loading data, since it avoids looping over the inputs in Python and lets the underlying library apply loop optimizations.  This example program reads a list of tasks from a comma-separated value file using the :mod:`csv` module and loads them into the database."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_load_csv.py"
msgstr ""

#: ../../source/sqlite3/index.rst:412
msgid "The sample data file ``tasks.csv`` contains:"
msgstr ""

#: ../../source/sqlite3/index.rst:416
msgid "Running the program produces:"
msgstr ""

#: ../../source/sqlite3/index.rst:439
msgid "Defining New Column Types"
msgstr ""

#: ../../source/sqlite3/index.rst:441
msgid "SQLite has native support for integer, floating point, and text columns.  Data of these types is converted automatically by ``sqlite3`` from Python's representation to a value that can be stored in the database, and back again, as needed.  Integer values are loaded from the database into ``int`` or ``long`` variables, depending on the size of the value.  Text is saved and retrieved as ``str``, unless the :attr:`text_factory` for the ``Connection`` has been changed."
msgstr ""

#: ../../source/sqlite3/index.rst:450
msgid "Although SQLite only supports a few data types internally, ``sqlite3`` includes facilities for defining custom types to allow a Python application to store any type of data in a column. Conversion for types beyond those supported by default is enabled in the database connection using the ``detect_types`` flag.  Use ``PARSE_DECLTYPES`` if the column was declared using the desired type when the table was defined."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_date_types.py"
msgstr ""

#: ../../source/sqlite3/index.rst:462
msgid "``sqlite3`` provides converters for date and timestamp columns, using the classes ``date`` and ``datetime`` from the :mod:`datetime` module to represent the values in Python.  Both date-related converters are enabled automatically when type-detection is turned on."
msgstr ""

#: ../../source/sqlite3/index.rst:488
msgid "Two functions need to be registered to define a new type.  The *adapter* takes the Python object as input and returns a byte string that can be stored in the database.  The *converter* receives the string from the database and returns a Python object.  Use ``register_adapter()`` to define an adapter function, and ``register_converter()`` for a converter function."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_custom_type.py"
msgstr ""

#: ../../source/sqlite3/index.rst:499
msgid "This example uses :mod:`pickle` to save an object to a string that can be stored in the database, a useful technique for storing arbitrary objects, but one that does not allow querying based on object attributes.  A real *object-relational mapper*, such as SQLAlchemy_, that stores attribute values in their own columns will be more useful for large amounts of data."
msgstr ""

#: ../../source/sqlite3/index.rst:535
msgid "Determining Types for Columns"
msgstr ""

#: ../../source/sqlite3/index.rst:537
msgid "There are two sources for types information about the data for a query.  The original table declaration can be used to identify the type of a real column, as shown earlier.  A type specifier can also be included in the ``select`` clause of the query itself using the form ``as \"name [type]\"``."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_custom_type_column.py"
msgstr ""

#: ../../source/sqlite3/index.rst:547
msgid "Use the ``detect_types`` flag ``PARSE_COLNAMES`` when the type is part of the query instead of the original table definition."
msgstr ""

#: ../../source/sqlite3/index.rst:579
msgid "Transactions"
msgstr ""

#: ../../source/sqlite3/index.rst:581
msgid "One of the key features of relational databases is the use of *transactions* to maintain a consistent internal state.  With transactions enabled, several changes can be made through one connection without effecting any other users until the results are *committed* and flushed to the actual database."
msgstr ""

#: ../../source/sqlite3/index.rst:588
msgid "Preserving Changes"
msgstr ""

#: ../../source/sqlite3/index.rst:590
msgid "Changes to the database, either through ``insert`` or ``update`` statements, need to be saved by explicitly calling ``commit()``.  This requirement gives an application an opportunity to make several related changes together, so they are stored *atomically* instead of incrementally, and avoids a situation where partial updates are seen by different clients connecting to the database simultaneously."
msgstr ""

#: ../../source/sqlite3/index.rst:598
msgid "The effect of calling ``commit()`` can be seen with a program that uses several connections to the database.  A new row is inserted with the first connection, and then two attempts are made to read it back using separate connections."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_transaction_commit.py"
msgstr ""

#: ../../source/sqlite3/index.rst:607
msgid "When ``show_projects()`` is called before ``conn1`` has been committed, the results depend on which connection is used.  Since the change was made through ``conn1``, it sees the altered data. However, ``conn2`` does not.  After committing, the new connection ``conn3`` sees the inserted row."
msgstr ""

#: ../../source/sqlite3/index.rst:639
msgid "Discarding Changes"
msgstr ""

#: ../../source/sqlite3/index.rst:641
msgid "Uncommitted changes can also be discarded entirely using ``rollback()``.  The ``commit()`` and ``rollback()`` methods are usually called from different parts of the same ``try:except`` block, with errors triggering a rollback."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_transaction_rollback.py"
msgstr ""

#: ../../source/sqlite3/index.rst:650
msgid "After calling ``rollback()``, the changes to the database are no longer present."
msgstr ""

#: ../../source/sqlite3/index.rst:676
msgid "Isolation Levels"
msgstr ""

#: ../../source/sqlite3/index.rst:678
msgid "``sqlite3`` supports three locking modes, called *isolation levels*, that control the technique used to prevent incompatible changes between connections.  The isolation level is set by passing a string as the ``isolation_level`` argument when a connection is opened, so different connections can use different values."
msgstr ""

#: ../../source/sqlite3/index.rst:684
msgid "This program demonstrates the effect of different isolation levels on the order of events in threads using separate connections to the same database.  Four threads are created.  Two threads write changes to the database by updating existing rows.  The other two threads attempt to read all of the rows from the ``task`` table."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_isolation_levels.py"
msgstr ""

#: ../../source/sqlite3/index.rst:694
msgid "The threads are synchronized using an ``Event`` object from the :mod:`threading` module.  The ``writer()`` function connects and make changes to the database, but does not commit before the event fires.  The ``reader()`` function connects, then waits to query the database until after the synchronization event occurs."
msgstr ""

#: ../../source/sqlite3/index.rst:701
msgid "Deferred"
msgstr ""

#: ../../source/sqlite3/index.rst:703
msgid "The default isolation level is ``DEFERRED``.  Using deferred mode locks the database, but only once a change is begun.  All of the previous examples use deferred mode."
msgstr ""

#: ../../source/sqlite3/index.rst:735
msgid "Immediate"
msgstr ""

#: ../../source/sqlite3/index.rst:737
msgid "Immediate mode locks the database as soon as a change starts and prevents other cursors from making changes until the transaction is committed.  It is suitable for a database with complicated writes, but more readers than writers, since the readers are not blocked while the transaction is ongoing."
msgstr ""

#: ../../source/sqlite3/index.rst:770
msgid "Exclusive"
msgstr ""

#: ../../source/sqlite3/index.rst:772
msgid "Exclusive mode locks the database to all readers and writers.  Its use should be limited in situations where database performance is important, since each exclusive connection blocks all other users."
msgstr ""

#: ../../source/sqlite3/index.rst:802
msgid "Because the first writer has started making changes, the readers and second writer block until it commits.  The ``sleep()`` call introduces an artificial delay in the writer thread to highlight the fact that the other connections are blocking."
msgstr ""

#: ../../source/sqlite3/index.rst:810
msgid "Autocommit"
msgstr ""

#: ../../source/sqlite3/index.rst:812
msgid "The ``isolation_level`` parameter for the connection can also be set to ``None`` to enable autocommit mode.  With autocommit enabled, each ``execute()`` call is committed immediately when the statement finishes.  Autocommit mode is suited for short transactions, such as those that insert a small amount of data into a single table.  The database is locked for as little time as possible, so there is less chance of contention between threads."
msgstr ""

#: ../../source/sqlite3/index.rst:820
msgid "In ``sqlite3_autocommit.py``, the explicit call to ``commit()`` has been removed and the isolation level is set to ``None``, but otherwise is the same as ``sqlite3_isolation_levels.py``.  The output is different, however, since both writer threads finish their work before either reader starts querying."
msgstr ""

#: ../../source/sqlite3/index.rst:852
msgid "In-Memory Databases"
msgstr ""

#: ../../source/sqlite3/index.rst:854
msgid "SQLite supports managing an entire database in RAM, instead of relying on a disk file.  In-memory databases are useful for automated testing, where the database does not need to be preserved between test runs, or when experimenting with a schema or other database features.  To open an in-memory database, use the string ``':memory:'`` instead of a filename when creating the ``Connection``.  Each ``':memory:'`` connection creates a separate database instance, so changes made by a cursor in one do not effect other connections."
msgstr ""

#: ../../source/sqlite3/index.rst:864
msgid "Exporting the Contents of a Database"
msgstr ""

#: ../../source/sqlite3/index.rst:866
msgid "The contents of an in-memory database can be saved using the ``iterdump()`` method of the ``Connection``.  The iterator returned by ``iterdump()`` produces a series of strings that together build SQL instructions to recreate the state of the database."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_iterdump.py"
msgstr ""

#: ../../source/sqlite3/index.rst:875
msgid "``iterdump()`` can also be used with databases saved to files, but it is most useful for preserving a database that would not otherwise be saved.  This output has been edited to fit on the page while remaining syntactically correct."
msgstr ""

#: ../../source/sqlite3/index.rst:922
msgid "Using Python Functions in SQL"
msgstr ""

#: ../../source/sqlite3/index.rst:924
msgid "SQL syntax supports calling functions during queries, either in the column list or ``where`` clause of the ``select`` statement.  This feature makes it possible to process data before returning it from the query, and can be used to convert between different formats, perform calculations that would be clumsy in pure SQL, and reuse application code."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_create_function.py"
msgstr ""

#: ../../source/sqlite3/index.rst:935
msgid "Functions are exposed using the ``create_function()`` method of the ``Connection``.  The parameters are the name of the function (as it should be used from within SQL), the number of arguments the function takes, and the Python function to expose."
msgstr ""

#: ../../source/sqlite3/index.rst:997
msgid "Querying with Regular Expressions"
msgstr ""

#: ../../source/sqlite3/index.rst:999
msgid "Sqlite supports several special user functions that are associated with SQL syntax. For example, a function ``regexp`` can be used in a query to check if a column's string value matches a regular expression using the following syntax."
msgstr ""

#: ../../source/sqlite3/index.rst:1009
msgid "This examples associates a function with ``regexp()`` to test values using Python's :mod:`re` module."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_regex.py"
msgstr ""

#: ../../source/sqlite3/index.rst:1016
msgid "The output is all of the tasks where the details column matches the pattern."
msgstr ""

#: ../../source/sqlite3/index.rst:1034
msgid "Custom Aggregation"
msgstr ""

#: ../../source/sqlite3/index.rst:1036
msgid "An aggregation function collects many pieces of individual data and summarizes it in some way.  Examples of built-in aggregation functions are ``avg()`` (average), ``min()``, ``max()``, and ``count()``."
msgstr ""

#: ../../source/sqlite3/index.rst:1041
msgid "The API for aggregators used by ``sqlite3`` is defined in terms of a class with two methods.  The ``step()`` method is called once for each data value as the query is processed.  The ``finalize()`` method is called one time at the end of the query and should return the aggregate value.  This example implements an aggregator for the arithmetic *mode*.  It returns the value that appears most frequently in the input."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_create_aggregate.py"
msgstr ""

#: ../../source/sqlite3/index.rst:1053
msgid "The aggregator class is registered with the ``create_aggregate()`` method of the ``Connection``.  The parameters are the name of the function (as it should be used from within SQL), the number of arguments the ``step()`` method takes, and the class to use."
msgstr ""

#: ../../source/sqlite3/index.rst:1078
msgid "Threading and Connection Sharing"
msgstr ""

#: ../../source/sqlite3/index.rst:1080
msgid "For historical reasons having to do with old versions of SQLite, ``Connection`` objects cannot be shared between threads.  Each thread must create its own connection to the database."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_threading.py"
msgstr ""

#: ../../source/sqlite3/index.rst:1088
msgid "Attempts to share a connection between threads result in an exception."
msgstr ""

#: ../../source/sqlite3/index.rst:1107
msgid "Restricting Access to Data"
msgstr ""

#: ../../source/sqlite3/index.rst:1109
msgid "Although SQLite does not have user access controls found in other, larger, relational databases, it does have a mechanism for limiting access to columns.  Each connection can install an *authorizer function* to grant or deny access to columns at runtime based on any desired criteria.  The authorizer function is invoked during the parsing of SQL statements, and is passed five arguments.  The first is an action code indicating the type of operation being performed (reading, writing, deleting, etc.).  The rest of the arguments depend on the action code.  For ``SQLITE_READ`` operations, the arguments are the name of the table, the name of the column, the location in the SQL where the access is occurring (main query, trigger, etc.), and ``None``."
msgstr ""

#: ../../source/sqlite3/index.rst:0
msgid "sqlite3_set_authorizer.py"
msgstr ""

#: ../../source/sqlite3/index.rst:1126
msgid "This example uses ``SQLITE_IGNORE`` to cause the strings from the ``task.details`` column to be replaced with null values in the query results.  It also prevents all access to the ``task.priority`` column by returning ``SQLITE_DENY``, which in turn causes SQLite to raise an exception."
msgstr ""

#: ../../source/sqlite3/index.rst:1179
msgid "The possible action codes are available as constants in ``sqlite3``, with names prefixed ``SQLITE_``.  Each type of SQL statement can be flagged, and access to individual columns can be controlled as well."
msgstr ""

#: ../../source/sqlite3/index.rst:1197
msgid ":pydoc:`sqlite3`"
msgstr ""

#: ../../source/sqlite3/index.rst:1199
msgid ":pep:`249` -- DB API 2.0 Specification (A standard interface for modules that provide access to relational databases.)"
msgstr ""

#: ../../source/sqlite3/index.rst:1202
msgid "`SQLite`_ -- The official site of the SQLite library."
msgstr ""

#: ../../source/sqlite3/index.rst:1204
msgid ":mod:`shelve` -- Key-value store for saving arbitrary Python objects."
msgstr ""

#: ../../source/sqlite3/index.rst:1206
msgid "SQLAlchemy_ -- A popular object-relational mapper that supports SQLite among many other relational databases."
msgstr ""

