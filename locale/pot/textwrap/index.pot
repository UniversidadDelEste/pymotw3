# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/textwrap/index.rst:3
msgid "textwrap --- Formatting Text Paragraphs"
msgstr ""

#: ../../source/textwrap/index.rst:8
msgid "Formatting text by adjusting where line breaks occur in a paragraph."
msgstr ""

#: ../../source/textwrap/index.rst:10
msgid "The ``textwrap`` module can be used to format text for output in situations where pretty-printing is desired. It offers programmatic functionality similar to the paragraph wrapping or filling features found in many text editors and word processors."
msgstr ""

#: ../../source/textwrap/index.rst:16
msgid "Example Data"
msgstr ""

#: ../../source/textwrap/index.rst:18
msgid "The examples in this section use the module ``textwrap_example.py``, which contains a string ``sample_text``."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_example.py"
msgstr ""

#: ../../source/textwrap/index.rst:27
msgid "Filling Paragraphs"
msgstr ""

#: ../../source/textwrap/index.rst:29
msgid "The ``fill()`` function takes text as input and produces formatted text as output."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_fill.py"
msgstr ""

#: ../../source/textwrap/index.rst:36
msgid "The results are something less than desirable.  The text is now left justified, but the first line retains its indent and the spaces from the front of each subsequent line are embedded in the paragraph."
msgstr ""

#: ../../source/textwrap/index.rst:58
msgid "Removing Existing Indentation"
msgstr ""

#: ../../source/textwrap/index.rst:60
msgid "The previous example has embedded tabs and extra spaces mixed into the middle of the output, so it is not formatted very cleanly. Removing the common whitespace prefix from all of the lines in the sample text with ``dedent()`` produces better results and allows the use of docstrings or embedded multiline strings straight from Python code while removing the formatting of the code itself. The sample string has an artificial indent level introduced for illustrating this feature."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_dedent.py"
msgstr ""

#: ../../source/textwrap/index.rst:73
msgid "The results are starting to look better."
msgstr ""

#: ../../source/textwrap/index.rst:93
msgid "Since \"dedent\" is the opposite of \"indent,\" the result is a block of text with the common initial whitespace from each line removed. If one line is already indented more than another, some of the whitespace will not be removed."
msgstr ""

#: ../../source/textwrap/index.rst:98
msgid "Input like"
msgstr ""

#: ../../source/textwrap/index.rst:106
msgid "becomes"
msgstr ""

#: ../../source/textwrap/index.rst:115
msgid "Combining Dedent and Fill"
msgstr ""

#: ../../source/textwrap/index.rst:117
msgid "Next, the dedented text can be passed through ``fill()`` with a few different ``width`` values."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_fill_width.py"
msgstr ""

#: ../../source/textwrap/index.rst:125
msgid "This produces outputs in the specified widths."
msgstr ""

#: ../../source/textwrap/index.rst:155
msgid "Indenting Blocks"
msgstr ""

#: ../../source/textwrap/index.rst:157
msgid "Use the ``indent()`` function to add consistent prefix text to all of the lines in a string. This example formats the same example text as though it was part of an email message being quoted in the reply, using ``>`` as the prefix for each line."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_indent.py"
msgstr ""

#: ../../source/textwrap/index.rst:166
msgid "The block of text is split on newlines, the prefix is added to each line that contains text, and then the lines are combined back into a new string and returned."
msgstr ""

#: ../../source/textwrap/index.rst:190
msgid "To control which lines receive the new prefix, pass a callable as the ``predicate`` argument to ``indent()``. The callable will be invoked for each line of text in turn and the prefix will be added for lines where the return value is true."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_indent_predicate.py"
msgstr ""

#: ../../source/textwrap/index.rst:199
msgid "This example adds the prefix ``EVEN`` to lines that contain an even number of characters."
msgstr ""

#: ../../source/textwrap/index.rst:227
msgid "Hanging Indents"
msgstr ""

#: ../../source/textwrap/index.rst:229
msgid "In the same way that it is possible to set the width of the output, the indent of the first line can be controlled independently of subsequent lines."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_hanging_indent.py"
msgstr ""

#: ../../source/textwrap/index.rst:237
msgid "This makes it possible to produce a hanging indent, where the first line is indented less than the other lines."
msgstr ""

#: ../../source/textwrap/index.rst:256
msgid "The indent values can include nonwhitespace characters, too. The hanging indent can be prefixed with ``*`` to produce bullet points, for example."
msgstr ""

#: ../../source/textwrap/index.rst:261
msgid "Truncating Long Text"
msgstr ""

#: ../../source/textwrap/index.rst:263
msgid "To truncate text to create a summary or preview, use ``shorten()``. All existing whitespace, such as tabs, newlines, and series of multiple spaces, will be standardized to a single space. Then the text will be truncated to a length less than or equal to what is requested, between word boundaries so that no partial words are included."
msgstr ""

#: ../../source/textwrap/index.rst:0
msgid "textwrap_shorten.py"
msgstr ""

#: ../../source/textwrap/index.rst:274
msgid "If non-whitespace text is removed from the original text as part of the truncation, it is replaced with a placeholder value. The default value ``[...]`` can be replaced by providing a ``placeholder`` argument to ``shorten()``."
msgstr ""

#: ../../source/textwrap/index.rst:306
msgid ":pydoc:`textwrap`"
msgstr ""

