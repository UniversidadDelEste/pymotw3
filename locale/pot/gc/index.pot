# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/gc/index.rst:3
msgid "gc --- Garbage Collector"
msgstr ""

#: ../../source/gc/index.rst:8
msgid "Manages memory used by Python objects"
msgstr ""

#: ../../source/gc/index.rst:10
msgid "``gc`` exposes the underlying memory management mechanism of Python, the automatic garbage collector.  The module includes functions for controlling how the collector operates and to examine the objects known to the system, either pending collection or stuck in reference cycles and unable to be freed."
msgstr ""

#: ../../source/gc/index.rst:17
msgid "Tracing References"
msgstr ""

#: ../../source/gc/index.rst:19
msgid "With ``gc`` the incoming and outgoing references between objects can be used to find cycles in complex data structures.  If a data structure is known to have a cycle, custom code can be used to examine its properties.  If the cycle is in unknown code, the ``get_referents()`` and ``get_referrers()`` functions can be used to build generic debugging tools."
msgstr ""

#: ../../source/gc/index.rst:26
msgid "For example, ``get_referents()`` shows the objects *referred to* by the input arguments."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_get_referents.py"
msgstr ""

#: ../../source/gc/index.rst:33
msgid "In this case, the ``Graph`` instance ``three`` holds references to its instance dictionary (in the ``__dict__`` attribute) and its class."
msgstr ""

#: ../../source/gc/index.rst:55
msgid "The next example uses a :mod:`Queue` to perform a breadth-first traversal of all of the object references looking for cycles.  The items inserted into the queue are tuples containing the reference chain so far and the next object to examine.  It starts with ``three``, and looks at everything it refers to.  Skipping classes avoids looking at methods, modules, etc."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_get_referents_cycles.py"
msgstr ""

#: ../../source/gc/index.rst:66
msgid "The cycle in the nodes is easily found by watching for objects that have already been processed.  To avoid holding references to those objects, their ``id()`` values are cached in a set.  The dictionary objects found in the cycle are the ``__dict__`` values for the ``Graph`` instances, and hold their instance attributes."
msgstr ""

#: ../../source/gc/index.rst:102
msgid "Forcing Garbage Collection"
msgstr ""

#: ../../source/gc/index.rst:104
msgid "Although the garbage collector runs automatically as the interpreter executes a program, it can be triggered to run at a specific time when there are a lot of objects to free or there is not much work happening and the collector will not hurt application performance.  Trigger collection using ``collect()``."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_collect.py"
msgstr ""

#: ../../source/gc/index.rst:114
msgid "In this example, the cycle is cleared as soon as collection runs the first time, since nothing refers to the ``Graph`` nodes except themselves.  ``collect()`` returns the number of \"unreachable\" objects it found.  In this case, the value is ``6`` because there are three objects with their instance attribute dictionaries."
msgstr ""

#: ../../source/gc/index.rst:143
msgid "Finding References to Objects that Cannot be Collected"
msgstr ""

#: ../../source/gc/index.rst:145
msgid "Looking for the object holding a reference to another object is a little trickier than seeing what an object references.  Because the code asking about the reference needs to hold a reference itself, some of the referrers need to be ignored.  This example creates a graph cycle, then works through the ``Graph`` instances and removes the reference in the \"parent\" node."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_get_referrers.py"
msgstr ""

#: ../../source/gc/index.rst:156
msgid "This sort of logic is overkill if the cycles are understood, but for an unexplained cycle in data using ``get_referrers()`` can expose the unexpected relationship."
msgstr ""

#: ../../source/gc/index.rst:202
msgid "Collection Thresholds and Generations"
msgstr ""

#: ../../source/gc/index.rst:204
msgid "The garbage collector maintains three lists of objects it sees as it runs, one for each \"generation\" tracked by the collector.  As objects are examined in each generation, they are either collected or they age into subsequent generations until they finally reach the stage where they are kept permanently."
msgstr ""

#: ../../source/gc/index.rst:210
msgid "The collector routines can be tuned to occur at different frequencies based on the difference between the number of object allocations and deallocations between runs.  When the number of allocations minus the number of deallocations is greater than the threshold for the generation, the garbage collector is run.  The current thresholds can be examined with ``get_threshold()``."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_get_threshold.py"
msgstr ""

#: ../../source/gc/index.rst:221
msgid "The return value is a tuple with the threshold for each generation."
msgstr ""

#: ../../source/gc/index.rst:235
msgid "The thresholds can be changed with ``set_threshold()``.  This example program uses a command line argument to set the threshold for generation ``0`` then allocates a series of objects."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_threshold.py"
msgstr ""

#: ../../source/gc/index.rst:243
msgid "Different threshold values introduce the garbage collection sweeps at different times, shown here because debugging is enabled."
msgstr ""

#: ../../source/gc/index.rst:293
msgid "A smaller threshold causes the sweeps to run more frequently."
msgstr ""

#: ../../source/gc/index.rst:355
msgid "Debugging"
msgstr ""

#: ../../source/gc/index.rst:357
msgid "Debugging memory leaks can be challenging.  ``gc`` includes several options to expose the inner workings to make the job easier.  The options are bit-flags meant to be combined and passed to ``set_debug()`` to configure the garbage collector while the program is running.  Debugging information is printed to ``sys.stderr``."
msgstr ""

#: ../../source/gc/index.rst:363
msgid "The ``DEBUG_STATS`` flag turns on statistics reporting, causing the garbage collector to report when it is running, the number of objects tracked for each generation, and the amount of time it took to perform the sweep."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_debug_stats.py"
msgstr ""

#: ../../source/gc/index.rst:372
msgid "This example output shows two separate runs of the collector because it runs once when it is invoked explicitly, and a second time when the interpreter exits."
msgstr ""

#: ../../source/gc/index.rst:400
msgid "Enabling ``DEBUG_COLLECTABLE`` and ``DEBUG_UNCOLLECTABLE`` causes the collector to report on whether each object it examines can or cannot be collected.  If seeing the objects that cannot be collected is not enough information to understand where data is being retained, enable ``DEBUG_SAVEALL`` to cause ``gc`` to preserve all objects it finds without any references in the :obj:`garbage` list."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_debug_saveall.py"
msgstr ""

#: ../../source/gc/index.rst:411
msgid "This allows the objects to be examined after garbage collection, which is helpful if, for example, the constructor cannot be changed to print the object id when each object is created."
msgstr ""

#: ../../source/gc/index.rst:443
msgid "For simplicity, ``DEBUG_LEAK`` is defined as a combination of all of the other options."
msgstr ""

#: ../../source/gc/index.rst:0
msgid "gc_debug_leak.py"
msgstr ""

#: ../../source/gc/index.rst:450
msgid "Keep in mind that because ``DEBUG_SAVEALL`` is enabled by ``DEBUG_LEAK``, even the unreferenced objects that would normally have been collected and deleted are retained."
msgstr ""

#: ../../source/gc/index.rst:485
msgid ":pydoc:`gc`"
msgstr ""

#: ../../source/gc/index.rst:487
msgid ":ref:`Python 2 to 3 porting notes for gc <porting-gc>`"
msgstr ""

#: ../../source/gc/index.rst:489
msgid ":mod:`weakref` -- The ``weakref`` module provides a way to create references to objects without increasing their reference count, so they can still be garbage collected."
msgstr ""

#: ../../source/gc/index.rst:493
msgid "`Supporting Cyclic Garbage Collection <https://docs.python.org/3/c-api/gcsupport.html>`__ -- Background material from Python's C API documentation."
msgstr ""

#: ../../source/gc/index.rst:497
msgid "`How does Python manage memory? <http://effbot.org/pyfaq/how-does-python-manage-memory.htm>`__ -- An article on Python memory management by Fredrik Lundh."
msgstr ""

