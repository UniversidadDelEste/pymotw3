# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/io/index.rst:3
msgid "io --- Text, Binary, and Raw Stream I/O Tools"
msgstr ""

#: ../../source/io/index.rst:9
msgid "Implements file I/O and provides classes for working with buffers using file-like API."
msgstr ""

#: ../../source/io/index.rst:12
msgid "The ``io`` module implements the classes behind the interpreter's built-in ``open()`` for file-based input and output operations. The classes are decomposed in such a way that they can be recombined for alternate purposes, for example to enable writing Unicode data to a network socket."
msgstr ""

#: ../../source/io/index.rst:19
msgid "In-memory Streams"
msgstr ""

#: ../../source/io/index.rst:21
msgid "``StringIO`` provides a convenient means of working with text in memory using the file API (``read()``, ``write()``, etc.). Using :mod:`StringIO` to build large strings can offer performance savings over some other string concatenation techniques in some cases. In-memory stream buffers are also useful for testing, where writing to a real file on disk may slow down the test suite."
msgstr ""

#: ../../source/io/index.rst:28
msgid "Here are a few standard examples of using ``StringIO`` buffers:"
msgstr ""

#: ../../source/io/index.rst:0
msgid "io_stringio.py"
msgstr ""

#: ../../source/io/index.rst:34
msgid "This example uses ``read()``, but the ``readline()`` and ``readlines()`` methods are also available. The ``StringIO`` class also provides a ``seek()`` method for jumping around in a buffer while reading, which can be useful for rewinding if a look-ahead parsing algorithm is being used."
msgstr ""

#: ../../source/io/index.rst:54
msgid "To work with raw bytes instead of Unicode text, use ``BytesIO``."
msgstr ""

#: ../../source/io/index.rst:0
msgid "io_bytesio.py"
msgstr ""

#: ../../source/io/index.rst:60
msgid "The values written to the ``BytesIO`` must be ``bytes`` rather than ``str``."
msgstr ""

#: ../../source/io/index.rst:77
msgid "Wrapping Byte Streams for Text Data"
msgstr ""

#: ../../source/io/index.rst:79
msgid "Raw byte streams such as sockets can be wrapped with a layer to handle string encoding and decoding, making it easier to use them with text data. The ``TextIOWrapper`` class supports writing as well as reading.  The ``write_through`` argument disables buffering, and flushes all data written to the wrapper through to the underlying buffer immediately."
msgstr ""

#: ../../source/io/index.rst:0
msgid "io_textiowrapper.py"
msgstr ""

#: ../../source/io/index.rst:90
msgid "This example uses a ``BytesIO`` instance as the stream. Examples for :mod:`bz2`, :mod:`http.server`, and :mod:`subprocess` demonstrate using ``TextIOWrapper`` with other types of file-like objects."
msgstr ""

#: ../../source/io/index.rst:109
msgid ":pydoc:`io`"
msgstr ""

#: ../../source/io/index.rst:111
msgid ":ref:`HTTP POST example <http_server_post>` -- Uses the ``detach()`` of ``TextIOWrapper`` to manage the wrapper separately from the wrapped socket."
msgstr ""

#: ../../source/io/index.rst:115
msgid "`Efficient String Concatenation in Python <http://www.skymind.com/%7Eocrow/python_string/>`_ -- Examines various methods of combining strings and their relative merits."
msgstr ""

