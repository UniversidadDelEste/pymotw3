#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: 2015-11-02 18:43-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.6\n"

#: ../../PyMOTW/articles/data_persistence.rst:5
msgid "Data Persistence and Exchange"
msgstr "Persistencia y cambio de datos"

#: ../../PyMOTW/articles/data_persistence.rst:7
msgid ""
"Python provides several modules for storing data.  There are basically two "
"aspects to persistence: converting the in-memory object back and forth into "
"a format for saving it, and working with the storage of the converted data."
msgstr ""
"Python proporciona varios módulos para el almacenamiento de datos. Hay "
"básicamente dos aspectos de la persistencia: convertir el objeto en memoria "
"de ida y de vuelta en un formato para guardarlo, y el trabajo con el "
"almacenamiento de los datos convertidos."

#: ../../PyMOTW/articles/data_persistence.rst:11
msgid "Serializing Objects"
msgstr "Serializando objetos"

#: ../../PyMOTW/articles/data_persistence.rst:13
msgid ""
"Python includes two modules capable of converting objects into a "
"transmittable or storable format (*serializing*): :mod:`pickle` and :mod:"
"`json`.  It is most common to use :mod:`pickle`, since there is a fast C "
"implementation and it is integrated with some of the other standard library "
"modules that actually store the serialized data, such as :mod:`shelve`.  "
"Web-based applications may want to examine :mod:`json`, however, since it "
"integrates better with some of the existing web service storage "
"applications."
msgstr ""
"Python incluye dos módulos capaces de convertir los objetos en un formato "
"transmisible o almacenable (*serialización*) :mod:`pickle` y :mod:` json`. "
"Es más común el uso de :mod: `pickle`, ya que existe una implementación "
"rápida en C y se integra con algunos de los otros módulos de biblioteca "
"estándar que realmente almacenan los datos serializados, tales como :mod:"
"`shelve`. Sin embargo, aplicaciones basadas en la Web pueden querer "
"examinar :mod:`json`, ya que se integra mejor con algunas de las "
"aplicaciones existentes de almacenamiento de servicios web."

#: ../../PyMOTW/articles/data_persistence.rst:17
msgid "Storing Serialized Objects"
msgstr "Guardando objetos serializados"

#: ../../PyMOTW/articles/data_persistence.rst:19
msgid ""
"Once the in-memory object is converted to a storable format, the next step "
"is to decide how to store the data.  A simple flat-file with serialized "
"objects written one after the other works for data that does not need to be "
"indexed in any way.  But Python includes a collection of modules for "
"storing key-value pairs in a simple database using one of the DBM format "
"variants."
msgstr ""
"Una vez en memoria el objeto es convertido a un formato para guardar, el "
"próximo paso es decidir como guardar el dato. Un archivo plano con objetos "
"serializados escritos uno después del otro funciona para datos que no "
"necesitan ser indexados en ninguna forma. Pero Python incluye una colección "
"de módulos para guardar pares de valores clave-valor en una base de datos "
"simple utilizando uno de las variantes de formato DBM."

#: ../../PyMOTW/articles/data_persistence.rst:21
msgid ""
"The simplest interface to take advantage of the DBM format is provided by :"
"mod:`shelve`.  Simply open the shelve file, and access it through a "
"dictionary-like API.  Objects saved to the shelve are automatically pickled "
"and saved without any extra work on your part."
msgstr ""
"La sencilla interfaz para aprovechar el formato DBM es proporcionado por :"
"mod:`shelve`. Basta con abrir el archivo shelve, y acceder a ella a través "
"de una API similar a un diccionario. Objetos guardados en shelve se "
"conservan en formato pickle y se guardan sin ningún trabajo adicional de su "
"parte de forma automática."

#: ../../PyMOTW/articles/data_persistence.rst:23
msgid ""
"One drawback of shelve is that with the default interface you can't "
"guarantee which DBM format will be used.  That won't matter if your "
"application doesn't need to share the database files between hosts with "
"different libraries, but if that is needed you can use one of the classes "
"in the module to ensure a specific format is selected (:ref:`shelve-shelf-"
"types`)."
msgstr ""
"Un inconveniente de shelve es que con la interfaz por defecto no se pude "
"garantizar que el formato DBM se utilizará. Eso no importa si su aplicación "
"no necesita compartir los archivos de base de datos entre hosts con "
"diferentes bibliotecas, pero si esto es necesario se puede usar una de las "
"clases en el módulo par asegurar que un formato especifico es seleccionado "
"(:ref:`shelve-shelf-types`)."

#: ../../PyMOTW/articles/data_persistence.rst:25
msgid ""
"If you're going to be passing a lot of data around via JSON anyway, using :"
"mod:`json` and :mod:`anydbm` can provide another persistence mechanism.  "
"Since the DBM database keys and values must be strings, however, the "
"objects won't be automatically re-created when you access the value in the "
"database."
msgstr ""
"Si vas a pasar de todos modos una gran cantidad de datos vía JSON, usando :"
"mod:`json` y :mod:`anydbm` puede proveer otro mecanismo de persistencia. "
"Sin embargo, dado que las claves y valores de las base de datos DBM deben "
"ser cadenas de caracteres, los objetos no se le vuelve a crear "
"automáticamente cuando se accede al valor en la base de datos."

#: ../../PyMOTW/articles/data_persistence.rst:29
msgid "Relational Databases"
msgstr "Base de datos relacionales"

#: ../../PyMOTW/articles/data_persistence.rst:31
msgid ""
"The excellent :mod:`sqlite3` in-process relational database is available "
"with most Python distributions.  It stores its database in memory or in a "
"local file, and all access is from within the same process, so there is no "
"network lag.  The compact nature of :mod:`sqlite3` makes it especially well "
"suited for embedding in desktop applications or development versions of web "
"apps."
msgstr ""
"La excelente base de datos relacional :mod:`sqlite3` esta disponible con la "
"mayoria de las distribuciones de Python. Almacena su base de datos en la "
"memoria o en un archivo local, y todo el acceso es dentro del mismo "
"proceso, con lo cual no hay retrasos en red.  La naturaleza compacta de :"
"mod:`sqlite3` hace que sea especialmente adecuado para la incorporación en "
"aplicaciones de escritorio o versiones de desarrollo de aplicaciones web."

#: ../../PyMOTW/articles/data_persistence.rst:33
msgid ""
"All access to the database is through the Python DBI 2.0 API, by default, "
"as no object relational mapper (ORM) is included.  The most popular general "
"purpose ORM is `SQLAlchemy <http://www.sqlalchemy.org/>`_, but others such "
"as Django's native ORM layer also support SQLite.  SQLAlchemy is easy to "
"install and set up, but if your objects aren't very complicated and you are "
"worried about overhead, you may want to use the DBI interface directly."
msgstr ""
"Por defecto todos los accesos a la base de datos es a través de la API de "
"Python 2.0 DBI, ya que no se incluye el objeto del asignador relacional "
"(ORM). El más popular ORM de propósito general es `SQLAlchemy <http://www."
"sqlalchemy.org/>` _, pero otras como la capa ORM nativa de Django también "
"apoyan SQLite. SQLAlchemy es fácil de instalar y configurar, pero si sus "
"objetos no son muy complicados y no esta preocupado por el gasto extra, es "
"posible que desee utilizar la interfaz DBI directamente."

#: ../../PyMOTW/articles/data_persistence.rst:37
msgid "Data Exchange Through Standard Formats"
msgstr "Intercambio de datos a través de formatos estándar"

#: ../../PyMOTW/articles/data_persistence.rst:39
msgid ""
"Although not usually considered a true persistence format :mod:`csv`, or "
"comma-separated-value, files can be an effective way to migrate data "
"between applications.  Most spreadsheet programs and databases support both "
"export and import using CSV, so dumping data to a CSV file is frequently "
"the simplest way to move data out of your application and into an analysis "
"tool."
msgstr ""
"Aunque no se considera por lo general un verdadero formato de persistencia :"
"mod:`csv` o valores separados por comas, los archivos pueden ser una forma "
"efectiva para migrar datos entre aplicaciones. La mayoría de los programas "
"de hojas de cálculo y bases de datos soportan tanto la exportación e "
"importación utilizando CSV, los datos de modo de dumping a un archivo CSV "
"es con frecuencia la forma más sencilla de mover los datos de su aplicación "
"y en una herramienta de análisis."
