#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: 2015-11-03 17:11-0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/file_access.rst:3
msgid "The File System"
msgstr ""

#: ../../source/file_access.rst:5
#, fuzzy
msgid ""
"Python's standard library includes a large range of tools for working "
"with files on the file system, building and parsing filenames, and "
"examining file contents."
msgstr ""
"La librería estándar de Python incluye un gran rango de herramientas para"
" trabajar con archivos, nombre de archivos y contenido de archivos."

#: ../../source/file_access.rst:9
msgid ""
"The first step in working with files is to determine the name of the file"
" to work on.  Python represents filenames as simple strings, but provides"
" tools for building them from standard, platform-independent, components "
"in :mod:`os.path`."
msgstr ""

#: ../../source/file_access.rst:14
msgid ""
"The :mod:`pathlib` module provides an object-oriented API for working "
"with file system paths. Using it instead of :mod:`os.path` provides some "
"conveniences because it operates at a higher level of abstraction."
msgstr ""

#: ../../source/file_access.rst:19
msgid ""
"List the contents of a directory with ``listdir()`` from :mod:`os`, or "
"use :mod:`glob` to build a list of filenames from a pattern."
msgstr ""

#: ../../source/file_access.rst:23
msgid ""
"The file name pattern matching used by :mod:`glob` is also exposed "
"directly through :mod:`fnmatch` so it can be used in other contexts."
msgstr ""

#: ../../source/file_access.rst:26
#, fuzzy
msgid ""
"After the name of the file is identified, other characteristics, such as "
"permissions or the file size, can be checked using ``os.stat()`` and the "
"constants in :mod:`stat`."
msgstr ""
"Una vez conocido el nombre del archivo, es posible que desee comprobar "
"otras características tales como permisos o el tamaño del archivo usando "
"``os.stat()`` y las constantes en :mod:`stat`."

#: ../../source/file_access.rst:30
#, fuzzy
msgid ""
"When an application needs random access to files, :mod:`linecache` makes "
"it easy to read lines by their line number.  The contents of the file are"
" maintained in a cache, so be careful of memory consumption."
msgstr ""
"Si su aplicación necesita acceso aleatorio a archivos, :mod:`linecache` "
"hace que sea fácil de leer las líneas por su número de línea. El "
"contenido del archivo se mantienen en una memoria caché, así que ten "
"cuidado con el consumo de memoria."

#: ../../source/file_access.rst:34
msgid ""
":mod:`tempfile` is useful for cases that need to create scratch files to "
"hold data temporarily, or before moving it to a permanent location. It "
"provides classes to create temporary files and directories safely and "
"securely.  Names are guaranteed to be unique, and include random "
"components so they are not easily guessable."
msgstr ""

#: ../../source/file_access.rst:40
#, fuzzy
msgid ""
"Frequently, programs need to work on files as a whole, without regard to "
"their content.  The :mod:`shutil` module includes high-level file "
"operations such as copying files and directories, and creating or "
"extracting archives of files."
msgstr ""
"Con frecuencia es necesario trabajar en un archivo como un todo, sin "
"preocuparse de lo que hay en el. El modulo :mod:`shutil` incluye las "
"operaciones de archivos de alto nivel, tales como la copia de archivos y "
"directorios, establecer permisos, etc."

#: ../../source/file_access.rst:45
msgid ""
"The :mod:`filecmp` module compares files and directories by looking at "
"the bytes they contain, but without any special knowledge about their "
"format."
msgstr ""

#: ../../source/file_access.rst:49
msgid ""
"The built-in ``file`` class can be used to read and write files visible "
"on local file systems.  A program's performance can suffer when it "
"accesses large files through the ``read()`` and ``write()`` interfaces, "
"though, since they both involve copying the data multiple times as it is "
"moved from the disk to memory the application can see.  Using :mod:`mmap`"
" tells the operating system to use its virtual memory subsystem to map a "
"file's contents directly into memory accessible by a program, avoiding a "
"copy step between the operating system and the internal buffer for the "
"``file`` object."
msgstr ""

#: ../../source/file_access.rst:59
msgid ""
"Text data using characters not available in ASCII is usually saved in a "
"Unicode data format.  Since the standard ``file`` handle assumes each "
"byte of a text file represents one character, reading Unicode text with "
"multi-byte encodings requires extra processing.  The :mod:`codecs` module"
" handles the encoding and decoding automatically, so that in many cases a"
" non-ASCII file can be used without any other changes to the program."
msgstr ""

#: ../../source/file_access.rst:67
msgid ""
"The :mod:`io` module provides access to the classes used to implement "
"Python's file-based input and output.  For testing code that depends on "
"reading or writing data from files, :mod:`io` provides an in-memory "
"stream object that behaves like a file, but does not reside on disk."
msgstr ""

#~ msgid "File Access"
#~ msgstr "Acceso a archivo"

#~ msgid "Filenames"
#~ msgstr "Nombre de archivos"

#~ msgid ""
#~ "The first step in working with "
#~ "files is to get the name of "
#~ "the file so you can operate on "
#~ "it.  Python represents filenames as "
#~ "simple strings, but provides tools for"
#~ " building them from standard, platform-"
#~ "independent, components in :mod:`os.path`.  "
#~ "List the contents of a directory "
#~ "with ``listdir()`` from :mod:`os`, or "
#~ "use :mod:`glob` to build a list of"
#~ " filenames from a pattern.  Finer "
#~ "grained filtering of filenames is "
#~ "possible with :mod:`fnmatch`."
#~ msgstr ""
#~ "El primer paso para trabajar con "
#~ "los archivos es conseguir que el "
#~ "nombre del archivo para que pueda "
#~ "operar en él. Python representa los "
#~ "nombres de archivo como cadenas simples,"
#~ " pero proporciona herramientas para "
#~ "construirlos desde estándar, independientes de"
#~ " la plataforma, los componentes de "
#~ ":mod:`os.path`. Enumerar los contenidos de "
#~ "un directorio con ``listdir()`` de :mod:"
#~ " `os` o uso :mod:`glob` para "
#~ "construir una lista de nombres de "
#~ "archivo de un patrón. Filtrado de "
#~ "grano fino de nombres de archivo "
#~ "es posible con :mod: `fnmatch`."

#~ msgid "Meta-data"
#~ msgstr "Metadatos"

#~ msgid "Reading Files"
#~ msgstr "Leer archivos"

#~ msgid ""
#~ "If you're writing a filter application"
#~ " that processes text input line-"
#~ "by-line, :mod:`fileinput` provides an easy"
#~ " framework to get started.  The "
#~ "fileinput API calls for you to "
#~ "iterate over the ``input()`` generator, "
#~ "processing each line as it is "
#~ "yielded.  The generator handles parsing "
#~ "command line arguments for file names,"
#~ " or falling back to reading directly"
#~ " from ``sys.stdin``.  The result is a"
#~ " flexible tool your users can run "
#~ "directly on a file or as part "
#~ "of a pipeline."
#~ msgstr ""
#~ "Si estás escribiendo una aplicación de"
#~ " filtro que procesa línea por línea"
#~ " de entrada de texto, :mod: "
#~ "`fileinput` proporciona un marco fácil "
#~ "para empezar. La API fileinput pide "
#~ "a iterar sobre el generador ``input "
#~ "()`` , el procesamiento de cada "
#~ "línea, ya que se produjo. El "
#~ "generador maneja analizar los argumentos "
#~ "de línea de comandos para los "
#~ "nombres de archivo, o cayendo de "
#~ "nuevo a la lectura directa de "
#~ "``sys.stdin``. El resultado es una "
#~ "herramienta flexible que los usuarios "
#~ "puedan ejecutar directamente en un "
#~ "archivo o como parte de una "
#~ "tubería."

#~ msgid "Temporary Files"
#~ msgstr "Archivos temporarios"

#~ msgid ""
#~ "For cases where you need to create"
#~ " scratch files to hold data "
#~ "temporarily, or before moving it to "
#~ "a permanent location, :mod:`tempfile` will "
#~ "be very useful.  It provides classes "
#~ "to create temporary files and "
#~ "directories safely and securely.  Names "
#~ "are guaranteed not to collide, and "
#~ "include random components so they are"
#~ " not easily guessable."
#~ msgstr ""
#~ "Para los casos en que es necesario"
#~ " crear archivos de memoria virtual "
#~ "para mantener datos en forma temporal,"
#~ " o antes de moverlo a una "
#~ "ubicación permanente, :mod:`tempfile` será muy"
#~ " útil. Proporciona clases para crear "
#~ "archivos temporales y directorios de "
#~ "forma segura. Nombres están garantizados "
#~ "de no colisionar, e incluyen componentes"
#~ " aleatorios por lo que no son "
#~ "fáciles de adivinar."

#~ msgid "Files and Directories"
#~ msgstr "Archivos y directorios"

