#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: 2015-11-03 15:50-0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/data_structures.rst:3
#, fuzzy
msgid "Data Structures"
msgstr "Estructuras de datos en memoria"

#: ../../source/data_structures.rst:5
msgid ""
"Python includes several standard programming data structures, such as "
"``list``, ``tuple``, ``dict``, and ``set``, as part of its built-in "
"types.  Many applications do not require other structures, but when they "
"do, the standard library provides powerful and well-tested versions that "
"are ready to be used."
msgstr ""

#: ../../source/data_structures.rst:11
msgid ""
"The :mod:`enum` module provides an implementation of an *enumeration* "
"type, with iteration and comparison capabilities. It can be used to "
"create well-defined symbols for values, instead of using literal strings "
"or integers."
msgstr ""

#: ../../source/data_structures.rst:16
msgid ""
"The :mod:`collections` module includes implementations of several data "
"structures that extend those found in other modules.  For example, "
"``Deque`` is a double-ended queue, which allows the addition or removal "
"of items from either end.  The ``defaultdict`` is a dictionary that "
"responds with a default value if a key is missing, while ``OrderedDict`` "
"remembers the sequence in which items are added to it.  ``namedtuple`` "
"extends the normal ``tuple`` to give each member item an attribute name "
"in addition to a numeric index."
msgstr ""

#: ../../source/data_structures.rst:26
msgid ""
"For large amounts of data, an :mod:`array` may make more efficient use of"
" memory than a ``list``.  Since the ``array`` is limited to a single data"
" type, it can use a more compact memory representation than a general-"
"purpose ``list``.  At the same time, ``array`` instances can be "
"manipulated using many of the same methods as a ``list``, so it may be "
"possible to replace a ``list`` with an ``array`` in an application "
"without a lot of other changes."
msgstr ""

#: ../../source/data_structures.rst:35
msgid ""
"Sorting items in a sequence is a fundamental aspect of data manipulation."
"  Python's ``list`` includes a ``sort()`` method, but sometimes it is "
"more efficient to maintain a list in sorted order without re-sorting it "
"each time its contents are changed.  The functions in :mod:`heapq` modify"
" the contents of a list while preserving the sort order of the list with "
"low overhead."
msgstr ""

#: ../../source/data_structures.rst:42
#, fuzzy
msgid ""
"Another option for building sorted lists or arrays is :mod:`bisect`. It "
"uses a binary search to find the insertion point for new items, and is an"
" alternative to repeatedly sorting a list that changes frequently."
msgstr ""
"Otra opción para construir listas o matrices ordenadas es  :mod:`bisect`."
" bisect usa una búsqueda binaria para encontrar el punto de inserción "
"para nuevos ítems, y es una alternativa para clasificar repetidamente una"
" lista que cambia con frecuencia.-"

#: ../../source/data_structures.rst:47
#, fuzzy
msgid ""
"Although the built-in ``list`` can simulate a queue using the "
"``insert()`` and ``pop()`` methods, it is not thread-safe.  For true "
"ordered communication between threads use the :mod:`queue` module.  "
":mod:`multiprocessing` includes a version of a ``Queue`` that works "
"between processes, making it easier to convert a multithreaded program to"
" use processes instead."
msgstr ""
"Aunque la lista puede simular una cola utilizando los métodos "
"``insert()`` y ``pop()`` , no es seguro para subprocesos. Para una "
"verdadera comunicación ordenada entre subprocesos debe utilizar "
":mod:`Queue`.  :mod:`multiprocessing` incluye una versión de una cola que"
" funciona entre procesos, haciendo mas fácil portar entre módulos.-"

#: ../../source/data_structures.rst:54
#, fuzzy
msgid ""
":mod:`struct` is useful for decoding data from another application, "
"perhaps coming from a binary file or stream of data, into Python's native"
" types for easier manipulation."
msgstr ""
"Si se esta trabajando con datos desde otra aplicación, quizás viniendo "
"desde un archivo binario o un flujo de datos, usted puede encontrar útil "
"a :mod:`struct`  para decodificar datos en tipos de datos nativos de "
"Python para una manipulación mas fácil.-"

#: ../../source/data_structures.rst:58
msgid ""
"This chapter covers two modules related to memory management.  For highly"
" interconnected data structures, such as graphs and trees, use "
":mod:`weakref` to maintain references while still allowing the garbage "
"collector to clean up objects after they are no longer needed.  Use the "
"functions in :mod:`copy` for duplicating data structures and their "
"contents, including making recursive copies with ``deepcopy()``."
msgstr ""

#: ../../source/data_structures.rst:65
msgid ""
"Debugging data structures can be time consuming, especially when wading "
"through printed output of large sequences or dictionaries.  Use "
":mod:`pprint` to create easy-to-read representations that can be printed "
"to the console or written to a log file for easier debugging."
msgstr ""

#: ../../source/data_structures.rst:70
msgid ""
"Finally, if the available types do not meet the requirements, subclass "
"one of the native types and customize it, or build a new container type "
"using one of the abstract base classes defined in :mod:`collections` as a"
" starting point."
msgstr ""

#~ msgid ""
#~ "Python includes several standard programming"
#~ " data structures as `built-in types"
#~ " <http://docs.python.org/library/stdtypes.html>`_ (list, "
#~ "tuple, dictionary, and set).  Most "
#~ "applications won't need any other "
#~ "structures, but when they do the "
#~ "standard library delivers."
#~ msgstr ""
#~ "Python incluye varias estructuras de "
#~ "datos de programación estándar como "
#~ "`built-in types "
#~ "<http://docs.python.org/library/stdtypes.html>`_  (lista, "
#~ "tupla, diccionarios y conjuntos). La "
#~ "mayoría de las aplicaciones no necesita"
#~ " otras estructuras, pero cuando lo "
#~ "hacen la biblioteca estándar lo ofrece."

#~ msgid "array"
#~ msgstr "matriz"

#~ msgid ""
#~ "For large amounts of data, it may"
#~ " be more efficient to use an "
#~ ":mod:`array` instead of a ``list``.  "
#~ "Since the array is limited to a"
#~ " single data type, it can use a"
#~ " more compact memory representation than"
#~ " a general purpose list.  As an "
#~ "added benefit, arrays can be manipulated"
#~ " using many of the same methods "
#~ "as a list, so it may be "
#~ "possible to replaces lists with arrays"
#~ " in to your application without a "
#~ "lot of other changes."
#~ msgstr ""
#~ "Para grandes cantidades de datos, puede"
#~ " ser mas eficiente usar un "
#~ ":mod:`array` en vez de una ``lista``."
#~ " Puesto que la matriz esta limitada"
#~ " a un tipo de datos único, "
#~ "puede utilizar una representación mas "
#~ "compacta de memoria que una lista "
#~ "de propósito general. Como beneficio "
#~ "adicional, los arreglos pueden ser "
#~ "manipulados usando muchos de los mismos"
#~ " métodos de una lista, así que "
#~ "puede ser posible sustituir las listas"
#~ " con los arreglos de discos para "
#~ "su aplicación sin un montón de "
#~ "otros cambios.-"

#~ msgid "Sorting"
#~ msgstr "Ordenando"

#~ msgid ""
#~ "If you need to maintain a sorted"
#~ " list as you add and remove "
#~ "values, check out :mod:`heapq`.  By "
#~ "using the functions in :mod:`heapq` to"
#~ " add or remove items from a "
#~ "list, you can maintain the sort "
#~ "order of the list with low "
#~ "overhead."
#~ msgstr ""
#~ "Si usted necesita mantener una lista "
#~ "ordenada, como para agregar y eliminar"
#~ " valores, puede mirar :mod:`heapq`. "
#~ "Mediante el uso de las funciones "
#~ "de :mod:`heapq` para agregar o quitar"
#~ " elementos de una lista, usted puede"
#~ " mantener el orden de la lista "
#~ "con bajo costo operativo.-"

#~ msgid "Queue"
#~ msgstr "Cola"

#~ msgid "collections"
#~ msgstr "colecciones "

#~ msgid ""
#~ ":mod:`collections` includes implementations of "
#~ "several data structures that extend "
#~ "those found in other modules.  For "
#~ "example, Deque is a double-ended "
#~ "queue, and allows you to add or"
#~ " remove items from either end.  The"
#~ " ``defaultdict`` is a dictionary that "
#~ "responds with a default value if a"
#~ " key is missing.  And ``namedtuple`` "
#~ "extends the normal tuple to give "
#~ "each member item an attribute name "
#~ "in addition to a numerical index."
#~ msgstr ""
#~ ":mod:`collections`  incluye implementaciones de "
#~ "varias estructuras de datos que se "
#~ "extienden de las que se encuentran "
#~ "en otros módulos. Por ejemplo, deque "
#~ "es una cola de doble extremo, y"
#~ " le permite agregar o quitar "
#~ "elementos desde cualquier extremo. El "
#~ "``defaultdict`` es un diccionario que "
#~ "responde con un valor predeterminado si"
#~ " la clave no se encuentra. Y "
#~ "``namedtuple`` extiende la tupla normal "
#~ "a dar a cada elemento de miembro"
#~ " de un nombre de atributo, además "
#~ "de un índice numérico."

#~ msgid "Decoding Data"
#~ msgstr "Datos de decodificación "

#~ msgid "Custom Variations"
#~ msgstr "Variaciones personalizados"

#~ msgid ""
#~ "And finally, if the available types "
#~ "don't give you what you need, you"
#~ " may want to subclass one of "
#~ "the native types and customize it.  "
#~ "You can also start from scratch by"
#~ " using the abstract base classes "
#~ "defined in :mod:`collections`."
#~ msgstr ""
#~ "Y por último, si los tipos "
#~ "disponibles no te dan lo que "
#~ "necesita, es posible que desee crear "
#~ "una subclase de uno de los tipos"
#~ " nativos y personalizarlo. También puede"
#~ " empezar de cero mediante el uso "
#~ "de las clases base abstractas definidas"
#~ " en :mod:`collections`."

