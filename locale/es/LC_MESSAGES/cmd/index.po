# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: 2015-10-10 11:18-0300\n"
"Last-Translator: Roberto Betancur <tinolin2010@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.5.4\n"
"Language: es\n"

#: ../../source/cmd/index.rst:5
msgid "cmd --- Line-oriented Command Processors"
msgstr ""

#: ../../source/cmd/index.rst:10
msgid "Create line-oriented command processors."
msgstr ""

#: ../../source/cmd/index.rst:12
msgid ""
"The ``cmd`` module contains one public class, ``Cmd``, designed to be "
"used as a base class for interactive shells and other command "
"interpreters. By default it uses :mod:`readline` for interactive prompt "
"handling, command line editing, and command completion."
msgstr ""

#: ../../source/cmd/index.rst:19
msgid "Processing Commands"
msgstr ""

#: ../../source/cmd/index.rst:21
msgid ""
"The interpreter uses a loop to read all lines from its input, parse them, "
"and then dispatch the command to an appropriate command handler. Input lines "
"are parsed into two parts. The command, and any other text on the line. If "
"the user enters a command ``foo bar``, and your class includes a method "
"named :func:`do_foo()`, it is called with ``\"bar\"`` as the only argument."
msgstr ""

#: ../../source/cmd/index.rst:28
msgid ""
"The end-of-file marker is dispatched to ``do_EOF()``. If a command "
"handler returns a true value, the program will exit cleanly. So to give a"
" clean way to exit the interpreter, make sure to implement ``do_EOF()`` "
"and have it return True."
msgstr ""

#: ../../source/cmd/index.rst:33
msgid "This simple example program supports the \"greet\" command:"
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_simple.py"
msgstr ""

#: ../../source/cmd/index.rst:39
msgid ""
"Running it interactively demonstrates how commands are dispatched and "
"shows of some of the features included in ``Cmd``."
msgstr ""

#: ../../source/cmd/index.rst:50
msgid ""
"The ``help`` command is built into :class:`Cmd`. With no arguments, it shows "
"the list of commands available. If you include a command you want help on, "
"the output is more verbose and restricted to details of that command, when "
"available."
msgstr ""

#: ../../source/cmd/index.rst:65
msgid ""
"The ``help`` command is built into ``Cmd``. With no arguments, ``help`` "
"shows the list of commands available. If the input includes a command "
"name, the output is more verbose and restricted to details of that "
"command, when available."
msgstr ""

#: ../../source/cmd/index.rst:70
msgid "If the command is ``greet``, ``do_greet()`` is invoked to handle it:"
msgstr ""

#: ../../source/cmd/index.rst:78
msgid ""
"If the class does not include a specific handler for a command, the "
"method ``default()`` is called with the entire input line as an argument."
" The built-in implementation of ``default()`` reports an error."
msgstr ""

#: ../../source/cmd/index.rst:88
msgid ""
"Since ``do_EOF()`` returns True, typing Ctrl-D causes the interpreter to "
"exit."
msgstr ""

#: ../../source/cmd/index.rst:95
msgid "No newline is printed on exit, so the results are a little messy."
msgstr ""

#: ../../source/cmd/index.rst:98
msgid "Command Arguments"
msgstr "Argumentos de Comandos"

#: ../../source/cmd/index.rst:100
msgid ""
"This version of the example includes a few enhancements to eliminate some of "
"the annoyances and add help for the greet command."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_arguments.py"
msgstr ""

#: ../../source/cmd/index.rst:107
msgid ""
"The docstring added to ``do_greet()`` becomes the help text for the "
"command:"
msgstr ""

#: ../../source/cmd/index.rst:128
msgid ""
"The output shows one optional argument to ``greet``, ``person``. Although"
" the argument is optional to the command, there is a distinction between "
"the command and the callback method. The method always takes the "
"argument, but sometimes the value is an empty string. It is left up to "
"the command handler to determine if an empty argument is valid, or do any"
" further parsing and processing of the command. In this example, if a "
"person's name is provided then the greeting is personalized."
msgstr ""

#: ../../source/cmd/index.rst:144
msgid ""
"Whether an argument is given by the user or not, the value passed to the "
"command handler does not include the command itself. That simplifies "
"parsing in the command handler, especially if multiple arguments are "
"needed."
msgstr ""

#: ../../source/cmd/index.rst:150
msgid "Live Help"
msgstr ""

#: ../../source/cmd/index.rst:152
msgid ""
"In the previous example, the formatting of the help text leaves something to "
"be desired. Since it comes from the docstring, it retains the indentation "
"from our source. We could edit the source to remove the extra white-space, "
"but that would leave our application looking poorly formatted. An "
"alternative solution is to implement a help handler for the greet command, "
"named :func:`help_greet()`. When present, the help handler is called on to "
"produce help text for the named command."
msgstr ""

#: ../../source/cmd/index.rst:165
msgid ""
"In this example, the text is static but formatted more nicely. It would "
"also be possible to use previous command state to tailor the contents of "
"the help text to the current context."
msgstr ""

#: ../../source/cmd/index.rst:177
msgid ""
"It is up to the help handler to actually output the help message, and not"
" simply return the help text for handling elsewhere."
msgstr ""

#: ../../source/cmd/index.rst:181
msgid "Auto-Completion"
msgstr ""

#: ../../source/cmd/index.rst:183
msgid ""
":class:`Cmd` includes support for command completion based on the names of "
"the commands with processor methods. The user triggers completion by hitting "
"the tab key at an input prompt. When multiple completions are possible, "
"pressing tab twice prints a list of the options."
msgstr ""

#: ../../source/cmd/index.rst:191
msgid ""
"The GNU libraries needed for ``readline`` are not available on all "
"platforms by default. In those cases, tab completion may not work. See "
":mod:`readline` for tips on installing the necessary libraries if your "
"Python installation does not have them."
msgstr ""

#: ../../source/cmd/index.rst:205
msgid ""
"When there is input text, :func:`complete_greet()` returns a list of friends "
"that match. Otherwise, the full list of friends is returned."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_arg_completion.py"
msgstr ""

#: ../../source/cmd/index.rst:218
msgid ""
"When there is input text, ``complete_greet()`` returns a list of friends "
"that match. Otherwise, the full list of friends is returned."
msgstr ""

#: ../../source/cmd/index.rst:233
msgid ""
"If the name given is not in the list of friends, the formal greeting is "
"given."
msgstr ""

#: ../../source/cmd/index.rst:242
msgid "Overriding Base Class Methods"
msgstr ""

#: ../../source/cmd/index.rst:244
msgid ""
"Cmd includes several methods that can be overridden as hooks for taking "
"actions or altering the base class behavior. This example is not exhaustive, "
"but contains many of the methods commonly useful."
msgstr ""

#: ../../source/cmd/index.rst:252
msgid ""
"``cmdloop()`` is the main processing loop of the interpreter. Overriding "
"it is usually not necessary, since the ``preloop()`` and ``postloop()`` "
"hooks are available."
msgstr ""

#: ../../source/cmd/index.rst:256
msgid ""
"Each iteration through :func:`cmdloop()` calls :func:`onecmd()` to dispatch "
"the command to its processor. The actual input line is parsed with :func:"
"`parseline()` to create a tuple containing the command, and the remaining "
"portion of the line."
msgstr ""

#: ../../source/cmd/index.rst:261
msgid ""
"If the line is empty, ``emptyline()`` is called. The default "
"implementation runs the previous command again. If the line contains a "
"command, first ``precmd()`` is called then the handler is looked up and "
"invoked. If none is found, ``default()`` is called instead. Finally "
"``postcmd()`` is called."
msgstr ""

#: ../../source/cmd/index.rst:267
msgid "Here is an example session with ``print`` statements added:"
msgstr ""

#: ../../source/cmd/index.rst:290
msgid "Configuring Cmd Through Attributes"
msgstr ""

#: ../../source/cmd/index.rst:292
msgid ""
"In addition to the methods described above, there are several attributes for "
"controlling command interpreters."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_attributes.py"
msgstr ""

#: ../../source/cmd/index.rst:305
msgid ""
"This example class shows a command handler to let the user control the "
"prompt for the interactive session."
msgstr ""

#: ../../source/cmd/index.rst:328
msgid "Running Shell Commands"
msgstr ""

#: ../../source/cmd/index.rst:330
msgid ""
"To supplement the standard command processing, ``Cmd`` includes two "
"special command prefixes. A question mark (``?``) is equivalent to the "
"built-in ``help`` command, and can be used in the same way. An "
"exclamation point (``!``) maps to ``do_shell()``, and is intended for "
"\"shelling out\" to run other commands, as in this example."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_do_shell.py"
msgstr ""

#: ../../source/cmd/index.rst:340
msgid ""
"To supplement the standard command processing, :class:`Cmd` includes 2 "
"special command prefixes. A question mark (``?``) is equivalent to the built-"
"in help command, and can be used in the same way. An exclamation point (``!"
"``) maps to :func:`do_shell()`, and is intended for shelling out to run "
"other commands, as in this example."
msgstr ""

#: ../../source/cmd/index.rst:375
msgid "Alternative Inputs"
msgstr ""

#: ../../source/cmd/index.rst:377
msgid ""
"While the default mode for ``Cmd()`` is to interact with the user through"
" the :mod:`readline` library, it is also possible to pass a series of "
"commands in to standard input using standard Unix shell redirection."
msgstr ""

#: ../../source/cmd/index.rst:397
msgid ""
"If you would rather have your program read the script file directly, a few "
"other changes may be needed. Since :mod:`readline` interacts with the "
"terminal/tty device, rather than the standard input stream, you should "
"disable it if you know your script is going to be reading from a file. Also, "
"to avoid printing superfluous prompts, you can set the prompt to an empty "
"string. This example shows how to open a file and pass it as input to a "
"modified version of the HelloWorld example."
msgstr ""

#: ../../PyMOTW/cmd/index.rst:387
msgid ""
"With *use_rawinput* set to False and *prompt* set to an empty string, we can "
"call the script on this input file:"
msgstr ""

#: ../../source/cmd/index.rst:409
msgid ""
"With ``use_rawinput`` set to False and ``prompt`` set to an empty string,"
" the script can be called on an input file with one command on each line."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_file.txt"
msgstr ""

#: ../../source/cmd/index.rst:416
msgid ""
"Running the example script with the example input produces the following "
"output."
msgstr ""

#: ../../source/cmd/index.rst:427
msgid "Commands from sys.argv"
msgstr ""

#: ../../source/cmd/index.rst:429
msgid ""
"Command line arguments to the program can also be processed as commands "
"for the interpreter class, instead of reading commands from the console "
"or a file.  To use the command line arguments, call ``onecmd()`` "
"directly, as in this example."
msgstr ""

#: ../../source/cmd/index.rst
msgid "cmd_argv.py"
msgstr ""

#: ../../source/cmd/index.rst:438
msgid ""
"Since ``onecmd()`` takes a single string as input, the arguments to the "
"program need to be joined together before being passed in."
msgstr ""

#: ../../source/cmd/index.rst:455
msgid ":pydoc:`cmd`"
msgstr ""

#: ../../source/cmd/index.rst:457
msgid ""
"`cmd2 <http://pypi.python.org/pypi/cmd2>`__ -- Drop-in replacement for "
"``cmd`` with additional features."
msgstr ""

#: ../../source/cmd/index.rst:460
msgid ""
"`GNU readline`_ -- The GNU Readline library provides functions that allow"
" users to edit input lines as they are typed."
msgstr ""

#: ../../source/cmd/index.rst:463
msgid ":mod:`readline` -- The Python standard library interface to readline."
msgstr ""

#: ../../source/cmd/index.rst:466
msgid ":mod:`subprocess` -- Managing other processes and their output."
msgstr ""

