# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Doug Hellmann
# This file is distributed under the same license as the PyMOTW-3 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMOTW-3 \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-15 15:56-0300\n"
"PO-Revision-Date: 2015-10-28 06:24-0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/abc/index.rst:3
#, fuzzy
msgid "abc --- Abstract Base Classes"
msgstr "abc -  Clases base abstractas"

#: ../../source/abc/index.rst:8
#, fuzzy
msgid "Define and use abstract base classes for interface verification."
msgstr ""
"Definir y utilizar clases base abstractas para los controles de la API en"
" su código."

#: ../../source/abc/index.rst:11
msgid "Why use Abstract Base Classes?"
msgstr "¿Por qué utilizar clases base abstractas?"

#: ../../source/abc/index.rst:13
msgid ""
"Abstract base classes are a form of interface checking more strict than "
"individual ``hasattr()`` checks for particular methods.  By defining an "
"abstract base class, a common API can be established for a set of "
"subclasses.  This capability is especially useful in situations where "
"someone less familiar with the source for an application is going to "
"provide plug-in extensions, but can also help when working on a large "
"team or with a large code-base where keeping track of all of the classes "
"at the same time is difficult or not possible."
msgstr ""

#: ../../source/abc/index.rst:23
msgid "How ABCs Work"
msgstr "Como trabaja ABC"

#: ../../source/abc/index.rst:25
msgid ""
"``abc`` works by marking methods of the base class as abstract, and then "
"registering concrete classes as implementations of the abstract base.  If"
" an application or library requires a particular API, ``issubclass()`` or"
" ``isinstance()`` can be used to check an object against the abstract "
"class."
msgstr ""

#: ../../source/abc/index.rst:31
msgid ""
"To start, define an abstract base class to represent the API of a set of "
"plug-ins for saving and loading data.  Set the metaclass for the new base"
" class to ``ABCMeta``, and use decorators to establish the public API for"
" the class.  The following examples use ``abc_base.py``."
msgstr ""

#: ../../source/abc/index.rst
msgid "abc_base.py"
msgstr ""

#: ../../source/abc/index.rst:43
msgid "Registering a Concrete Class"
msgstr "Registrando una clase concreta"

#: ../../source/abc/index.rst:45
msgid ""
"There are two ways to indicate that a concrete class implements an "
"abstract API: either explicitly register the class or create a new "
"subclass directly from the abstract base.  Use the ``register()`` class "
"method as a decorator on a concrete class to add it explicitly when the "
"class provides the required API, but is not part of the inheritance tree "
"of the abstract base class."
msgstr ""

#: ../../source/abc/index.rst
msgid "abc_register.py"
msgstr ""

#: ../../source/abc/index.rst:56
msgid ""
"In this example the ``RegisteredImplementation`` is derived from "
"``LocalBaseClass``, but is registered as implementing the ``PluginBase`` "
"API so ``issubclass()`` and ``isinstance()`` treat it as though it is "
"derived from ``PluginBase``."
msgstr ""

#: ../../source/abc/index.rst:76
msgid "Implementation Through Subclassing"
msgstr "Implementación a través de subclases"

#: ../../source/abc/index.rst:78
#, fuzzy
msgid ""
"Subclassing directly from the base avoids the need to register the class "
"explicitly."
msgstr ""
"Por clases directamente de la base, se puede evitar la necesidad de "
"registrar la clase explícitamente. "

#: ../../source/abc/index.rst
msgid "abc_subclass.py"
msgstr ""

#: ../../source/abc/index.rst:85
#, fuzzy
msgid ""
"In this case, normal Python class management features are used to "
"recognize ``SubclassImplementation`` as implementing the abstract "
"``PluginBase``."
msgstr ""
"En este caso se usa la gestión normal de la clase de Python para "
"reconocer ``PluginImplementation``  como una implementación abstracta de "
"``PluginBase``."

#: ../../source/abc/index.rst:102
#, fuzzy
msgid ""
"A side effect of using direct subclassing is it is possible to find all "
"of the implementations of a plug-in by asking the base class for the list"
" of known classes derived from it (this is not an ``abc`` feature, all "
"classes can do this)."
msgstr ""
"Un efecto secundario del uso de subclases directa es que es posible "
"encontrar todas las implementaciones de su plugin consultando a la clase "
"base por la lista de las clases conocidas derivadas de ella (esto no es "
"una característica de abc, todas las clases pueden hacer esto)"

#: ../../source/abc/index.rst
msgid "abc_find_subclasses.py"
msgstr ""

#: ../../source/abc/index.rst:111
#, fuzzy
msgid ""
"Even though ``abc_register()`` is imported, ``RegisteredImplementation`` "
"is not among the list of subclasses because it is not actually derived "
"from the base."
msgstr ""
"Tenga en cuenta que a pesar de que `` abc_register`` es importado, `` "
"RegisteredImplementation`` no está en la lista de subclases, ya que en "
"realidad no deriva de la base."

#: ../../source/abc/index.rst:128
msgid "Helper Base Class"
msgstr ""

#: ../../source/abc/index.rst:130
msgid ""
"Forgetting to set the metaclass properly means the concrete "
"implementations do not have their APIs enforced. To make it easier to set"
" up the abstract class properly, a base class is provided that sets the "
"metaclass automatically."
msgstr ""

#: ../../source/abc/index.rst
msgid "abc_abc_base.py"
msgstr ""

#: ../../source/abc/index.rst:139
msgid "To create a new abstract class, simply inherit from ``ABC``."
msgstr ""

#: ../../source/abc/index.rst:155
msgid "Incomplete Implementations"
msgstr "Implementaciones imcompletas"

#: ../../source/abc/index.rst:157
#, fuzzy
msgid ""
"Another benefit of subclassing directly from the abstract base class is "
"that the subclass cannot be instantiated unless it fully implements the "
"abstract portion of the API."
msgstr ""
"Otro beneficio de subclases directamente desde su clase base abstracta es"
" que la subclase no puede ser instanciada a menos que aplique plenamente "
"la parte abstracta de la API. Esto puede mantener implementaciones medio "
"terminadas activen errores inesperados en tiempo de ejecución."

#: ../../source/abc/index.rst
msgid "abc_incomplete.py"
msgstr ""

#: ../../source/abc/index.rst:165
msgid ""
"This keeps incomplete implementations from triggering unexpected errors "
"at runtime."
msgstr ""

#: ../../source/abc/index.rst:188
msgid "Concrete Methods in ABCs"
msgstr "Métodos concretos en ABC"

#: ../../source/abc/index.rst:190
#, fuzzy
msgid ""
"Although a concrete class must provide implementations of all abstract "
"methods, the abstract base class can also provide implementations that "
"can be invoked via ``super()``.  This allows common logic to be reused by"
" placing it in the base class, but forces subclasses to provide an "
"overriding method with (potentially) custom logic."
msgstr ""
"Aunque una clase concreta debe proporcionar una implementación de un "
"método abstracto, la clase base abstracta también puede proporcionar una "
"implementación que se puede invocar a través de `` super () ``. Esto le "
"permite volver a utilizar la lógica común mediante la colocación en la "
"clase base, pero fuerza a la subclase a proporcionar un método primordial"
" con (potencialmente) lógica personalizada."

#: ../../source/abc/index.rst
msgid "abc_concrete_method.py"
msgstr ""

#: ../../source/abc/index.rst:200
#, fuzzy
msgid ""
"Since ``ABCWithConcreteImplementation()`` is an abstract base class, it "
"is not possible to instantiate it to use it directly.  Subclasses *must* "
"provide an override for ``retrieve_values()``, and in this case the "
"concrete class sorts the data before returning it."
msgstr ""
"Desde `` ABCWithConcreteImplementation`` es una clase base abstracta, no "
"es posible crear una instancia para utilizarlo directamente. Las "
"subclases *deben* proporcionar un reemplazo para `` retrieve_values () "
"``, y en este caso las clases concretas transforman los datos antes de "
"devolverlos a todos."

#: ../../source/abc/index.rst:223
msgid "Abstract Properties"
msgstr "Propiedades abstractas"

#: ../../source/abc/index.rst:225
#, fuzzy
msgid ""
"If an API specification includes attributes in addition to methods, it "
"can require the attributes in concrete classes by combining "
"``abstractmethod()`` with ``property()``."
msgstr ""
"Si su especificación API incluye atributos además de los métodos, se "
"puede requerir los atributos en una clase concreta definiendo estos con  "
"``@abstractproperty``."

#: ../../source/abc/index.rst
#, fuzzy
msgid "abc_abstractproperty.py"
msgstr "Propiedades abstractas"

#: ../../source/abc/index.rst:233
msgid ""
"The ``Base`` class in the example cannot be instantiated because it has "
"only an abstract version of the property getter methods for ``value`` and"
" ``constant``.  The ``value`` property is given a concrete getter in "
"``Implementation`` and ``constant`` is defined using a class attribute."
msgstr ""

#: ../../source/abc/index.rst:255
msgid "Abstract read-write properties can also be defined."
msgstr ""

#: ../../source/abc/index.rst
msgid "abc_abstractproperty_rw.py"
msgstr ""

#: ../../source/abc/index.rst:261
msgid ""
"The concrete property must be defined the same way as the abstract "
"property, as either read-write or read-only.  Overriding a read-write "
"property in ``PartialImplementation`` with one that is read-only leaves "
"the property read-only -- the property's setter method from the base "
"class is not reused."
msgstr ""

#: ../../source/abc/index.rst:285
#, fuzzy
msgid ""
"To use the decorator syntax with read-write abstract properties, the "
"methods to get and set the value must be named the same."
msgstr ""
"Para utilizar la sintaxis de decorador con las propiedades abstractas de "
"lectura/escritura, los métodos para obtener y establecer el valor deben "
"tener el mismo nombre."

#: ../../source/abc/index.rst:289
msgid "Abstract Class and Static Methods"
msgstr ""

#: ../../source/abc/index.rst:291
msgid "Class and static methods can also be marked as abstract."
msgstr ""

#: ../../source/abc/index.rst
msgid "abc_class_static.py"
msgstr ""

#: ../../source/abc/index.rst:297
msgid ""
"Although the class method is invoked on the class rather than an "
"instance, it still prevents the class from being instantiated if it is "
"not defined."
msgstr ""

#: ../../source/abc/index.rst:317
msgid ":pydoc:`abc`"
msgstr ""

#: ../../source/abc/index.rst:319
#, fuzzy
msgid ":pep:`3119` -- Introducing Abstract Base Classes"
msgstr "La introducción de clases base abstractas"

#: ../../source/abc/index.rst:321
#, fuzzy
msgid ""
":mod:`collections` -- The collections module includes abstract base "
"classes for several collection types."
msgstr ""
"El módulo de colecciones incluye clases base abstractas para varios tipos"
" de colección."

#: ../../source/abc/index.rst:324
#, fuzzy
msgid ":pep:`3141` -- A Type Hierarchy for Numbers"
msgstr "Una jerarquía de tipos de números"

#: ../../source/abc/index.rst:326
msgid ""
"`Wikipedia: Strategy Pattern "
"<https://en.wikipedia.org/wiki/Strategy_pattern>`_ -- Description and "
"examples of the strategy pattern, a common plug-in implementation "
"pattern."
msgstr ""

#: ../../source/abc/index.rst:331
msgid ""
"`Dynamic Code Patterns: Extending Your Applications With Plugins "
"<http://pyvideo.org/pycon-us-2013/dynamic-code-patterns-extending-your-"
"application.html>`__ -- PyCon 2013 presentation by Doug Hellmann"
msgstr ""

#: ../../source/abc/index.rst:335
msgid ":ref:`Python 2 to 3 porting notes for abc <porting-abc>`"
msgstr ""

#~ msgid "2.6"
#~ msgstr "2.6"

#~ msgid ""
#~ "Abstract base classes are a form "
#~ "of interface checking more strict than"
#~ " individual ``hasattr()`` checks for "
#~ "particular methods.  By defining an "
#~ "abstract base class, you can define "
#~ "a common API for a set of "
#~ "subclasses.  This capability is especially "
#~ "useful in situations where a third-"
#~ "party is going to provide "
#~ "implementations, such as with plugins to"
#~ " an application, but can also aid "
#~ "you when working on a large team"
#~ " or with a large code-base "
#~ "where keeping all classes in your "
#~ "head at the same time is difficult"
#~ " or not possible."
#~ msgstr ""
#~ "Clases base abstractas son una forma "
#~ "de interfaz de comprobación mas estricta"
#~ " que controles individuales ``hasattr()`` "
#~ "para métodos particulares"

#~ msgid ""
#~ ":mod:`abc` works by marking methods of"
#~ " the base class as abstract, and "
#~ "then registering concrete classes as "
#~ "implementations of the abstract base.  "
#~ "If your code requires a particular "
#~ "API, you can use ``issubclass()`` or "
#~ "``isinstance()`` to check an object "
#~ "against the abstract class."
#~ msgstr ""
#~ ":mod:'abc' trabaja marcando métodos de "
#~ "la clase base como abstracto, y "
#~ "luego registrando clases concretas como "
#~ "implementaciones de la base abstracta. "
#~ "Si su código requiere una API "
#~ "particular, puedes usar ''issubclass()'' o "
#~ "''isinstance()'' para comprobar un objeto "
#~ "contra la clase abstracta"

#~ msgid ""
#~ "Let's start by defining an abstract "
#~ "base class to represent the API of"
#~ " a set of plugins for saving "
#~ "and loading data."
#~ msgstr ""
#~ "Vamos a empezar a definiendo una "
#~ "clase base abstracta para representar la"
#~ " API de un conjunto de plugins "
#~ "para guardar y cargar datos"

#~ msgid ""
#~ "There are two ways to indicate "
#~ "that a concrete class implements an "
#~ "abstract: register the class with the"
#~ " abc or subclass directly from the"
#~ " abc."
#~ msgstr ""
#~ "Hay dos formas para indicar una "
#~ "que una clase concreta implementa un "
#~ "abstracto: registrar la clase con abc"
#~ " o subclase directamente desde abc"

#~ msgid ""
#~ "In this example the ``PluginImplementation``"
#~ " is not derived from ``PluginBase``, "
#~ "but is registered as implementing the"
#~ " ``PluginBase`` API."
#~ msgstr ""
#~ "En este de ejemplo de "
#~ "``PluginImplementation`` no deriva de "
#~ "``PluginBase``, pero esta registrado como "
#~ "una implementación de la API "
#~ "``PluginBase``"

#~ msgid ""
#~ "Dr. André Roberge `has described "
#~ "<http://us.pycon.org/2009/conference/schedule/event/47/>`_ using"
#~ " this capability to discover plugins "
#~ "by importing all of the modules in"
#~ " a directory dynamically and then "
#~ "looking at the subclass list to "
#~ "find the implementation classes."
#~ msgstr ""
#~ "Dr. André Roberge `ha descrito "
#~ "<http://us.pycon.org/2009/conference/schedule/event/47/>` _ "
#~ "utilización de esta capacidad para "
#~ "descubrir plugins mediante la importación "
#~ "de todos los módulos en un "
#~ "directorio de forma dinámica y luego "
#~ "mirando en la lista de subclase "
#~ "para encontrar las implementaciones de "
#~ "las clases."

#~ msgid ""
#~ "The ``Base`` class in the example "
#~ "cannot be instantiated because it has"
#~ " only an abstract version of the "
#~ "property getter method."
#~ msgstr ""
#~ "La clase ``Base`` en el ejemplo no"
#~ " puede ser instanciada porque tiene "
#~ "solamente una versión abstracta del "
#~ "método getter de la propiedad."

#~ msgid "You can also define abstract read/write properties."
#~ msgstr ""
#~ "También puede definir las propiedades "
#~ "abstractas de lectura / escritura."

#~ msgid ""
#~ "Notice that the concrete property must"
#~ " be defined the same way as the"
#~ " abstract property.  Trying to override "
#~ "a read/write property in "
#~ "``PartialImplementation`` with one that is "
#~ "read-only does not work."
#~ msgstr ""
#~ "Observe que la propiedad en concreto "
#~ "debe ser definida de la misma "
#~ "manera como la propiedad abstracta. "
#~ "Tratar de sobrescribir una propiedad de"
#~ " lectura / escritura en "
#~ "``PartialImplementation`` con uno que es "
#~ "de sólo lectura no funciona."

#~ msgid ""
#~ "Notice that both methods in the "
#~ "``Base`` and ``Implementation`` classes are"
#~ " named ``value()``, although they have "
#~ "different signatures."
#~ msgstr ""
#~ "Observe que ambos métodos en las "
#~ "clases ``Base`` y ``Implementation`` se "
#~ "llaman ``value()``, aunque tienen diferentes"
#~ " firmas."

#~ msgid "Collection Types"
#~ msgstr "Tipos de colección"

#~ msgid ""
#~ "The :mod:`collections` module defines several"
#~ " abstract base classes related to "
#~ "container (and containable) types."
#~ msgstr ""
#~ "El módulo :mod:`collections` define varios "
#~ "tipos de clases abstractas relacionadas "
#~ "con contenedores (y controlable)."

#~ msgid "General container classes:"
#~ msgstr "Contenedor general de clases:"

#~ msgid "Container"
#~ msgstr "Container"

#~ msgid "Sized"
#~ msgstr "Sized"

#~ msgid "Iterator and Sequence classes:"
#~ msgstr "Clases Iterator y Sequence"

#~ msgid "Iterable"
#~ msgstr "Iterable"

#~ msgid "Iterator"
#~ msgstr "Iterator"

#~ msgid "Sequence"
#~ msgstr "Sequence"

#~ msgid "MutableSequence"
#~ msgstr "MutableSequence"

#~ msgid "Unique values:"
#~ msgstr "Valores únicos:"

#~ msgid "Hashable"
#~ msgstr "Hashable"

#~ msgid "Set"
#~ msgstr "Set"

#~ msgid "MutableSet"
#~ msgstr "MutableSet"

#~ msgid "Mappings:"
#~ msgstr "Asignaciones:"

#~ msgid "Mapping"
#~ msgstr "Mapping"

#~ msgid "MutableMapping"
#~ msgstr "MutableMapping"

#~ msgid "MappingView"
#~ msgstr "MappingView"

#~ msgid "KeysView"
#~ msgstr "KeysView"

#~ msgid "ItemsView"
#~ msgstr "ItemsView"

#~ msgid "ValuesView"
#~ msgstr "ValuesView"

#~ msgid "Miscelaneous:"
#~ msgstr "Misceláneos"

#~ msgid "Callable"
#~ msgstr "Callable"

#~ msgid ""
#~ "In addition to serving as detailed "
#~ "real-world examples of abstract base "
#~ "classes, Python's built-in types are "
#~ "automatically registered to these classes "
#~ "when you import :mod:`collections`. This "
#~ "means you can safely use "
#~ "``isinstance()`` to check parameters in "
#~ "your code to ensure that they "
#~ "support the API you need.  The "
#~ "base classes can also be used to"
#~ " define your own collection types, "
#~ "since many of them provide concrete "
#~ "implementations of the internals and "
#~ "only need a few methods overridden.  "
#~ "Refer to the standard library docs "
#~ "for collections for more details."
#~ msgstr ""
#~ "Además de servir como ejemplos "
#~ "detallados de clases base abstractas del"
#~ " mundo real, los tipos integrados de"
#~ " Python están registrados automáticamente a"
#~ " estas clases al importar "
#~ ":mod:`collections`. Esto significa que usted"
#~ " puede utilizar con seguridad "
#~ "``isinstance()`` para comprobar parámetros en"
#~ " su código para asegurarse de que "
#~ "apoyan la API que necesita. Las "
#~ "clases base también se pueden usar "
#~ "para definir sus propios tipos de "
#~ "colección, ya que muchos de ellos "
#~ "ofrecen implementaciones concretas de las "
#~ "partes internas y sólo necesitan "
#~ "sobrescribir algunos métodos. Consulte la "
#~ "documentación de la biblioteca estándar "
#~ "de colecciones para más detalles."

#~ msgid "`abc <http://docs.python.org/library/abc.html>`_"
#~ msgstr "`abc <http://docs.python.org/library/abc.html>`_"

#~ msgid "The standard library documentation for this module."
#~ msgstr "La documentación de la biblioteca estándar para este módulo."

#~ msgid ":pep:`3119`"
#~ msgstr ":pep:`3119`"

#~ msgid ":mod:`collections`"
#~ msgstr ":mod:`collections`"

#~ msgid "`collections <http://docs.python.org/library/collections.html>`_"
#~ msgstr "`collections <http://docs.python.org/library/collections.html>`_"

#~ msgid "The standard library documentation for collections."
#~ msgstr "La documentación de la biblioteca estándar para colecciones."

#~ msgid ":pep:`3141`"
#~ msgstr ":pep:`3141`"

#~ msgid ""
#~ "`Wikipedia: Strategy Pattern "
#~ "<http://en.wikipedia.org/wiki/Strategy_pattern>`_"
#~ msgstr ""
#~ "`Wikipedia: Strategy Pattern "
#~ "<http://en.wikipedia.org/wiki/Strategy_pattern>`_"

#~ msgid "Description and examples of the strategy pattern."
#~ msgstr "Descripción y ejemplos del patrón de estrategia."

#~ msgid ""
#~ "`Plugins and monkeypatching "
#~ "<http://us.pycon.org/2009/conference/schedule/event/47/>`_"
#~ msgstr ""
#~ "`Plugins and monkeypatching "
#~ "<http://us.pycon.org/2009/conference/schedule/event/47/>`_"

#~ msgid "PyCon 2009 presentation by Dr. André Roberge"
#~ msgstr "Presentación en la PyCon 2009 por el Dr. André Roberge"

