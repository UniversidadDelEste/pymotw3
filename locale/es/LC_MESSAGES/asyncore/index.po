#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: 2015-11-11 18:05-0300\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: es_AR\n"
"X-Generator: Poedit 1.8.6\n"

#: ../../PyMOTW/asyncore/index.rst:3
msgid "asyncore -- Asynchronous I/O handler"
msgstr "asyncore -- Manejador asincrónico de I/O"

#: ../../PyMOTW/asyncore/index.rst:8
msgid "Asynchronous I/O handler"
msgstr " Manejador asincrónico de I/O"

#: ../../PyMOTW/asyncore/index.rst:9
msgid "1.5.2 and later"
msgstr "1.5.2 y posterior"

#: ../../PyMOTW/asyncore/index.rst:11
msgid ""
"The asyncore module includes tools for working with I/O objects such as "
"sockets so they can be managed asynchronously (instead of, for example, "
"using threads).  The main class provided is :class:`dispatcher`, a wrapper "
"around a socket that provides hooks for handling events like connecting, "
"reading, and writing when invoked from the main loop function, :func:`loop`."
msgstr ""
"El módulo de asyncore incluye herramientas para trabajar con objetos de I/O "
"como zócalos por lo que pueden ser manejadas de forma asincrónica (en vez "
"de, por ejemplo, utilizando hilos).  La clase principal es :"
"class:'dispatcher', un contenedor alrededor de un zócalo que ofrece ganchos "
"para controlar eventos como conexión, lectura y escritura cuando se invoca "
"la función de bucle principal :func:'loop'."

#: ../../PyMOTW/asyncore/index.rst:14
msgid "Clients"
msgstr "Clientes"

#: ../../PyMOTW/asyncore/index.rst:16
msgid ""
"To create an asyncore-based client, subclass :class:`dispatcher` and "
"provide implementations for creating the socket, reading, and writing.  "
"Let's examine this HTTP client, based on the one from the standard library "
"documentation."
msgstr ""
"Para crear un cliente de asyncore, subclase :class:'dispatcher' y "
"proporcionar implementaciones para crear la toma, lectura y escritura.  "
"Vamos a examinar a este cliente HTTP, basado en el de la documentación de "
"la biblioteca estándar."

#: ../../PyMOTW/asyncore/index.rst:22
msgid ""
"First, the socket is created in ``__init__()`` using the base class method "
"``create_socket()``.  Alternative implementations of the method may be "
"provided, but in this case we want a TCP/IP socket so the base class "
"version is sufficient."
msgstr ""
"En primer lugar, el socket se crea en ''__init__()'' usando el método de "
"clase base ''create_socket()''.  Implementaciones alternativas del método "
"se pueden proporcionar, pero en este caso queremos un socket TCP/IP para "
"que la versión de clase base es suficiente."

#: ../../PyMOTW/asyncore/index.rst:24
msgid ""
"The ``handle_connect()`` hook is present simply to illustrate when it is "
"called.  Other types of clients that need to do some sort of hand-shaking "
"or protocol negotiation should do the work in ``handle_connect()``."
msgstr ""
"El gancho de '' handle_connect()'' es simplemente para ilustrar cuando se "
"llama.  Otros tipos de clientes que necesitan hacer algún tipo de apretón "
"de manos o negociación de protocolo deben trabajar en '' handle_connect()''."

#: ../../PyMOTW/asyncore/index.rst:26
msgid ""
"``handle_close()`` is similarly presented for the purposes of showing when "
"the method is called.  The base class version closes the socket correctly, "
"so if you don't need to do extra cleanup on close you can leave the method "
"out."
msgstr ""
"'' handle_close()'' de manera similar es presentado para los propósitos de "
"mostrar cuando se llama al método.  La versión de clase base cierra la toma "
"correctamente, así que si usted no necesita hacer limpieza adicional de "
"cierre puede dejar el método hacia fuera."

#: ../../PyMOTW/asyncore/index.rst:28
msgid ""
"The asyncore loop uses ``writable()`` and its sibling method ``readable()`` "
"to decide what actions to take with each dispatcher.  Actual use of poll() "
"or select() on the sockets or file descriptors managed by each dispatcher "
"is handled inside the :mod:`asyncore` code, so you don't need to do that "
"yourself.  Simply indicate whether the dispatcher cares at all about "
"reading or writing.  In the case of this HTTP client, ``writable()`` "
"returns True as long as there is data from the request to send to the "
"server.  ``readable()`` always returns True because we want to read all of "
"the data."
msgstr ""
"El bucle asyncore utiliza ``writable() `` y su método hermano "
"``readable()`` para decidir las acciones a tomar en cada despachador. El "
"uso real de poll () o select() en las tomas o descriptores de archivos "
"gestionados por cada despachador se maneja dentro del código mod:"
"`asyncore`, por lo que no tiene que hacerlo usted mismo. Simplemente "
"indique si el despachador le importa en absoluto acerca de la lectura o la "
"escritura. En el caso de este cliente HTTP, ``writable() `` devuelve "
"Verdadero, siempre y cuando no hay datos de la solicitud para enviar al "
"servidor. `` readable () `` siempre devuelve Verdadero porque queremos leer "
"todos los datos."

#: ../../PyMOTW/asyncore/index.rst:30
msgid ""
"Each time through the loop when ``writable()`` responds positively, "
"``handle_write()`` is invoked.  In this version, the HTTP request string "
"that was built in ``__init__()`` is sent to the server and the write buffer "
"is reduced by the amount successfully sent."
msgstr ""
"Cada vez que a través del bucle cuando `` writable () `` responde "
"positivamente, `` handle_write () `` se invoca. En esta versión, la cadena "
"de petición HTTP que se construyó en `` __init __ () `` se envía al "
"servidor y el búfer de escritura se reduce en la cantidad enviada "
"correctamente."

#: ../../PyMOTW/asyncore/index.rst:32
msgid ""
"Similarly, when ``readable()`` responds positively and there is data to "
"read, ``handle_read()`` is invoked."
msgstr ""
"Del mismo modo, cuando `` readable () `` responde positivamente y hay datos "
"para leer, `` handle_read () `` se invoca."

#: ../../PyMOTW/asyncore/index.rst:34
msgid ""
"The example below the ``__main__`` test configures logging for debugging "
"then creates two clients to download two separate web pages.  Creating the "
"clients registers them in a \"map\" kept internally by asyncore.  The "
"downloading occurs as the loop iterates over the clients.  When the client "
"reads 0 bytes from a socket that seems readable, the condition is "
"interpreted as a closed connection and ``handle_close()`` is called."
msgstr ""
"El ejemplo debajo de la prueba `` __main__`` configura el registro para la "
"depuración, entonces crea dos clientes para descargar dos páginas web "
"diferentes. Creación de los clientes los registra en un \"mapa\" guardado "
"internamente por asyncore. La descarga se produce como las iteraciones de "
"bucle a través de los clientes. Cuando el cliente lee 0 bytes desde un "
"socket que parece legible, la condición se interpreta como una conexión "
"cerrada y `` handle_close () `` se llama."

#: ../../PyMOTW/asyncore/index.rst:36
msgid "One example of how this client app may run is:"
msgstr "Un ejemplo de cómo esta aplicación cliente puede ejecutar es:"

#: ../../PyMOTW/asyncore/index.rst:83
msgid "Servers"
msgstr "Servidores"

#: ../../PyMOTW/asyncore/index.rst:85
msgid ""
"The example below illustrates using asyncore on the server by re-"
"implementing the EchoServer from the :mod:`SocketServer` examples.  There "
"are three classes: ``EchoServer`` receives incoming connections from "
"clients and creates ``EchoHandler`` instances to deal with each.  The "
"``EchoClient`` is an asyncore dispatcher similar to the HttpClient defined "
"above."
msgstr ""
"El siguiente ejemplo ilustra el uso de asyncore en el servidor por la re-"
"implementación del Echoserver de los ejemplos de  mod:`SocketServer`. Hay "
"tres clases: `` EchoServer`` recibe las conexiones entrantes de los "
"clientes y crea una instancia `` EchoHandler`` para hacer frente a cada "
"uno. El `` EchoClient`` es un despachador de asyncore similar a la "
"HttpClient definido anteriormente."

#: ../../PyMOTW/asyncore/index.rst:91
msgid ""
"The EchoServer and EchoHandler are defined in separate classes because they "
"do different things.  When EchoServer accepts a connection, a new socket is "
"established.  Rather than try to dispatch to individual clients within "
"EchoServer, an EchoHandler is created to take advantage of the socket map "
"maintained by asyncore."
msgstr ""
"El Echoserver y EchoHandler se definen en clases separadas porque hacen "
"cosas diferentes. Cuando Echoserver acepta una conexión, se establece un "
"nuevo socket. En lugar de tratar de enviar a los clientes individuales "
"dentro Echoserver, se crea una EchoHandler aprovechar el mapa toma "
"mantenida por asyncore."

#: ../../PyMOTW/asyncore/index.rst:139
msgid ""
"In this example the server, handler, and client objects are all being "
"maintained in the same socket map by asyncore in a single process. To "
"separate the server from the client, simply instantiate them from separate "
"scripts and run ``asyncore.loop()`` in both. When a dispatcher is closed, "
"it is removed from the map maintained by asyncore and the loop exits when "
"the map is empty."
msgstr ""
"En este ejemplo, todos se mantienen, los servidores, manejador y objetos de "
"cliente en el mismo mapa zócalo asyncore en un solo proceso. Para separar "
"el servidor desde el cliente, sólo tiene que crear instancias de ellos de "
"secuencias de comandos y ejecutar ``asyncore.loop () ``, por separado. "
"Cuando un despachador está cerrado, se elimina del mapa mantenido por "
"asyncore y el bucle termina cuando el mapa está vacío."

#: ../../PyMOTW/asyncore/index.rst:142
msgid "Working with Other Event Loops"
msgstr "Trabajar con otros bucles de eventos"

#: ../../PyMOTW/asyncore/index.rst:144
msgid ""
"It is sometimes necessary to integrate the asyncore event loop with an "
"event loop from the parent application.  For example, a GUI application "
"would not want the UI to block until all asynchronous transfers are handled "
"-- that would defeat the purpose of making them asynchronous.  To make this "
"sort of integration easy, ``asyncore.loop()`` accepts arguments to set a "
"timeout and to limit the number of times the loop is run.  We can see their "
"effect on the client by re-using HttpClient from the first example."
msgstr ""
"A veces es necesario para integrar el bucle de eventos asyncore con un "
"bucle de eventos de la aplicación principal. Por ejemplo, una aplicación "
"GUI no querría bloquear la interfaz de usuario hasta que todas las "
"transferencias asíncronas se manejen - que anule el propósito de hacerlos "
"asíncronos. Para hacer este tipo de integración fácil, ``asyncore.loop()`` "
"acepta argumentos para establecer un tiempo de espera y para limitar el "
"número de veces que se ejecuta el bucle. Podemos ver su efecto en el "
"cliente reutilizando HttpClient del primer ejemplo."

#: ../../PyMOTW/asyncore/index.rst:150
msgid ""
"Here we see that the client is only asked to read or data once per call "
"into ``asyncore.loop()``.  Instead of our own ``while`` loop, we could call "
"``asyncore.loop()`` like this from a GUI toolkit idle handler or other "
"mechanism for doing a small amount of work when the UI is not busy with "
"other event handlers."
msgstr ""
"Aquí vemos que el cliente sólo se le pide que lea o los datos una vez por "
"llamada a `` asyncore.loop () ``. En lugar de nuestro propio bucle "
"``while``, podríamos llamar ``asyncore.loop()`` así desde un controlador "
"inactivo GUI u otro mecanismo para hacer una pequeña cantidad de trabajo "
"cuando la interfaz de usuario no está ocupado con otro evento de "
"manejadores."

#: ../../PyMOTW/asyncore/index.rst:179
msgid "Working with Files"
msgstr "Trabajando con archivos"

#: ../../PyMOTW/asyncore/index.rst:181
msgid ""
"Normally you would want to use asyncore with sockets, but there are times "
"when it is useful to read files asynchronously, too (to use files when "
"testing network servers without requiring the network setup, or to read or "
"write large data files in parts).  For these situations, asyncore provides "
"the :class:`file_dispatcher` and :class:`file_wrapper` classes."
msgstr ""
"Normalmente se desea utilizar asyncore con sockets, pero hay momentos en "
"que es útil leer archivos de forma asíncrona, también (para usar archivos "
"al probar los servidores de red sin necesidad de configuración de la red, o "
"para leer o escribir archivos de datos de gran tamaño en partes). Para "
"estas situaciones, asyncore proporciona la :class:`file_dispatcher`  y :"
"class:`clases file_wrapper`."

#: ../../PyMOTW/asyncore/index.rst:187
msgid ""
"This example was tested under Python 2.5.2, so I am using ``os.open()`` to "
"get a file descriptor for the file.  For Python 2.6 and later, "
"``file_dispatcher`` automatically converts anything with a ``fileno()`` "
"method to a file descriptor."
msgstr ""
"Este ejemplo fue probado bajo Python 2.5.2, así que estoy usando `` os.open "
"() `` para obtener un descriptor de archivo para el archivo. Para Python "
"2.6 y posteriores, `` file_dispatcher`` convierte automáticamente cualquier "
"cosa con un método `` fileno () `` a un descriptor de archivo."

#: ../../PyMOTW/asyncore/index.rst:212
msgid "`asyncore <http://docs.python.org/library/asyncore.html>`_"
msgstr "`asyncore <http://docs.python.org/library/asyncore.html>`_"

#: ../../PyMOTW/asyncore/index.rst:212
msgid "The standard library documentation for this module."
msgstr "La documentación de la biblioteca estándar para este módulo."

#: ../../PyMOTW/asyncore/index.rst:216
msgid ":mod:`asynchat`"
msgstr ":mod:`asynchat`"

#: ../../PyMOTW/asyncore/index.rst:215
msgid ""
"The asynchat module builds on asyncore to make it easier to create clients "
"and servers communicate by passing messages back and forth using a set "
"protocol."
msgstr ""
"El módulo asynchat basa en asyncore para que sea más fácil para crear "
"clientes y servidores se comunican mediante el paso de mensajes de ida y "
"vuelta usando un protocolo establecido."

#: ../../PyMOTW/asyncore/index.rst:219
msgid ":mod:`SocketServer`"
msgstr ":mod:`SocketServer`"

#: ../../PyMOTW/asyncore/index.rst:219
msgid ""
"The SocketServer module article includes another example of the EchoServer "
"with threading and forking variants."
msgstr ""
"El artículo módulo SocketServer incluye otro ejemplo de la Echoserver con "
"hilos y las variantes que se bifurcan."
